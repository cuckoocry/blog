"use strict";(self.webpackChunkblogs2=self.webpackChunkblogs2||[]).push([[3871],{66262:(s,i)=>{i.A=(s,i)=>{const a=s.__vccOpts||s;for(const[s,n]of i)a[s]=n;return a}},19752:(s,i,a)=>{a.r(i),a.d(i,{comp:()=>o,data:()=>u});var n=a(20641);const e=a.p+"assets/img/image-20200317152541284.d940218e.png",l=a.p+"assets/img/image-20200317175202647.285b613b.png",t=a.p+"assets/img/image-20200317175241007.9055b35c.png",p=a.p+"assets/img/image-20200317183202992.e6ebda0d.png",d=a.p+"assets/img/image-20200317183600957.4ea21582.png",r=a.p+"assets/img/image-20200317201150197.dc745cc0.png",h=a.p+"assets/img/image-20200318154414717.ae138d30.png",c=[(0,n.Fv)('<h2 id="_1、前言" tabindex="-1"><a class="header-anchor" href="#_1、前言"><span>1、前言</span></a></h2><p>获取多线程的方法，我们都知道有三种，还有一种是实现Callable接口</p><ul><li>实例化Thread类</li><li>实现Runnable接口</li><li>实现Callable接口</li><li>使用线程池获取</li></ul><h3 id="_1-1、callable接口" tabindex="-1"><a class="header-anchor" href="#_1-1、callable接口"><span>1.1、Callable接口</span></a></h3><p>Callable接口，是一种让线程执行完成后，能够返回结果的</p><p>在说到Callable接口的时候，我们不得不提到Runnable接口</p><div class="language- line-numbers-mode" data-highlighter="shiki" data-ext="" data-title="" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span>/**</span></span>\n<span class="line"><span> * 实现Runnable接口</span></span>\n<span class="line"><span> */</span></span>\n<span class="line"><span>class MyThread implements Runnable {</span></span>\n<span class="line"><span></span></span>\n<span class="line"><span>    @Override</span></span>\n<span class="line"><span>    public void run() {</span></span>\n<span class="line"><span></span></span>\n<span class="line"><span>    }</span></span>\n<span class="line"><span>}</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>我们知道，实现Runnable接口的时候，需要重写run方法，也就是线程在启动的时候，会自动调用的方法</p><p>同理，我们实现Callable接口，也需要实现<code>call</code>方法，但是这个时候我们还需要有返回值，这个Callable接口的应用场景一般就在于批处理业务，比如转账的时候，需要给一会返回结果的状态码回来，代表本次操作成功还是失败。</p><div class="language- line-numbers-mode" data-highlighter="shiki" data-ext="" data-title="" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span>/**</span></span>\n<span class="line"><span> * Callable有返回值</span></span>\n<span class="line"><span> * 批量处理的时候，需要带返回值的接口（例如支付失败的时候，需要返回错误状态）</span></span>\n<span class="line"><span> *</span></span>\n<span class="line"><span> */</span></span>\n<span class="line"><span>class MyThread2 implements Callable&lt;Integer&gt; {</span></span>\n<span class="line"><span></span></span>\n<span class="line"><span>    @Override</span></span>\n<span class="line"><span>    public Integer call() throws Exception {</span></span>\n<span class="line"><span>        System.out.println(&quot;come in Callable&quot;);</span></span>\n<span class="line"><span>        return 1024;</span></span>\n<span class="line"><span>    }</span></span>\n<span class="line"><span>}</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>最后我们需要做的就是通过Thread线程， 将MyThread2实现Callable接口的类包装起来。</p><p><code>适配器模式</code></p><p>这里需要用到的是FutureTask类，他实现了Runnable接口，并且还需要传递一个实现Callable接口的类作为构造函数</p><div class="language- line-numbers-mode" data-highlighter="shiki" data-ext="" data-title="" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span>// FutureTask：实现了Runnable接口，构造函数又需要传入 Callable接口</span></span>\n<span class="line"><span>// 这里通过了FutureTask接触了Callable接口</span></span>\n<span class="line"><span>FutureTask&lt;Integer&gt; futureTask = new FutureTask&lt;&gt;(new MyThread2());</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>然后在用Thread进行实例化，传入实现Runnabnle接口的FutureTask的类</p><div class="language- line-numbers-mode" data-highlighter="shiki" data-ext="" data-title="" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span>Thread t1 = new Thread(futureTask, &quot;aaa&quot;);</span></span>\n<span class="line"><span>t1.start();</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div></div></div><p>最后通过 futureTask.get() 获取到返回值</p><div class="language- line-numbers-mode" data-highlighter="shiki" data-ext="" data-title="" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span>// 输出FutureTask的返回值</span></span>\n<span class="line"><span>System.out.println(&quot;result FutureTask &quot; + futureTask.get());</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div></div></div><p>这就相当于原来我们的方式是main方法一条龙之心，后面在引入Callable后，对于执行比较久的线程，可以单独新开一个线程进行执行，最后在进行汇总输出</p><p>最后需要注意的是 要求获得Callable线程的计算结果，如果没有计算完成就要去强求，会导致阻塞，直到计算完成</p><figure><img src="'+e+'" alt="image-20200317152541284" tabindex="0" loading="lazy"><figcaption>image-20200317152541284</figcaption></figure><p>也就是说 futureTask.get() 需要放在最后执行，这样不会导致主线程阻塞</p><p>也可以使用下面算法，使用类似于自旋锁的方式来进行判断是否运行完毕</p><div class="language- line-numbers-mode" data-highlighter="shiki" data-ext="" data-title="" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span>// 判断futureTask是否计算完成</span></span>\n<span class="line"><span>while(!futureTask.isDone()) {</span></span>\n<span class="line"><span></span></span>\n<span class="line"><span>}</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="_1-2、注意" tabindex="-1"><a class="header-anchor" href="#_1-2、注意"><span>1.2、注意</span></a></h3><p>多个线程执行 一个FutureTask的时候，只会计算一次</p><div class="language- line-numbers-mode" data-highlighter="shiki" data-ext="" data-title="" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span>FutureTask&lt;Integer&gt; futureTask = new FutureTask&lt;&gt;(new MyThread2());</span></span>\n<span class="line"><span></span></span>\n<span class="line"><span>// 开启两个线程计算futureTask</span></span>\n<span class="line"><span>new Thread(futureTask, &quot;AAA&quot;).start();</span></span>\n<span class="line"><span>new Thread(futureTask, &quot;BBB&quot;).start();</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>如果我们要两个线程同时计算任务的话，那么需要这样写，需要定义两个futureTask</p><div class="language- line-numbers-mode" data-highlighter="shiki" data-ext="" data-title="" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span>FutureTask&lt;Integer&gt; futureTask = new FutureTask&lt;&gt;(new MyThread2());</span></span>\n<span class="line"><span>FutureTask&lt;Integer&gt; futureTask2 = new FutureTask&lt;&gt;(new MyThread2());</span></span>\n<span class="line"><span></span></span>\n<span class="line"><span>// 开启两个线程计算futureTask</span></span>\n<span class="line"><span>new Thread(futureTask, &quot;AAA&quot;).start();</span></span>\n<span class="line"><span></span></span>\n<span class="line"><span>new Thread(futureTask2, &quot;BBB&quot;).start();</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="_2、threadpoolexecutor-线程池" tabindex="-1"><a class="header-anchor" href="#_2、threadpoolexecutor-线程池"><span>2、ThreadPoolExecutor(线程池)</span></a></h2><h3 id="_2-1、为什么用线程池" tabindex="-1"><a class="header-anchor" href="#_2-1、为什么用线程池"><span>2.1、为什么用线程池</span></a></h3><p>线程池做的主要工作就是控制运行的线程的数量，<code>处理过程中，将任务放入到队列中</code>，然后线程创建后，启动这些任务， <code>如果线程数量超过了最大数量的线程排队等候</code>，等其它线程执行完毕，再从队列中取出任务来执行。</p><p>它的主要特点为：<code>线程复用、控制最大并发数、管理线程</code></p><p>线程池中的任务是放入到阻塞队列中的</p><h3 id="_2-2、线程池的好处" tabindex="-1"><a class="header-anchor" href="#_2-2、线程池的好处"><span>2.2、线程池的好处</span></a></h3><p>多核处理的好处是：省略的上下文的切换开销</p><p>原来我们实例化对象的时候，是使用 new关键字进行创建，到了Spring后，我们学了IOC依赖注入，发现Spring帮我们将对象已经加载到了Spring容器中，只需要通过@Autowrite注解，就能够自动注入，从而使用</p><p>因此使用多线程有下列的好处</p><ul><li>降低资源消耗。通过重复利用已创建的线程，降低线程创建和销毁造成的消耗</li><li>提高响应速度。当任务到达时，任务可以不需要等到线程创建就立即执行</li><li>提高线程的可管理性。线程是稀缺资源，如果无限创建，不仅会消耗系统资源，还会降低系统的稳定性，使用线程池可以进行统一的分配，调优和监控</li></ul><h3 id="_2-3、架构说明" tabindex="-1"><a class="header-anchor" href="#_2-3、架构说明"><span>2.3、架构说明</span></a></h3><p>Java中线程池是通过Executor框架实现的，该框架中用到了Executor，Executors（代表工具类），ExecutorService，ThreadPoolExecutor这几个类。</p><figure><img src="'+l+'" alt="image-20200317175202647" tabindex="0" loading="lazy"><figcaption>image-20200317175202647</figcaption></figure><figure><img src="'+t+'" alt="image-20200317175241007" tabindex="0" loading="lazy"><figcaption>image-20200317175241007</figcaption></figure><h3 id="_2-4、创建线程池" tabindex="-1"><a class="header-anchor" href="#_2-4、创建线程池"><span>2.4、创建线程池</span></a></h3><ul><li><code>Executors.newFixedThreadPool(int i)</code> ：创建一个拥有 i 个线程的线程池 <ul><li>执行长期的任务，性能好很多</li><li>创建一个定长线程池，可控制线程数最大并发数，超出的线程会在队列中等待</li></ul></li><li><code>Executors.newSingleThreadExecutor</code>：创建一个只有1个线程的 单线程池 <ul><li>一个任务一个任务执行的场景</li><li>创建一个单线程化的线程池，它只会用唯一的工作线程来执行任务，保证所有任务按照指定顺序执行</li></ul></li><li><code>Executors.newCacheThreadPool()</code>; 创建一个可扩容的线程池 <ul><li>执行很多短期异步的小程序或者负载教轻的服务器</li><li>创建一个可缓存线程池，如果线程长度超过处理需要，可灵活回收空闲线程，如无可回收，则新建新线程</li></ul></li><li><code>Executors.newScheduledThreadPool(int corePoolSize)</code>：线程池支持定时以及周期性执行任务，创建一个corePoolSize为传入参数，最大线程数为整形的最大数的线程池</li></ul><p>具体使用，首先我们需要使用Executors工具类，进行创建线程池，这里创建了一个拥有5个线程的线程池</p><div class="language- line-numbers-mode" data-highlighter="shiki" data-ext="" data-title="" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span>// 一池5个处理线程（用池化技术，一定要记得关闭）</span></span>\n<span class="line"><span>ExecutorService threadPool = Executors.newFixedThreadPool(5);</span></span>\n<span class="line"><span></span></span>\n<span class="line"><span>// 创建一个只有一个线程的线程池</span></span>\n<span class="line"><span>ExecutorService threadPool = Executors.newSingleThreadExecutor();</span></span>\n<span class="line"><span></span></span>\n<span class="line"><span>// 创建一个拥有N个线程的线程池，根据调度创建合适的线程</span></span>\n<span class="line"><span>ExecutorService threadPool = Executors.newCacheThreadPool();</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>然后我们执行下面的的应用场景</p><div class="language- line-numbers-mode" data-highlighter="shiki" data-ext="" data-title="" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span>模拟10个用户来办理业务，每个用户就是一个来自外部请求线程</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><p>我们需要使用 threadPool.execute执行业务，execute需要传入一个实现了Runnable接口的线程</p><div class="language- line-numbers-mode" data-highlighter="shiki" data-ext="" data-title="" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span>threadPool.execute(() -&gt; {</span></span>\n<span class="line"><span>\tSystem.out.println(Thread.currentThread().getName() + &quot;\\t 给用户办理业务&quot;);</span></span>\n<span class="line"><span>});</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>然后我们使用完毕后关闭线程池</p><div class="language- line-numbers-mode" data-highlighter="shiki" data-ext="" data-title="" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span>threadPool.shutdown();</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><p>完整代码为：</p><div class="language- line-numbers-mode" data-highlighter="shiki" data-ext="" data-title="" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span>/**</span></span>\n<span class="line"><span> * 第四种获取 / 使用 Java多线程的方式，通过线程池</span></span>\n<span class="line"><span> * @author: 阿飞</span></span>\n<span class="line"><span> * @create: 2020-03-17-15:59</span></span>\n<span class="line"><span> */</span></span>\n<span class="line"><span>public class MyThreadPoolDemo {</span></span>\n<span class="line"><span>    public static void main(String[] args) {</span></span>\n<span class="line"><span></span></span>\n<span class="line"><span>        // Array  Arrays(辅助工具类)</span></span>\n<span class="line"><span>        // Collection Collections(辅助工具类)</span></span>\n<span class="line"><span>        // Executor Executors(辅助工具类)</span></span>\n<span class="line"><span></span></span>\n<span class="line"><span></span></span>\n<span class="line"><span>        // 一池5个处理线程（用池化技术，一定要记得关闭）</span></span>\n<span class="line"><span>        ExecutorService threadPool = Executors.newFixedThreadPool(5);</span></span>\n<span class="line"><span></span></span>\n<span class="line"><span>        // 模拟10个用户来办理业务，每个用户就是一个来自外部请求线程</span></span>\n<span class="line"><span>        try {</span></span>\n<span class="line"><span></span></span>\n<span class="line"><span>            // 循环十次，模拟业务办理，让5个线程处理这10个请求</span></span>\n<span class="line"><span>            for (int i = 0; i &lt; 10; i++) {</span></span>\n<span class="line"><span>                final int tempInt = i;</span></span>\n<span class="line"><span>                threadPool.execute(() -&gt; {</span></span>\n<span class="line"><span>                    System.out.println(Thread.currentThread().getName() + &quot;\\t 给用户:&quot; + tempInt + &quot; 办理业务&quot;);</span></span>\n<span class="line"><span>                });</span></span>\n<span class="line"><span>            }</span></span>\n<span class="line"><span>        } catch (Exception e) {</span></span>\n<span class="line"><span>            e.printStackTrace();</span></span>\n<span class="line"><span>        } finally {</span></span>\n<span class="line"><span>            threadPool.shutdown();</span></span>\n<span class="line"><span>        }</span></span>\n<span class="line"><span></span></span>\n<span class="line"><span>    }</span></span>\n<span class="line"><span>}</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>最后结果：</p><div class="language- line-numbers-mode" data-highlighter="shiki" data-ext="" data-title="" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span>pool-1-thread-1\t 给用户:0 办理业务</span></span>\n<span class="line"><span>pool-1-thread-5\t 给用户:4 办理业务</span></span>\n<span class="line"><span>pool-1-thread-1\t 给用户:5 办理业务</span></span>\n<span class="line"><span>pool-1-thread-4\t 给用户:3 办理业务</span></span>\n<span class="line"><span>pool-1-thread-2\t 给用户:1 办理业务</span></span>\n<span class="line"><span>pool-1-thread-3\t 给用户:2 办理业务</span></span>\n<span class="line"><span>pool-1-thread-2\t 给用户:9 办理业务</span></span>\n<span class="line"><span>pool-1-thread-4\t 给用户:8 办理业务</span></span>\n<span class="line"><span>pool-1-thread-1\t 给用户:7 办理业务</span></span>\n<span class="line"><span>pool-1-thread-5\t 给用户:6 办理业务</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>我们能够看到，一共有5个线程，在给10个用户办理业务</p><h3 id="_2-5、创建周期性执行任务的线程池" tabindex="-1"><a class="header-anchor" href="#_2-5、创建周期性执行任务的线程池"><span>2.5、创建周期性执行任务的线程池</span></a></h3><p>Executors.newScheduledThreadPool(int corePoolSize)：</p><p><strong>线程池支持定时以及周期性执行任务，创建一个corePoolSize为传入参数，最大线程数为整形的最大数的线程池</strong></p><p>底层使用 ScheduledThreadPoolExecutor 来实现 ScheduledThreadPoolExecutor 为ThreadPoolExecutor子类</p><div class="language- line-numbers-mode" data-highlighter="shiki" data-ext="" data-title="" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span>public ScheduledThreadPoolExecutor(int corePoolSize) {</span></span>\n<span class="line"><span>        super(corePoolSize, Integer.MAX_VALUE, 0, NANOSECONDS,</span></span>\n<span class="line"><span>              new DelayedWorkQueue());</span></span>\n<span class="line"><span>}</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="执行方法" tabindex="-1"><a class="header-anchor" href="#执行方法"><span>执行方法</span></a></h4><div class="language- line-numbers-mode" data-highlighter="shiki" data-ext="" data-title="" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span>    /**</span></span>\n<span class="line"><span>     * @throws RejectedExecutionException {@inheritDoc}</span></span>\n<span class="line"><span>     * @throws NullPointerException       {@inheritDoc}</span></span>\n<span class="line"><span>     * command：执行的任务 Callable或Runnable接口实现类</span></span>\n<span class="line"><span>\t * delay：延时执行任务的时间</span></span>\n<span class="line"><span>\t * unit：延迟时间单位</span></span>\n<span class="line"><span>     */</span></span>\n<span class="line"><span>    public ScheduledFuture&lt;?&gt; schedule(Runnable command,</span></span>\n<span class="line"><span>                                       long delay,</span></span>\n<span class="line"><span>                                       TimeUnit unit)</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><div class="language- line-numbers-mode" data-highlighter="shiki" data-ext="" data-title="" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span>    /**</span></span>\n<span class="line"><span>     * @throws RejectedExecutionException {@inheritDoc}</span></span>\n<span class="line"><span>     * @throws NullPointerException       {@inheritDoc}</span></span>\n<span class="line"><span>     * @throws IllegalArgumentException   {@inheritDoc}</span></span>\n<span class="line"><span>     * command：执行的任务 Callable或Runnable接口实现类</span></span>\n<span class="line"><span>\t * initialDelay 第一次执行任务延迟时间</span></span>\n<span class="line"><span>\t * period 连续执行任务之间的周期，从上一个任务开始执行时计算延迟多少开始执行下一个任务，但是还会等上一个任务结束之后。</span></span>\n<span class="line"><span>\t * unit：延迟时间单位</span></span>\n<span class="line"><span>     */</span></span>\n<span class="line"><span>    public ScheduledFuture&lt;?&gt; scheduleAtFixedRate(Runnable command,</span></span>\n<span class="line"><span>                                                  long initialDelay,</span></span>\n<span class="line"><span>                                                  long period,</span></span>\n<span class="line"><span>                                                  TimeUnit unit)</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><div class="language- line-numbers-mode" data-highlighter="shiki" data-ext="" data-title="" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span>    /**</span></span>\n<span class="line"><span>     * @throws RejectedExecutionException {@inheritDoc}</span></span>\n<span class="line"><span>     * @throws NullPointerException       {@inheritDoc}</span></span>\n<span class="line"><span>     * @throws IllegalArgumentException   {@inheritDoc}</span></span>\n<span class="line"><span>     * command：执行的任务 Callable或Runnable接口实现类</span></span>\n<span class="line"><span>\t * initialDelay 第一次执行任务延迟时间</span></span>\n<span class="line"><span>\t * delay：连续执行任务之间的周期，从上一个任务全部执行完成时计算延迟多少开始执行下一个任务</span></span>\n<span class="line"><span>\t * unit：延迟时间单位</span></span>\n<span class="line"><span>     */</span></span>\n<span class="line"><span>    public ScheduledFuture&lt;?&gt; scheduleWithFixedDelay(Runnable command,</span></span>\n<span class="line"><span>                                                     long initialDelay,</span></span>\n<span class="line"><span>                                                     long delay,</span></span>\n<span class="line"><span>                                                     TimeUnit unit)</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="_3、底层实现" tabindex="-1"><a class="header-anchor" href="#_3、底层实现"><span>3、底层实现</span></a></h2><p>我们通过查看源码，点击了<code>Executors.newSingleThreadExecutor</code> 和 <code>Executors.newFixedThreadPool</code>能够发现底层都是使用了<code>ThreadPoolExecutor</code></p><div class="language-java line-numbers-mode" data-highlighter="shiki" data-ext="java" data-title="java" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#A0A1A7;--shiki-dark:#7F848E;--shiki-light-font-style:italic;--shiki-dark-font-style:italic;">    /**</span></span>\n<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-dark:#7F848E;--shiki-light-font-style:italic;--shiki-dark-font-style:italic;">     * Creates a thread pool that reuses a fixed number of threads</span></span>\n<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-dark:#7F848E;--shiki-light-font-style:italic;--shiki-dark-font-style:italic;">     * operating off a shared unbounded queue.  At any point, at most</span></span>\n<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-dark:#7F848E;--shiki-light-font-style:italic;--shiki-dark-font-style:italic;">     * {@code nThreads} threads will be active processing tasks.</span></span>\n<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-dark:#7F848E;--shiki-light-font-style:italic;--shiki-dark-font-style:italic;">     * If additional tasks are submitted when all threads are active,</span></span>\n<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-dark:#7F848E;--shiki-light-font-style:italic;--shiki-dark-font-style:italic;">     * they will wait in the queue until a thread is available.</span></span>\n<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-dark:#7F848E;--shiki-light-font-style:italic;--shiki-dark-font-style:italic;">     * If any thread terminates due to a failure during execution</span></span>\n<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-dark:#7F848E;--shiki-light-font-style:italic;--shiki-dark-font-style:italic;">     * prior to shutdown, a new one will take its place if needed to</span></span>\n<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-dark:#7F848E;--shiki-light-font-style:italic;--shiki-dark-font-style:italic;">     * execute subsequent tasks.  The threads in the pool will exist</span></span>\n<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-dark:#7F848E;--shiki-light-font-style:italic;--shiki-dark-font-style:italic;">     * until it is explicitly {@link ExecutorService#shutdown shutdown}.</span></span>\n<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-dark:#7F848E;--shiki-light-font-style:italic;--shiki-dark-font-style:italic;">     *</span></span>\n<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-dark:#7F848E;--shiki-light-font-style:italic;--shiki-dark-font-style:italic;">     * </span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;--shiki-light-font-style:italic;--shiki-dark-font-style:italic;">@param</span><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;--shiki-light-font-style:italic;--shiki-dark-font-style:italic;"> nThreads</span><span style="--shiki-light:#A0A1A7;--shiki-dark:#7F848E;--shiki-light-font-style:italic;--shiki-dark-font-style:italic;"> the number of threads in the pool</span></span>\n<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-dark:#7F848E;--shiki-light-font-style:italic;--shiki-dark-font-style:italic;">     * </span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;--shiki-light-font-style:italic;--shiki-dark-font-style:italic;">@return</span><span style="--shiki-light:#A0A1A7;--shiki-dark:#7F848E;--shiki-light-font-style:italic;--shiki-dark-font-style:italic;"> the newly created thread pool</span></span>\n<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-dark:#7F848E;--shiki-light-font-style:italic;--shiki-dark-font-style:italic;">     * </span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;--shiki-light-font-style:italic;--shiki-dark-font-style:italic;">@throws</span><span style="--shiki-light:#C18401;--shiki-dark:#E5C07B;--shiki-light-font-style:italic;--shiki-dark-font-style:italic;"> IllegalArgumentException</span><span style="--shiki-light:#A0A1A7;--shiki-dark:#7F848E;--shiki-light-font-style:italic;--shiki-dark-font-style:italic;"> if {@code nThreads &lt;= 0}</span></span>\n<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-dark:#7F848E;--shiki-light-font-style:italic;--shiki-dark-font-style:italic;">     */</span></span>\n<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">    public</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;"> static</span><span style="--shiki-light:#C18401;--shiki-dark:#E5C07B;"> ExecutorService</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;"> newFixedThreadPool</span><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;">(</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">int</span><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;"> nThreads) {</span></span>\n<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">        return</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;"> new</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;"> ThreadPoolExecutor</span><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;">(nThreads</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">,</span><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;"> nThreads</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">,</span></span>\n<span class="line"><span style="--shiki-light:#986801;--shiki-dark:#D19A66;">                                      0L</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">,</span><span style="--shiki-light:#E45649;--shiki-dark:#E5C07B;"> TimeUnit</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#E45649;--shiki-dark:#E5C07B;">MILLISECONDS</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">,</span></span>\n<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">                                      new</span><span style="--shiki-light:#C18401;--shiki-dark:#E5C07B;"> LinkedBlockingQueue</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">&lt;</span><span style="--shiki-light:#C18401;--shiki-dark:#E5C07B;">Runnable</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">&gt;</span><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;">())</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">;</span></span>\n<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;">    }</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>我们可以看到线程池的内部，还使用到了<code>LinkedBlockingQueue</code> 链表阻塞队列</p><p>同时在查看<code>Executors.newCacheThreadPool</code> 看到底层用的是 <code>SynchronousBlockingQueue</code>阻塞队列</p><p>最后查看一下，完整的三个创建线程的方法</p><figure><img src="'+p+'" alt="image-20200317183202992" tabindex="0" loading="lazy"><figcaption>image-20200317183202992</figcaption></figure><h2 id="_4、线程池的重要参数" tabindex="-1"><a class="header-anchor" href="#_4、线程池的重要参数"><span>4、线程池的重要参数</span></a></h2><figure><img src="'+d+'" alt="image-20200317183600957" tabindex="0" loading="lazy"><figcaption>image-20200317183600957</figcaption></figure><p>线程池在创建的时候，一共有7大参数</p><ul><li><code>corePoolSize</code>：核心线程数，线程池中的常驻核心线程数 <ul><li>在创建线程池后，当有请求任务来之后，就会安排池中的线程去执行请求任务，近似理解为今日当值线程</li><li>当线程池中的线程数目达到corePoolSize后，就会把到达的队列放到缓存队列中</li></ul></li><li><code>maximumPoolSize</code>：线程池能够容纳同时执行的最大线程数，此值必须大于等于1、 <ul><li>相当有扩容后的线程数，这个线程池能容纳的最多线程数</li></ul></li><li><code>keepAliveTime</code>：多余的空闲线程存活时间 <ul><li>当线程池数量超过corePoolSize时，当空闲时间达到keepAliveTime值时，多余的空闲线程会被销毁，直到只剩下corePoolSize个线程为止</li><li>默认情况下，只有当线程池中的线程数大于corePoolSize时，keepAliveTime才会起作用</li></ul></li><li><code>unit</code>：keepAliveTime的单位</li><li><code>workQueue</code>：任务队列，被提交的但未被执行的任务（类似于银行里面的候客区） <ul><li><code>LinkedBlockingQueue</code>：链表阻塞队列</li><li><code>SynchronousBlockingQueue</code>：同步阻塞队列</li></ul></li><li><code>threadFactory</code>：表示生成线程池中工作线程的线程工厂，用于创建线程池 <code>一般用默认即可</code>。</li><li><code>andler</code>：拒绝策略，表示当队列满了并且工作线程大于线程池的最大线程数（maximumPoolSize）时，如何来拒绝请求执行的Runnable的策略</li></ul><p>当营业窗口和阻塞队列中都满了时候，就需要设置拒绝策略</p><figure><img src="'+r+'" alt="image-20200317201150197" tabindex="0" loading="lazy"><figcaption>image-20200317201150197</figcaption></figure><h2 id="_5、拒绝策略" tabindex="-1"><a class="header-anchor" href="#_5、拒绝策略"><span>5、拒绝策略</span></a></h2><p>以下所有拒绝策略都实现了RejectedExecutionHandler接口</p><ul><li><code>AbortPolicy</code>：默认，直接抛出RejectedExcutionException异常，阻止系统正常运行</li><li><code>DiscardPolicy</code>：直接丢弃任务，不予任何处理也不抛出异常，如果运行任务丢失，这是一种好方案</li><li><code>CallerRunsPolicy</code>：该策略既不会抛弃任务，也不会抛出异常，而是将某些任务回退到调用者</li><li><code>DiscardOldestPolicy</code>：抛弃队列中等待最久的任务，然后把当前任务加入队列中尝试再次提交当前任务</li></ul><h2 id="_6、线程池底层工作原理" tabindex="-1"><a class="header-anchor" href="#_6、线程池底层工作原理"><span>6、线程池底层工作原理</span></a></h2><h3 id="_6-1、线程池运行架构图" tabindex="-1"><a class="header-anchor" href="#_6-1、线程池运行架构图"><span>6.1、线程池运行架构图</span></a></h3><figure><img src="'+h+'" alt="image-20200318154414717" tabindex="0" loading="lazy"><figcaption>image-20200318154414717</figcaption></figure><p>文字说明</p><ol><li><p>在创建了线程池后，等待提交过来的任务请求</p></li><li><p>当调用execute()方法添加一个请求任务时，线程池会做出如下判断</p><ol><li>如果正在运行的线程池数量小于corePoolSize，那么马上创建线程运行这个任务</li><li>如果正在运行的线程数量大于或等于corePoolSize，那么将这个任务放入队列</li><li>如果这时候队列满了，并且正在运行的线程数量还小于maximumPoolSize，那么还是创建非核心线程来运行这个任务；</li><li>如果队列满了并且正在运行的线程数量大于或等于maximumPoolSize，那么线程池会启动饱和拒绝策略来执行</li></ol></li><li><p>当一个线程完成任务时，它会从队列中取下一个任务来执行</p></li><li><p>当一个线程无事可做操作一定的时间(keepAliveTime)时，线程池会判断：</p><ol><li>如果当前运行的线程数大于corePoolSize，那么这个线程就被停掉</li><li>所以线程池的所有任务完成后，它会最终收缩到corePoolSize的大小</li></ol></li></ol><p>以顾客去银行办理业务为例，谈谈线程池的底层工作原理</p><ol><li>最开始假设来了两个顾客，因为corePoolSize为2，因此这两个顾客直接能够去窗口办理</li><li>后面又来了三个顾客，因为corePool已经被顾客占用了，因此只有去候客区，也就是阻塞队列中等待</li><li>后面的人又陆陆续续来了，候客区可能不够用了，因此需要申请增加处理请求的窗口，这里的窗口指的是线程池中的线程数，以此来解决线程不够用的问题</li><li>假设受理窗口已经达到最大数，并且请求数还是不断递增，此时候客区和线程池都已经满了，为了防止大量请求冲垮线程池，已经需要开启拒绝策略</li><li>临时增加的线程会因为超过了最大存活时间，就会销毁，最后从最大数削减到核心数</li></ol><h2 id="_7、为什么不用默认创建的线程池" tabindex="-1"><a class="header-anchor" href="#_7、为什么不用默认创建的线程池"><span>7、为什么不用默认创建的线程池？</span></a></h2><p>线程池创建的方法有：固定数的，单一的，可变的，那么在实际开发中，应该使用哪个？</p><p>我们一个都不用，在生产环境中是使用自己自定义的</p><p>为什么不用 Executors 中JDK提供的？</p><p>根据阿里巴巴手册：并发控制这章</p><ul><li>线程资源必须通过线程池提供，不允许在应用中自行显式创建线程 <ul><li>使用线程池的好处是减少在创建和销毁线程上所消耗的时间以及系统资源的开销，解决资源不足的问题，如果不使用线程池，有可能造成系统创建大量同类线程而导致消耗完内存或者“过度切换”的问题</li></ul></li><li>线程池不允许使用Executors去创建，而是通过 ThreadPoolExecutor 的方式，这样的处理方式让写的同学更加明确线程池的运行规则，规避资源耗尽的风险 <ul><li>Executors返回的线程池对象弊端如下： <ul><li>FixedThreadPool和SingleThreadPool： <ul><li>运行的请求队列长度为：Integer.MAX_VALUE，可能会堆积大量的请求，从而导致OOM</li></ul></li><li>CacheThreadPool和ScheduledThreadPool <ul><li>运行的请求队列长度为：Integer.MAX_VALUE，线程数上限太大导致oom</li></ul></li></ul></li></ul></li></ul><h2 id="_8、手写线程池" tabindex="-1"><a class="header-anchor" href="#_8、手写线程池"><span>8、手写线程池</span></a></h2><div class="hint-container tip"><p class="hint-container-title">提示</p><p>4种拒绝策略</p></div><h3 id="_8-1、采用默认拒绝策略" tabindex="-1"><a class="header-anchor" href="#_8-1、采用默认拒绝策略"><span>8.1、采用默认拒绝策略</span></a></h3><p>从上面我们知道，因为默认的Executors创建的线程池，底层都是使用LinkBlockingQueue作为阻塞队列的，而LinkBlockingQueue虽然是有界的，但是它的界限是 Integer.MAX_VALUE 大概有20多亿，可以相当是无界的了，因此我们要使用ThreadPoolExecutor自己手动创建线程池，然后指定阻塞队列的大小</p><p>下面我们创建了一个 核心线程数为2，最大线程数为5，并且阻塞队列数为3的线程池</p><div class="language- line-numbers-mode" data-highlighter="shiki" data-ext="" data-title="" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span>        // 手写线程池</span></span>\n<span class="line"><span>        final Integer corePoolSize = 2;</span></span>\n<span class="line"><span>        final Integer maximumPoolSize = 5;</span></span>\n<span class="line"><span>        final Long keepAliveTime = 1L;</span></span>\n<span class="line"><span></span></span>\n<span class="line"><span>        // 自定义线程池，只改变了LinkBlockingQueue的队列大小</span></span>\n<span class="line"><span>        ExecutorService executorService = new ThreadPoolExecutor(</span></span>\n<span class="line"><span>                corePoolSize,</span></span>\n<span class="line"><span>                maximumPoolSize,</span></span>\n<span class="line"><span>                keepAliveTime,</span></span>\n<span class="line"><span>                TimeUnit.SECONDS,</span></span>\n<span class="line"><span>                new LinkedBlockingQueue&lt;&gt;(3),</span></span>\n<span class="line"><span>                Executors.defaultThreadFactory(),</span></span>\n<span class="line"><span>                new ThreadPoolExecutor.AbortPolicy());</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>然后使用for循环，模拟10个用户来进行请求</p><div class="language- line-numbers-mode" data-highlighter="shiki" data-ext="" data-title="" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span>      // 模拟10个用户来办理业务，每个用户就是一个来自外部请求线程</span></span>\n<span class="line"><span>        try {</span></span>\n<span class="line"><span></span></span>\n<span class="line"><span>            // 循环十次，模拟业务办理，让5个线程处理这10个请求</span></span>\n<span class="line"><span>            for (int i = 0; i &lt; 10; i++) {</span></span>\n<span class="line"><span>                final int tempInt = i;</span></span>\n<span class="line"><span>                executorService.execute(() -&gt; {</span></span>\n<span class="line"><span>                    System.out.println(Thread.currentThread().getName() + &quot;\\t 给用户:&quot; + tempInt + &quot; 办理业务&quot;);</span></span>\n<span class="line"><span>                });</span></span>\n<span class="line"><span>            }</span></span>\n<span class="line"><span>        } catch (Exception e) {</span></span>\n<span class="line"><span>            e.printStackTrace();</span></span>\n<span class="line"><span>        } finally {</span></span>\n<span class="line"><span>            executorService.shutdown();</span></span>\n<span class="line"><span>        }</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>但是在用户执行到第九个的时候，触发了异常，程序中断</p><div class="language- line-numbers-mode" data-highlighter="shiki" data-ext="" data-title="" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span>pool-1-thread-1\t 给用户:0 办理业务</span></span>\n<span class="line"><span>pool-1-thread-4\t 给用户:6 办理业务</span></span>\n<span class="line"><span>pool-1-thread-3\t 给用户:5 办理业务</span></span>\n<span class="line"><span>pool-1-thread-2\t 给用户:1 办理业务</span></span>\n<span class="line"><span>pool-1-thread-2\t 给用户:4 办理业务</span></span>\n<span class="line"><span>pool-1-thread-5\t 给用户:7 办理业务</span></span>\n<span class="line"><span>pool-1-thread-4\t 给用户:2 办理业务</span></span>\n<span class="line"><span>pool-1-thread-3\t 给用户:3 办理业务</span></span>\n<span class="line"><span>java.util.concurrent.RejectedExecutionException: Task com.moxi.interview.study.thread.MyThreadPoolDemo$$Lambda$1/1747585824@4dd8dc3 rejected from java.util.concurrent.ThreadPoolExecutor@6d03e736[Running, pool size = 5, active threads = 3, queued tasks = 0, completed tasks = 5]</span></span>\n<span class="line"><span>\tat java.util.concurrent.ThreadPoolExecutor$AbortPolicy.rejectedExecution(ThreadPoolExecutor.java:2047)</span></span>\n<span class="line"><span>\tat java.util.concurrent.ThreadPoolExecutor.reject(ThreadPoolExecutor.java:823)</span></span>\n<span class="line"><span>\tat java.util.concurrent.ThreadPoolExecutor.execute(ThreadPoolExecutor.java:1369)</span></span>\n<span class="line"><span>\tat com.moxi.interview.study.thread.MyThreadPoolDemo.main(MyThreadPoolDemo.java:34)</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>这是因为触发了拒绝策略，而我们设置的拒绝策略是默认的AbortPolicy，也就是抛异常的</p><p>触发条件是，请求的线程大于 阻塞队列大小 + 最大线程数 = 8 的时候，也就是说第9个线程来获取线程池中的线程时，就会抛出异常从而报错退出。</p><h3 id="_8-2、采用callerrunspolicy拒绝策略" tabindex="-1"><a class="header-anchor" href="#_8-2、采用callerrunspolicy拒绝策略"><span>8.2、采用CallerRunsPolicy拒绝策略</span></a></h3><p>当我们更好其它的拒绝策略时，采用CallerRunsPolicy拒绝策略，也称为回退策略，就是把任务丢回原来的请求开启线程着，我们看运行结果</p><div class="language- line-numbers-mode" data-highlighter="shiki" data-ext="" data-title="" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span>pool-1-thread-1\t 给用户:0 办理业务</span></span>\n<span class="line"><span>pool-1-thread-5\t 给用户:7 办理业务</span></span>\n<span class="line"><span>pool-1-thread-4\t 给用户:6 办理业务</span></span>\n<span class="line"><span>main\t 给用户:8 办理业务</span></span>\n<span class="line"><span>pool-1-thread-3\t 给用户:5 办理业务</span></span>\n<span class="line"><span>pool-1-thread-2\t 给用户:1 办理业务</span></span>\n<span class="line"><span>pool-1-thread-3\t 给用户:9 办理业务</span></span>\n<span class="line"><span>pool-1-thread-4\t 给用户:4 办理业务</span></span>\n<span class="line"><span>pool-1-thread-5\t 给用户:3 办理业务</span></span>\n<span class="line"><span>pool-1-thread-1\t 给用户:2 办理业务</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>我们发现，输出的结果里面出现了main线程，因为线程池出发了拒绝策略，把任务回退到main线程，然后main线程对任务进行处理</p><h3 id="_8-3、采用-discardpolicy-拒绝策略" tabindex="-1"><a class="header-anchor" href="#_8-3、采用-discardpolicy-拒绝策略"><span>8.3、采用 DiscardPolicy 拒绝策略</span></a></h3><div class="language- line-numbers-mode" data-highlighter="shiki" data-ext="" data-title="" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span>pool-1-thread-1\t 给用户:0 办理业务</span></span>\n<span class="line"><span>pool-1-thread-3\t 给用户:5 办理业务</span></span>\n<span class="line"><span>pool-1-thread-1\t 给用户:2 办理业务</span></span>\n<span class="line"><span>pool-1-thread-2\t 给用户:1 办理业务</span></span>\n<span class="line"><span>pool-1-thread-1\t 给用户:4 办理业务</span></span>\n<span class="line"><span>pool-1-thread-5\t 给用户:7 办理业务</span></span>\n<span class="line"><span>pool-1-thread-4\t 给用户:6 办理业务</span></span>\n<span class="line"><span>pool-1-thread-3\t 给用户:3 办理业务</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>采用DiscardPolicy拒绝策略会，线程池会自动把后面的任务都直接丢弃，也不报异常，当任务无关紧要的时候，可以采用这个方式</p><h3 id="_8-4、采用discardoldestpolicy拒绝策略" tabindex="-1"><a class="header-anchor" href="#_8-4、采用discardoldestpolicy拒绝策略"><span>8.4、采用DiscardOldestPolicy拒绝策略</span></a></h3><div class="language- line-numbers-mode" data-highlighter="shiki" data-ext="" data-title="" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span>pool-1-thread-1\t 给用户:0 办理业务</span></span>\n<span class="line"><span>pool-1-thread-4\t 给用户:6 办理业务</span></span>\n<span class="line"><span>pool-1-thread-1\t 给用户:4 办理业务</span></span>\n<span class="line"><span>pool-1-thread-3\t 给用户:5 办理业务</span></span>\n<span class="line"><span>pool-1-thread-2\t 给用户:1 办理业务</span></span>\n<span class="line"><span>pool-1-thread-1\t 给用户:9 办理业务</span></span>\n<span class="line"><span>pool-1-thread-4\t 给用户:8 办理业务</span></span>\n<span class="line"><span>pool-1-thread-5\t 给用户:7 办理业务</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>这个策略和刚刚差不多，会把最久的队列中的任务替换掉</p><h2 id="_9、线程池的合理参数-重要" tabindex="-1"><a class="header-anchor" href="#_9、线程池的合理参数-重要"><span>9、线程池的合理参数 （重要）</span></a></h2><p>生产环境中如何配置 <code>corePoolSize</code> 和<code> maximumPoolSize</code></p><p>这个是根据具体业务来配置的，分为CPU密集型和IO密集型</p><ul><li>CPU密集型</li></ul><p>CPU密集的意思是该任务需要大量的运算，而没有阻塞，CPU一直全速运行</p><p>CPU密集任务只有在真正的多核CPU上才可能得到加速（通过多线程）</p><p>而在单核CPU上，无论你开几个模拟的多线程该任务都不可能得到加速，因为CPU总的运算能力就那些</p><p>CPU密集型任务配置尽可能少的线程数量：</p><p>一般公式：<code>CPU核数 + 1个线程数</code></p><ul><li>IO密集型</li></ul><p>由于IO密集型任务线程并不是一直在执行任务，则可能多的线程，如 CPU核数 * 2</p><p>IO密集型，即该任务需要大量的IO操作，即大量的阻塞</p><p>在单线程上运行IO密集型的任务会导致浪费大量的CPU运算能力花费在等待上</p><p>所以IO密集型任务中使用多线程可以大大的加速程序的运行，即使在单核CPU上，这种加速主要就是利用了被浪费掉的阻塞时间。</p><p>IO密集时，大部分线程都被阻塞，故需要多配置线程数：</p><p>参考公式：<code>CPU核数 / (1 - 阻塞系数) </code> 阻塞系数在0.8 ~ 0.9左右</p><p>例如：<code>8核CPU：8/ (1 - 0.9) = 80个线程数</code></p><ul><li>Runtime.getRuntime().availableProcessors()/(1 - 0.9)</li></ul><h2 id="_10、工作中的使用" tabindex="-1"><a class="header-anchor" href="#_10、工作中的使用"><span>10、工作中的使用</span></a></h2><p>https://blog.csdn.net/PurineKing/article/details/128776030</p><p>1、新建一个WszzThreadPoolConfig类：</p><div class="language-java line-numbers-mode" data-highlighter="shiki" data-ext="java" data-title="java" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">@</span><span style="--shiki-light:#A626A4;--shiki-dark:#E5C07B;">Configuration</span></span>\n<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">@</span><span style="--shiki-light:#A626A4;--shiki-dark:#E5C07B;">Slf4j</span></span>\n<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">public</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;"> class</span><span style="--shiki-light:#C18401;--shiki-dark:#E5C07B;"> WszzThreadPoolConfig</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> {</span></span>\n<span class="line"></span>\n<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-dark:#7F848E;--shiki-light-font-style:italic;--shiki-dark-font-style:italic;">    /**</span></span>\n<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-dark:#7F848E;--shiki-light-font-style:italic;--shiki-dark-font-style:italic;">     * 做成配置，便于现场实际调整   8核CPU：8/ (1 - 0.9) = 80个线程数    </span></span>\n<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-dark:#7F848E;--shiki-light-font-style:italic;--shiki-dark-font-style:italic;">     * Runtime.getRuntime().availableProcessors()  *  （10~20之间）</span></span>\n<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-dark:#7F848E;--shiki-light-font-style:italic;--shiki-dark-font-style:italic;">    */</span></span>\n<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;">      </span></span>\n<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">    @</span><span style="--shiki-light:#A626A4;--shiki-dark:#E5C07B;">Value</span><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;">(</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">&quot;${threadPool.multiple:10}&quot;</span><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;">)</span></span>\n<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">    private</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;"> int</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;"> multiple</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">;</span></span>\n<span class="line"></span>\n<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">    private</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;"> static</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;"> final</span><span style="--shiki-light:#C18401;--shiki-dark:#E5C07B;"> AtomicInteger</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;"> ATOMIC_INTEGER </span><span style="--shiki-light:#383A42;--shiki-dark:#56B6C2;">=</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;"> new</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;"> AtomicInteger</span><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;">(</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;">1</span><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;">)</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">;</span></span>\n<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">    private</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;"> static</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;"> final</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;"> int</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;"> KEEPALLIVETIME </span><span style="--shiki-light:#383A42;--shiki-dark:#56B6C2;">=</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;"> 60</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">;</span></span>\n<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">    private</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;"> static</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;"> final</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;"> int</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;"> QUEUE_CAPACITY </span><span style="--shiki-light:#383A42;--shiki-dark:#56B6C2;">=</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;"> 1000</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">;</span></span>\n<span class="line"></span>\n<span class="line"></span>\n<span class="line"></span>\n<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-dark:#7F848E;--shiki-light-font-style:italic;--shiki-dark-font-style:italic;">    /**</span></span>\n<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-dark:#7F848E;--shiki-light-font-style:italic;--shiki-dark-font-style:italic;">     *</span></span>\n<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-dark:#7F848E;--shiki-light-font-style:italic;--shiki-dark-font-style:italic;">     * WszzThreadPoolConfig</span></span>\n<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-dark:#7F848E;--shiki-light-font-style:italic;--shiki-dark-font-style:italic;">     *</span></span>\n<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-dark:#7F848E;--shiki-light-font-style:italic;--shiki-dark-font-style:italic;">     * @description 批量生成线程池</span></span>\n<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-dark:#7F848E;--shiki-light-font-style:italic;--shiki-dark-font-style:italic;">     * 创建文书制作线程池：使用TtlExecutors可以使用AuthContextHolder信息</span></span>\n<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-dark:#7F848E;--shiki-light-font-style:italic;--shiki-dark-font-style:italic;">     * &lt;p&gt;阿里开源的线程间上下文传递解决方案&lt;/p&gt;</span></span>\n<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-dark:#7F848E;--shiki-light-font-style:italic;--shiki-dark-font-style:italic;">     * </span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;--shiki-light-font-style:italic;--shiki-dark-font-style:italic;">@return</span><span style="--shiki-light:#A0A1A7;--shiki-dark:#7F848E;--shiki-light-font-style:italic;--shiki-dark-font-style:italic;"> java.util.concurrent.ExecutorService</span></span>\n<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-dark:#7F848E;--shiki-light-font-style:italic;--shiki-dark-font-style:italic;">     * @date 2022/12/9 17:41</span></span>\n<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-dark:#7F848E;--shiki-light-font-style:italic;--shiki-dark-font-style:italic;">     * </span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;--shiki-light-font-style:italic;--shiki-dark-font-style:italic;">@author</span><span style="--shiki-light:#A0A1A7;--shiki-dark:#7F848E;--shiki-light-font-style:italic;--shiki-dark-font-style:italic;"> jiangyunfei</span></span>\n<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-dark:#7F848E;--shiki-light-font-style:italic;--shiki-dark-font-style:italic;">     * </span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;--shiki-light-font-style:italic;--shiki-dark-font-style:italic;">@version</span><span style="--shiki-light:#A0A1A7;--shiki-dark:#7F848E;--shiki-light-font-style:italic;--shiki-dark-font-style:italic;"> 1.0</span></span>\n<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-dark:#7F848E;--shiki-light-font-style:italic;--shiki-dark-font-style:italic;">     */</span></span>\n<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">    @</span><span style="--shiki-light:#A626A4;--shiki-dark:#E5C07B;">Bean</span><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;">(</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">&quot;wszzExecutorService&quot;</span><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;">)</span></span>\n<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">    public</span><span style="--shiki-light:#C18401;--shiki-dark:#E5C07B;"> ExecutorService</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;"> wszzBatchExecutorService</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">()</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> {</span></span>\n<span class="line"><span style="--shiki-light:#E45649;--shiki-dark:#E5C07B;">        log</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">info</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">&quot;multiple变量值为：&quot;</span><span style="--shiki-light:#383A42;--shiki-dark:#56B6C2;"> +</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> multiple);</span></span>\n<span class="line"><span style="--shiki-light:#E45649;--shiki-dark:#E5C07B;">        log</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">info</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">&quot;获取的是cpu核心线程数（计算资源）：&quot;</span><span style="--shiki-light:#383A42;--shiki-dark:#56B6C2;"> +</span><span style="--shiki-light:#E45649;--shiki-dark:#E5C07B;"> Runtime</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">getRuntime</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">().</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">availableProcessors</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">());</span></span>\n<span class="line"><span style="--shiki-light:#E45649;--shiki-dark:#E5C07B;">        log</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">info</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">&quot;核心线程数大小为：&quot;</span><span style="--shiki-light:#383A42;--shiki-dark:#56B6C2;"> +</span><span style="--shiki-light:#E45649;--shiki-dark:#E5C07B;"> Runtime</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">getRuntime</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">().</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">availableProcessors</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">() </span><span style="--shiki-light:#383A42;--shiki-dark:#56B6C2;">*</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> multiple);</span></span>\n<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">        return</span><span style="--shiki-light:#E45649;--shiki-dark:#E5C07B;"> TtlExecutors</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">getTtlExecutorService</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(</span></span>\n<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">                new</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;"> ThreadPoolExecutor</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(</span></span>\n<span class="line"><span style="--shiki-light:#E45649;--shiki-dark:#E5C07B;">                Runtime</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">getRuntime</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">().</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">availableProcessors</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">() </span><span style="--shiki-light:#383A42;--shiki-dark:#56B6C2;">*</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> multiple,</span></span>\n<span class="line"><span style="--shiki-light:#E45649;--shiki-dark:#E5C07B;">                Runtime</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">getRuntime</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">().</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">availableProcessors</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">() </span><span style="--shiki-light:#383A42;--shiki-dark:#56B6C2;">*</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> multiple,</span></span>\n<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">                KEEPALLIVETIME,</span></span>\n<span class="line"><span style="--shiki-light:#E45649;--shiki-dark:#E5C07B;">                TimeUnit</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#E45649;--shiki-dark:#E5C07B;">SECONDS</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">,</span></span>\n<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">                new</span><span style="--shiki-light:#C18401;--shiki-dark:#E5C07B;"> ArrayBlockingQueue</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">&lt;&gt;(QUEUE_CAPACITY),</span></span>\n<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">                r </span><span style="--shiki-light:#C18401;--shiki-dark:#C678DD;">-&gt;</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;"> new</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;"> Thread</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(r, </span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">&quot;Thread-Batch-&quot;</span><span style="--shiki-light:#383A42;--shiki-dark:#56B6C2;"> +</span><span style="--shiki-light:#E45649;--shiki-dark:#E5C07B;"> ATOMIC_INTEGER</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">getAndIncrement</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">()),</span></span>\n<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">                new</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> ThreadPoolExecutor.</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">CallerRunsPolicy</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">()));</span></span>\n<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">    }</span></span>\n<span class="line"></span>\n<span class="line"></span>\n<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">}</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>说明：<br> 1、核心就是创建ThreadPoolExecutor。</p><p>2、 @Bean(&quot;wszzExecutorService&quot;)，该配置类可以管理一个或多个线程池的配置类，交给spring管理.</p><div class="language- line-numbers-mode" data-highlighter="shiki" data-ext="" data-title="" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span>Spring的@Bean注解用于告诉方法，产生一个Bean对象，然后这个Bean对象交给Spring管理。 </span></span>\n<span class="line"><span>产生这个Bean对象的方法Spring只会调用一次，随后这个Spring将会将这个Bean对象放在自己的IOC容器中。</span></span>\n<span class="line"><span>@Bean明确地指示了一种方法:产生一个bean的方法，并且交给Spring容器管理；从这我们就明白了为啥@Bean是放在方法的注释上了，因为它很明确地告诉被注释的方法，你给我产生一个Bean，然后交给Spring容器，剩下的你就别管了。</span></span>\n<span class="line"><span></span></span>\n<span class="line"><span>记住，@Bean就放在方法上，就是让方法去产生一个Bean，然后交给Spring容器。</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>使用方法：</p><ul><li><p>使用方式</p></li><li><p>@Resource(name = &quot;wszzExecutorService&quot;)</p></li><li><p>private ExecutorService wszzExecutorService;</p></li><li><p>在spring实例方法上使用：@Async(&quot;wszzExecutorService&quot;)</p></li></ul><div class="language- line-numbers-mode" data-highlighter="shiki" data-ext="" data-title="" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span>@Resource(name = &quot;wszzExecutorService&quot;)</span></span>\n<span class="line"><span>private ExecutorService wszzExecutorService;</span></span>\n<span class="line"><span></span></span>\n<span class="line"><span></span></span>\n<span class="line"><span>Future&lt;Object&gt; submit = wszzExecutorService.submit(() -&gt; {somthing});</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>3、TtlExecutors.getTtlExecutorService(new ThreadPoolExecutor()) ，根据具体场景使用。 使用 TtlExecutors包一下，能够实现了线程池中的父子线程的数据传递。 也就是创建线程池时，使用TtlExecutors可以使用AuthContextHolder信息， 此为阿里开源的线程间上下文传递解决方案。</p><div class="language-xml line-numbers-mode" data-highlighter="shiki" data-ext="xml" data-title="xml" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">&lt;</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">dependency</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">&gt;</span></span>\n<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">    &lt;</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">groupId</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">&gt;com.alibaba&lt;/</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">groupId</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">&gt;</span></span>\n<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">    &lt;</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">artifactId</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">&gt;transmittable-thread-local&lt;/</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">artifactId</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">&gt;</span></span>\n<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">    &lt;</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">version</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">&gt;2.12.1&lt;/</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">version</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">&gt;</span></span>\n<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">&lt;/</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">dependency</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">&gt;</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>参考： https://www.jianshu.com/p/3befae31a471</p>',149)],k={},o=(0,a(66262).A)(k,[["render",function(s,i){return(0,n.uX)(),(0,n.CE)("div",null,c)}]]),u=JSON.parse('{"path":"/study-notes/shangguigu-second/ThreadPool/","title":"9、线程池（Java中有哪些方法获取多线程）","lang":"zh-CN","frontmatter":{"title":"9、线程池（Java中有哪些方法获取多线程）","date":"2023-04-19T00:00:00.000Z","category":"线程池","tag":["线程池"],"description":"1、前言 获取多线程的方法，我们都知道有三种，还有一种是实现Callable接口 实例化Thread类 实现Runnable接口 实现Callable接口 使用线程池获取 1.1、Callable接口 Callable接口，是一种让线程执行完成后，能够返回结果的 在说到Callable接口的时候，我们不得不提到Runnable接口 我们知道，实现Run...","head":[["meta",{"property":"og:url","content":"https://mister-hope.github.io/study-notes/shangguigu-second/ThreadPool/"}],["meta",{"property":"og:site_name","content":"博客演示"}],["meta",{"property":"og:title","content":"9、线程池（Java中有哪些方法获取多线程）"}],["meta",{"property":"og:description","content":"1、前言 获取多线程的方法，我们都知道有三种，还有一种是实现Callable接口 实例化Thread类 实现Runnable接口 实现Callable接口 使用线程池获取 1.1、Callable接口 Callable接口，是一种让线程执行完成后，能够返回结果的 在说到Callable接口的时候，我们不得不提到Runnable接口 我们知道，实现Run..."}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:locale","content":"zh-CN"}],["meta",{"property":"og:updated_time","content":"2024-07-27T14:05:04.000Z"}],["meta",{"property":"article:author","content":"樱宁"}],["meta",{"property":"article:tag","content":"线程池"}],["meta",{"property":"article:published_time","content":"2023-04-19T00:00:00.000Z"}],["meta",{"property":"article:modified_time","content":"2024-07-27T14:05:04.000Z"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"9、线程池（Java中有哪些方法获取多线程）\\",\\"image\\":[\\"\\"],\\"datePublished\\":\\"2023-04-19T00:00:00.000Z\\",\\"dateModified\\":\\"2024-07-27T14:05:04.000Z\\",\\"author\\":[{\\"@type\\":\\"Person\\",\\"name\\":\\"樱宁\\",\\"url\\":\\"https://mister-hope.com\\"}]}"]]},"headers":[{"level":2,"title":"1、前言","slug":"_1、前言","link":"#_1、前言","children":[{"level":3,"title":"1.1、Callable接口","slug":"_1-1、callable接口","link":"#_1-1、callable接口","children":[]},{"level":3,"title":"1.2、注意","slug":"_1-2、注意","link":"#_1-2、注意","children":[]}]},{"level":2,"title":"2、ThreadPoolExecutor(线程池)","slug":"_2、threadpoolexecutor-线程池","link":"#_2、threadpoolexecutor-线程池","children":[{"level":3,"title":"2.1、为什么用线程池","slug":"_2-1、为什么用线程池","link":"#_2-1、为什么用线程池","children":[]},{"level":3,"title":"2.2、线程池的好处","slug":"_2-2、线程池的好处","link":"#_2-2、线程池的好处","children":[]},{"level":3,"title":"2.3、架构说明","slug":"_2-3、架构说明","link":"#_2-3、架构说明","children":[]},{"level":3,"title":"2.4、创建线程池","slug":"_2-4、创建线程池","link":"#_2-4、创建线程池","children":[]},{"level":3,"title":"2.5、创建周期性执行任务的线程池","slug":"_2-5、创建周期性执行任务的线程池","link":"#_2-5、创建周期性执行任务的线程池","children":[]}]},{"level":2,"title":"3、底层实现","slug":"_3、底层实现","link":"#_3、底层实现","children":[]},{"level":2,"title":"4、线程池的重要参数","slug":"_4、线程池的重要参数","link":"#_4、线程池的重要参数","children":[]},{"level":2,"title":"5、拒绝策略","slug":"_5、拒绝策略","link":"#_5、拒绝策略","children":[]},{"level":2,"title":"6、线程池底层工作原理","slug":"_6、线程池底层工作原理","link":"#_6、线程池底层工作原理","children":[{"level":3,"title":"6.1、线程池运行架构图","slug":"_6-1、线程池运行架构图","link":"#_6-1、线程池运行架构图","children":[]}]},{"level":2,"title":"7、为什么不用默认创建的线程池？","slug":"_7、为什么不用默认创建的线程池","link":"#_7、为什么不用默认创建的线程池","children":[]},{"level":2,"title":"8、手写线程池","slug":"_8、手写线程池","link":"#_8、手写线程池","children":[{"level":3,"title":"8.1、采用默认拒绝策略","slug":"_8-1、采用默认拒绝策略","link":"#_8-1、采用默认拒绝策略","children":[]},{"level":3,"title":"8.2、采用CallerRunsPolicy拒绝策略","slug":"_8-2、采用callerrunspolicy拒绝策略","link":"#_8-2、采用callerrunspolicy拒绝策略","children":[]},{"level":3,"title":"8.3、采用 DiscardPolicy 拒绝策略","slug":"_8-3、采用-discardpolicy-拒绝策略","link":"#_8-3、采用-discardpolicy-拒绝策略","children":[]},{"level":3,"title":"8.4、采用DiscardOldestPolicy拒绝策略","slug":"_8-4、采用discardoldestpolicy拒绝策略","link":"#_8-4、采用discardoldestpolicy拒绝策略","children":[]}]},{"level":2,"title":"9、线程池的合理参数 （重要）","slug":"_9、线程池的合理参数-重要","link":"#_9、线程池的合理参数-重要","children":[]},{"level":2,"title":"10、工作中的使用","slug":"_10、工作中的使用","link":"#_10、工作中的使用","children":[]}],"git":{"createdTime":1722089104000,"updatedTime":1722089104000,"contributors":[{"name":"jiang","email":"948742327@qq.com","commits":1}]},"readingTime":{"minutes":19.96,"words":5989},"filePathRelative":"study-notes/shangguigu-second/ThreadPool/README.md","localizedDate":"2023年4月19日","excerpt":"<h2>1、前言</h2>\\n<p>获取多线程的方法，我们都知道有三种，还有一种是实现Callable接口</p>\\n<ul>\\n<li>实例化Thread类</li>\\n<li>实现Runnable接口</li>\\n<li>实现Callable接口</li>\\n<li>使用线程池获取</li>\\n</ul>\\n<h3>1.1、Callable接口</h3>\\n<p>Callable接口，是一种让线程执行完成后，能够返回结果的</p>\\n<p>在说到Callable接口的时候，我们不得不提到Runnable接口</p>\\n<div class=\\"language- line-numbers-mode\\" data-highlighter=\\"shiki\\" data-ext=\\"\\" data-title=\\"\\" style=\\"--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34\\"><pre class=\\"shiki shiki-themes one-light one-dark-pro vp-code\\"><code><span class=\\"line\\"><span>/**</span></span>\\n<span class=\\"line\\"><span> * 实现Runnable接口</span></span>\\n<span class=\\"line\\"><span> */</span></span>\\n<span class=\\"line\\"><span>class MyThread implements Runnable {</span></span>\\n<span class=\\"line\\"><span></span></span>\\n<span class=\\"line\\"><span>    @Override</span></span>\\n<span class=\\"line\\"><span>    public void run() {</span></span>\\n<span class=\\"line\\"><span></span></span>\\n<span class=\\"line\\"><span>    }</span></span>\\n<span class=\\"line\\"><span>}</span></span></code></pre>\\n<div class=\\"line-numbers\\" aria-hidden=\\"true\\" style=\\"counter-reset:line-number 0\\"><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div></div></div>","autoDesc":true}')}}]);