"use strict";(self.webpackChunkblogs2=self.webpackChunkblogs2||[]).push([[3158],{66262:(i,a)=>{a.A=(i,a)=>{const e=i.__vccOpts||i;for(const[i,s]of a)e[i]=s;return e}},84189:(i,a,e)=>{e.r(a),e.d(a,{comp:()=>t,data:()=>h});var s=e(20641);const l=[(0,s.Fv)('<h2 id="概念" tabindex="-1"><a class="header-anchor" href="#概念"><span>概念</span></a></h2><p>这次我们主要关注的是黄色部分，内存的分配与回收</p><figure><img src="data:image/png;base64," alt="image-20200712084539884" tabindex="0" loading="lazy"><figcaption>image-20200712084539884</figcaption></figure><h2 id="什么是垃圾" tabindex="-1"><a class="header-anchor" href="#什么是垃圾"><span>什么是垃圾</span></a></h2><p>在提到什么是垃圾之前，我们先看下面一张图</p><figure><img src="data:image/png;base64," alt="image-20200712085456113" tabindex="0" loading="lazy"><figcaption>image-20200712085456113</figcaption></figure><p>从上图我们可以很明确的知道，Java 和 C++语言的区别，就在于垃圾收集技术和内存动态分配上，C语言没有垃圾收集技术，需要我们手动的收集。</p><p>垃圾收集，不是Java语言的伴生产物。早在1960年，第一门开始使用内存动态分配和垃圾收集技术的Lisp语言诞生。 关于垃圾收集有三个经典问题：</p><ul><li>哪些内存需要回收？</li><li>什么时候回收？</li><li>如何回收？</li></ul><p>垃圾收集机制是Java的招牌能力，极大地提高了开发效率。如今，垃圾收集几乎成为现代语言的标配，即使经过如此长时间的发展，Java的垃圾收集机制仍然在不断的演进中，不同大小的设备、不同特征的应用场景，对垃圾收集提出了新的挑战，这当然也是面试的热点。</p><h3 id="什么是垃圾-1" tabindex="-1"><a class="header-anchor" href="#什么是垃圾-1"><span>什么是垃圾？</span></a></h3><p>垃圾是指在运行程序中没有任何指针指向的对象，这个对象就是需要被回收的垃圾。</p><p>如果不及时对内存中的垃圾进行清理，那么，这些垃圾对象所占的内存空间会一直保留到应用程序的结束，被保留的空间无法被其它对象使用，甚至可能导致内存溢出。</p><h3 id="磁盘碎片整理" tabindex="-1"><a class="header-anchor" href="#磁盘碎片整理"><span>磁盘碎片整理</span></a></h3><p>机械硬盘需要进行磁盘整理，同时还有坏道</p><figure><img src="data:image/png;base64," alt="image-20200712090848669" tabindex="0" loading="lazy"><figcaption>image-20200712090848669</figcaption></figure><h3 id="大厂面试题" tabindex="-1"><a class="header-anchor" href="#大厂面试题"><span>大厂面试题</span></a></h3><h4 id="蚂蚁金服" tabindex="-1"><a class="header-anchor" href="#蚂蚁金服"><span>蚂蚁金服</span></a></h4><ul><li>你知道哪几种垃圾回收器，各自的优缺点，重点讲一下cms和G1？</li><li>JVM GC算法有哪些，目前的JDK版本采用什么回收算法？</li><li>G1回收器讲下回收过程GC是什么？为什么要有GC？</li><li>GC的两种判定方法？CMS收集器与G1收集器的特点</li></ul><h4 id="百度" tabindex="-1"><a class="header-anchor" href="#百度"><span>百度</span></a></h4><ul><li>说一下GC算法，分代回收说下</li><li>垃圾收集策略和算法</li></ul><h4 id="天猫" tabindex="-1"><a class="header-anchor" href="#天猫"><span>天猫</span></a></h4><ul><li>JVM GC原理，JVM怎么回收内存</li><li>CMS特点，垃圾回收算法有哪些？各自的优缺点，他们共同的缺点是什么？</li></ul><h4 id="滴滴" tabindex="-1"><a class="header-anchor" href="#滴滴"><span>滴滴</span></a></h4><p>Java的垃圾回收器都有哪些，说下g1的应用场景，平时你是如何搭配使用垃圾回收器的</p><h4 id="京东" tabindex="-1"><a class="header-anchor" href="#京东"><span>京东</span></a></h4><ul><li>你知道哪几种垃圾收集器，各自的优缺点，重点讲下cms和G1，</li><li>包括原理，流程，优缺点。垃圾回收算法的实现原理</li></ul><h4 id="阿里" tabindex="-1"><a class="header-anchor" href="#阿里"><span>阿里</span></a></h4><ul><li>讲一讲垃圾回收算法。</li><li>什么情况下触发垃圾回收？</li><li>如何选择合适的垃圾收集算法？</li><li>JVM有哪三种垃圾回收器？</li></ul><h4 id="字节跳动" tabindex="-1"><a class="header-anchor" href="#字节跳动"><span>字节跳动</span></a></h4><ul><li>常见的垃圾回收器算法有哪些，各有什么优劣？</li><li>System.gc（）和Runtime.gc（）会做什么事情？</li><li>Java GC机制？GC Roots有哪些？</li><li>Java对象的回收方式，回收算法。</li><li>CMS和G1了解么，CMS解决什么问题，说一下回收的过程。</li><li>CMS回收停顿了几次，为什么要停顿两次?</li></ul><h2 id="为什么需要gc" tabindex="-1"><a class="header-anchor" href="#为什么需要gc"><span>为什么需要GC</span></a></h2><p>对于高级语言来说，一个基本认知是如果不进行垃圾回收，内存迟早都会被消耗完，因为不断地分配内存空间而不进行回收，就好像不停地生产生活垃圾而从来不打扫一样。</p><p>除了释放没用的对象，垃圾回收也可以清除内存里的记录碎片。碎片整理将所占用的堆内存移到堆的一端，以便JVM将整理出的内存分配给新的对象。</p><p>随着应用程序所应付的业务越来越庞大、复杂，用户越来越多，没有GC就不能保证应用程序的正常进行。而经常造成STW的GC又跟不上实际的需求，所以才会不断地尝试对GC进行优化。</p><h2 id="早期垃圾回收" tabindex="-1"><a class="header-anchor" href="#早期垃圾回收"><span>早期垃圾回收</span></a></h2><p>在早期的C/C++时代，垃圾回收基本上是手工进行的。开发人员可以使用new关键字进行内存申请，并使用delete关键字进行内存释放。比如以下代码：</p><div class="language-c++ line-numbers-mode" data-highlighter="shiki" data-ext="c++" data-title="c++" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">MibBridge </span><span style="--shiki-light:#A626A4;--shiki-dark:#56B6C2;">*</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">pBridge</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">=</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;"> new</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> cmBaseGroupBridge（）；</span></span>\n<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-dark:#7F848E;--shiki-light-font-style:italic;--shiki-dark-font-style:italic;">//如果注册失败，使用Delete释放该对象所占内存区域</span></span>\n<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">if</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">（</span><span style="--shiki-light:#E45649;--shiki-dark:#E5C07B;">pBridge</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">-&gt;</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">Register</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">（kDestroy）！</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">=</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">NO ERROR）</span></span>\n<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">\tdelete</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> pBridge；</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>这种方式可以灵活控制内存释放的时间，但是会给开发人员带来频繁申请和释放内存的管理负担。倘若有一处内存区间由于程序员编码的问题忘记被回收，那么就会产生内存泄漏，垃圾对象永远无法被清除，随着系统运行时间的不断增长，垃圾对象所耗内存可能持续上升，直到出现内存溢出并造成应用程序崩溃。</p><p>有了垃圾回收机制后，上述代码极有可能变成这样</p><div class="language-c++ line-numbers-mode" data-highlighter="shiki" data-ext="c++" data-title="c++" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">MibBridge </span><span style="--shiki-light:#A626A4;--shiki-dark:#56B6C2;">*</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">pBridge</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">=new</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;"> cmBaseGroupBridge</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(); </span></span>\n<span class="line"><span style="--shiki-light:#E45649;--shiki-dark:#E5C07B;">pBridge</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">-&gt;</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">Register</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(kDestroy);</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div></div></div><p>现在，除了Java以外，C#、Python、Ruby等语言都使用了自动垃圾回收的思想，也是未来发展趋势，可以说这种自动化的内存分配和来及回收方式已经成为了线代开发语言必备的标准。</p><h2 id="java垃圾回收机制" tabindex="-1"><a class="header-anchor" href="#java垃圾回收机制"><span>Java垃圾回收机制</span></a></h2><h3 id="优点" tabindex="-1"><a class="header-anchor" href="#优点"><span>优点</span></a></h3><p>自动内存管理，无需开发人员手动参与内存的分配与回收，这样降低内存泄漏和内存溢出的风险</p><p>没有垃圾回收器，java也会和cpp一样，各种悬垂指针，野指针，泄露问题让你头疼不已。</p><p>自动内存管理机制，将程序员从繁重的内存管理中释放出来，可以更专心地专注于业务开发</p><p>oracle官网关于垃圾回收的介绍 https://docs.oracle.com/javase/8/docs/technotes/guides/vm/gctuning/toc.html</p><h3 id="担忧" tabindex="-1"><a class="header-anchor" href="#担忧"><span>担忧</span></a></h3><p>对于Java开发人员而言，自动内存管理就像是一个黑匣子，如果过度依赖于“自动”，那么这将会是一场灾难，最严重的就会弱化Java开发人员在程序出现内存溢出时定位问题和解决问题的能力。</p><p>此时，了解JVM的自动内存分配和内存回收原理就显得非常重要，只有在真正了解JVM是如何管理内存后，我们才能够在遇见outofMemoryError时，快速地根据错误异常日志定位问题和解决问题。</p><p>当需要排查各种内存溢出、内存泄漏问题时，当垃圾收集成为系统达到更高并发量的瓶颈时，我们就必须对这些“自动化”的技术实施必要的监控和调节。</p><h3 id="gc主要关注的区域" tabindex="-1"><a class="header-anchor" href="#gc主要关注的区域"><span>GC主要关注的区域</span></a></h3><p>GC主要关注于 方法区 和堆中的垃圾收集</p><figure><img src="data:image/png;base64," alt="image-20200712092427246" tabindex="0" loading="lazy"><figcaption>image-20200712092427246</figcaption></figure><p>垃圾收集器可以对年轻代回收，也可以对老年代回收，甚至是全栈和方法区的回收</p><ul><li>其中，Java堆是垃圾收集器的工作重点</li></ul><p>从次数上讲：</p><ul><li>频繁收集Young区</li><li>较少收集Old区</li><li>基本不收集Perm区（元空间）</li></ul>',59)],n={},t=(0,e(66262).A)(n,[["render",function(i,a){return(0,s.uX)(),(0,s.CE)("div",null,l)}]]),h=JSON.parse('{"path":"/study-notes/JVM/Memory-GC/GC-Overview/","title":"垃圾回收概述","lang":"zh-CN","frontmatter":{"title":"垃圾回收概述","date":"2023-03-18T00:00:00.000Z","description":"概念 这次我们主要关注的是黄色部分，内存的分配与回收 image-20200712084539884image-20200712084539884 什么是垃圾 在提到什么是垃圾之前，我们先看下面一张图 image-20200712085456113image-20200712085456113 从上图我们可以很明确的知道，Java 和 C++语言的区别...","head":[["meta",{"property":"og:url","content":"https://mister-hope.github.io/blog/study-notes/JVM/Memory-GC/GC-Overview/"}],["meta",{"property":"og:site_name","content":"撄宁的博客"}],["meta",{"property":"og:title","content":"垃圾回收概述"}],["meta",{"property":"og:description","content":"概念 这次我们主要关注的是黄色部分，内存的分配与回收 image-20200712084539884image-20200712084539884 什么是垃圾 在提到什么是垃圾之前，我们先看下面一张图 image-20200712085456113image-20200712085456113 从上图我们可以很明确的知道，Java 和 C++语言的区别..."}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:locale","content":"zh-CN"}],["meta",{"property":"og:updated_time","content":"2024-08-11T14:34:32.000Z"}],["meta",{"property":"article:author","content":"樱宁"}],["meta",{"property":"article:published_time","content":"2023-03-18T00:00:00.000Z"}],["meta",{"property":"article:modified_time","content":"2024-08-11T14:34:32.000Z"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"垃圾回收概述\\",\\"image\\":[\\"\\"],\\"datePublished\\":\\"2023-03-18T00:00:00.000Z\\",\\"dateModified\\":\\"2024-08-11T14:34:32.000Z\\",\\"author\\":[{\\"@type\\":\\"Person\\",\\"name\\":\\"樱宁\\",\\"url\\":\\"https://mister-hope.com\\"}]}"]]},"headers":[{"level":2,"title":"概念","slug":"概念","link":"#概念","children":[]},{"level":2,"title":"什么是垃圾","slug":"什么是垃圾","link":"#什么是垃圾","children":[{"level":3,"title":"什么是垃圾？","slug":"什么是垃圾-1","link":"#什么是垃圾-1","children":[]},{"level":3,"title":"磁盘碎片整理","slug":"磁盘碎片整理","link":"#磁盘碎片整理","children":[]},{"level":3,"title":"大厂面试题","slug":"大厂面试题","link":"#大厂面试题","children":[]}]},{"level":2,"title":"为什么需要GC","slug":"为什么需要gc","link":"#为什么需要gc","children":[]},{"level":2,"title":"早期垃圾回收","slug":"早期垃圾回收","link":"#早期垃圾回收","children":[]},{"level":2,"title":"Java垃圾回收机制","slug":"java垃圾回收机制","link":"#java垃圾回收机制","children":[{"level":3,"title":"优点","slug":"优点","link":"#优点","children":[]},{"level":3,"title":"担忧","slug":"担忧","link":"#担忧","children":[]},{"level":3,"title":"GC主要关注的区域","slug":"gc主要关注的区域","link":"#gc主要关注的区域","children":[]}]}],"git":{"createdTime":1723381883000,"updatedTime":1723386872000,"contributors":[{"name":"jiang","email":"948742327@qq.com","commits":3}]},"readingTime":{"minutes":6.04,"words":1811},"filePathRelative":"study-notes/JVM/Memory-GC/GC-Overview/README.md","localizedDate":"2023年3月18日","excerpt":"<h2>概念</h2>\\n<p>这次我们主要关注的是黄色部分，内存的分配与回收</p>\\n<figure><figcaption>image-20200712084539884</figcaption></figure>\\n<h2>什么是垃圾</h2>\\n<p>在提到什么是垃圾之前，我们先看下面一张图</p>\\n<figure><figcaption>image-20200712085456113</figcaption></figure>\\n<p>从上图我们可以很明确的知道，Java 和 C++语言的区别，就在于垃圾收集技术和内存动态分配上，C语言没有垃圾收集技术，需要我们手动的收集。</p>\\n<p>垃圾收集，不是Java语言的伴生产物。早在1960年，第一门开始使用内存动态分配和垃圾收集技术的Lisp语言诞生。\\n关于垃圾收集有三个经典问题：</p>","autoDesc":true}')}}]);