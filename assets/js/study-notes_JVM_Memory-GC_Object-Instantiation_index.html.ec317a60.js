"use strict";(self.webpackChunkblogs2=self.webpackChunkblogs2||[]).push([[9931],{66262:(e,a)=>{a.A=(e,a)=>{const i=e.__vccOpts||e;for(const[e,n]of a)i[e]=n;return i}},3860:(e,a,i)=>{i.r(a),i.d(a,{comp:()=>d,data:()=>g});var n=i(20641);const l=i.p+"assets/img/image-20200709095356247.7b1f3b58.png",t=i.p+"assets/img/image-20200709151033237.1414b42b.png",s=i.p+"assets/img/image-20200709152801713.92dd51a6.png",r=i.p+"assets/img/image-20200709164149920.0f286917.png",p=i.p+"assets/img/image-20200709164342002.258cd942.png",h=i.p+"assets/img/image-20200709164350466.a32d2570.png",c=[(0,n.Fv)('<h2 id="对象实例化" tabindex="-1"><a class="header-anchor" href="#对象实例化"><span>对象实例化</span></a></h2><h3 id="面试题" tabindex="-1"><a class="header-anchor" href="#面试题"><span>面试题</span></a></h3><ul><li>对象在JVM中是怎么存储的？</li><li>对象头信息里面有哪些东西？</li><li>Java对象头有什么？</li></ul><p>从对象创建的方式 和 步骤开始说</p><figure><img src="'+l+'" alt="image-20200709095356247" tabindex="0" loading="lazy"><figcaption>image-20200709095356247</figcaption></figure><h3 id="对象创建方式" tabindex="-1"><a class="header-anchor" href="#对象创建方式"><span>对象创建方式</span></a></h3><ul><li>new：最常见的方式、单例类中调用getInstance的静态类方法，XXXFactory的静态方法</li><li>Class的newInstance方法：在JDK9里面被标记为过时的方法，因为只能调用空参构造器</li><li>Constructor的newInstance(XXX)：反射的方式，可以调用空参的，或者带参的构造器</li><li>使用clone()：不调用任何的构造器，要求当前的类需要实现Cloneable接口中的clone接口</li><li>使用序列化：序列化一般用于Socket的网络传输</li><li>第三方库 Objenesis</li></ul><h3 id="创建对象的步骤" tabindex="-1"><a class="header-anchor" href="#创建对象的步骤"><span>创建对象的步骤</span></a></h3><h4 id="判断对象对应的类是否加载、链接、初始化" tabindex="-1"><a class="header-anchor" href="#判断对象对应的类是否加载、链接、初始化"><span>判断对象对应的类是否加载、链接、初始化</span></a></h4><p>虚拟机遇到一条new指令，首先去检查这个指令的参数能否在Metaspace的常量池中定位到一个类的符号引用，并且检查这个符号引用代表的类是否已经被加载，解析和初始化。（即判断类元信息是否存在）。如果没有，那么在双亲委派模式下，使用当前类加载器以ClassLoader + 包名 + 类名为key进行查找对应的 .class文件，如果没有找到文件，则抛出ClassNotFoundException异常，如果找到，则进行类加载，并生成对应的Class对象。</p><h4 id="为对象分配内存" tabindex="-1"><a class="header-anchor" href="#为对象分配内存"><span>为对象分配内存</span></a></h4><p>首先计算对象占用空间的大小，接着在堆中划分一块内存给新对象。如果实例成员变量是引用变量，仅分配引用变量空间即可，即4个字节大小</p><ul><li><p>如果内存规整：指针碰撞</p></li><li><p>如果内存不规整</p><ul><li>虚拟表需要维护一个列表</li><li>空闲列表分配</li></ul></li></ul><p>如果内存是规整的，那么虚拟机将采用的是指针碰撞法（Bump The Point）来为对象分配内存。</p><p>意思是所有用过的内存在一边，空闲的内存放另外一边，中间放着一个指针作为分界点的指示器，分配内存就仅仅是把指针指向空闲那边挪动一段与对象大小相等的距离罢了。如果垃圾收集器选择的是Serial ，ParNew这种基于压缩算法的，虚拟机采用这种分配方式。一般使用带Compact（整理）过程的收集器时，使用指针碰撞。</p><p>如果内存不是规整的，已使用的内存和未使用的内存相互交错，那么虚拟机将采用的是空闲列表来为对象分配内存。意思是虚拟机维护了一个列表，记录上那些内存块是可用的，再分配的时候从列表中找到一块足够大的空间划分给对象实例，并更新列表上的内容。这种分配方式成为了 “空闲列表（Free List）”</p><p>选择哪种分配方式由Java堆是否规整所决定，而Java堆是否规整又由所采用的垃圾收集器是否带有压缩整理功能决定。</p><h4 id="处理并发问题" tabindex="-1"><a class="header-anchor" href="#处理并发问题"><span>处理并发问题</span></a></h4><ul><li>采用CAS配上失败重试保证更新的原子性</li><li>每个线程预先分配TLAB - 通过设置 -XX:+UseTLAB参数来设置（区域加锁机制） <ul><li>在Eden区给每个线程分配一块区域</li></ul></li></ul><h3 id="初始化分配到的内存" tabindex="-1"><a class="header-anchor" href="#初始化分配到的内存"><span>初始化分配到的内存</span></a></h3><p>给对象属性赋值的操作</p><ul><li><p>属性的默认初始化</p></li><li><p>显示初始化</p></li><li><p>代码块中的初始化</p></li><li><p>构造器初始化</p></li><li><p>所有属性设置默认值，保证对象实例字段在不赋值可以直接使用</p></li></ul><h3 id="设置对象的对象头" tabindex="-1"><a class="header-anchor" href="#设置对象的对象头"><span>设置对象的对象头</span></a></h3><p>将对象的所属类（即类的元数据信息）、对象的HashCode和对象的GC信息、锁信息等数据存储在对象的对象头中。这个过程的具体设置方式取决于JVM实现。</p><h3 id="执行init方法进行初始化" tabindex="-1"><a class="header-anchor" href="#执行init方法进行初始化"><span>执行init方法进行初始化</span></a></h3><p>在Java程序的视角看来，初始化才正式开始。初始化成员变量，执行实例化代码块，调用类的构造方法，并把堆内对象的首地址赋值给引用变量</p><p>因此一般来说（由字节码中跟随invokespecial指令所决定），new指令之后会接着就是执行方法，把对象按照程序员的意愿进行初始化，这样一个真正可用的对象才算完成创建出来。</p><h3 id="对象实例化的过程" tabindex="-1"><a class="header-anchor" href="#对象实例化的过程"><span>对象实例化的过程</span></a></h3><ul><li>加载类元信息</li><li>为对象分配内存</li><li>处理并发问题</li><li>属性的默认初始化（零值初始化）</li><li>设置对象头信息</li><li>属性的显示初始化、代码块中初始化、构造器中初始化</li></ul><h2 id="对象内存布局" tabindex="-1"><a class="header-anchor" href="#对象内存布局"><span>对象内存布局</span></a></h2><figure><img src="'+t+'" alt="image-20200709151033237" tabindex="0" loading="lazy"><figcaption>image-20200709151033237</figcaption></figure><h3 id="对象头" tabindex="-1"><a class="header-anchor" href="#对象头"><span>对象头</span></a></h3><p>对象头包含了两部分，分别是 运行时元数据（Mark Word）和 类型指针</p><blockquote><p>如果是数组，还需要记录数组的长度</p></blockquote><h4 id="运行时元数据" tabindex="-1"><a class="header-anchor" href="#运行时元数据"><span>运行时元数据</span></a></h4><ul><li>哈希值（HashCode）</li><li>GC分代年龄</li><li>锁状态标志</li><li>线程持有的锁</li><li>偏向线程ID</li><li>翩向时间戳</li></ul><h4 id="类型指针" tabindex="-1"><a class="header-anchor" href="#类型指针"><span>类型指针</span></a></h4><p>指向类元数据InstanceKlass，确定该对象所属的类型。指向的其实是方法区中存放的类元信息</p><h3 id="实例数据-instance-data" tabindex="-1"><a class="header-anchor" href="#实例数据-instance-data"><span>实例数据（Instance Data）</span></a></h3><h4 id="说明" tabindex="-1"><a class="header-anchor" href="#说明"><span>说明</span></a></h4><p>不是必须的，也没有特别的含义，仅仅起到占位符的作用</p><h3 id="小结" tabindex="-1"><a class="header-anchor" href="#小结"><span>小结</span></a></h3><figure><img src="'+s+'" alt="image-20200709152801713" tabindex="0" loading="lazy"><figcaption>image-20200709152801713</figcaption></figure><h2 id="对象的访问定位" tabindex="-1"><a class="header-anchor" href="#对象的访问定位"><span>对象的访问定位</span></a></h2><h3 id="图示" tabindex="-1"><a class="header-anchor" href="#图示"><span>图示</span></a></h3><p>JVM是如何通过栈帧中的对象引用访问到其内部的对象实例呢？</p><figure><img src="'+r+'" alt="image-20200709164149920" tabindex="0" loading="lazy"><figcaption>image-20200709164149920</figcaption></figure><h3 id="对象访问的两种方式" tabindex="-1"><a class="header-anchor" href="#对象访问的两种方式"><span>对象访问的两种方式</span></a></h3><h4 id="句柄访问" tabindex="-1"><a class="header-anchor" href="#句柄访问"><span>句柄访问</span></a></h4><figure><img src="'+p+'" alt="image-20200709164342002" tabindex="0" loading="lazy"><figcaption>image-20200709164342002</figcaption></figure><p>句柄访问就是说栈的局部变量表中，记录的对象的引用，然后在堆空间中开辟了一块空间，也就是句柄池</p><h4 id="优点" tabindex="-1"><a class="header-anchor" href="#优点"><span>优点</span></a></h4><p>reference中存储稳定句柄地址，对象被移动（垃圾收集时移动对象很普遍）时只会改变句柄中实例数据指针即可，reference本身不需要被修改</p><h4 id="直接指针-hotspot采用" tabindex="-1"><a class="header-anchor" href="#直接指针-hotspot采用"><span>直接指针（HotSpot采用）</span></a></h4><figure><img src="'+h+'" alt="image-20200709164350466" tabindex="0" loading="lazy"><figcaption>image-20200709164350466</figcaption></figure><p>直接指针是局部变量表中的引用，直接指向堆中的实例，在对象实例中有类型指针，指向的是方法区中的对象类型数据</p>',56)],o={},d=(0,i(66262).A)(o,[["render",function(e,a){return(0,n.uX)(),(0,n.CE)("div",null,c)}]]),g=JSON.parse('{"path":"/study-notes/JVM/Memory-GC/Object-Instantiation/","title":"对象实例化内存布局与访问定位","lang":"zh-CN","frontmatter":{"title":"对象实例化内存布局与访问定位","date":"2023-03-18T00:00:00.000Z","description":"对象实例化 面试题 对象在JVM中是怎么存储的？ 对象头信息里面有哪些东西？ Java对象头有什么？ 从对象创建的方式 和 步骤开始说 image-20200709095356247image-20200709095356247 对象创建方式 new：最常见的方式、单例类中调用getInstance的静态类方法，XXXFactory的静态方法 Clas...","head":[["meta",{"property":"og:url","content":"https://mister-hope.github.io/./study-notes/JVM/Memory-GC/Object-Instantiation/"}],["meta",{"property":"og:site_name","content":"撄宁的博客"}],["meta",{"property":"og:title","content":"对象实例化内存布局与访问定位"}],["meta",{"property":"og:description","content":"对象实例化 面试题 对象在JVM中是怎么存储的？ 对象头信息里面有哪些东西？ Java对象头有什么？ 从对象创建的方式 和 步骤开始说 image-20200709095356247image-20200709095356247 对象创建方式 new：最常见的方式、单例类中调用getInstance的静态类方法，XXXFactory的静态方法 Clas..."}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:locale","content":"zh-CN"}],["meta",{"property":"og:updated_time","content":"2024-08-11T14:34:32.000Z"}],["meta",{"property":"article:author","content":"樱宁"}],["meta",{"property":"article:published_time","content":"2023-03-18T00:00:00.000Z"}],["meta",{"property":"article:modified_time","content":"2024-08-11T14:34:32.000Z"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"对象实例化内存布局与访问定位\\",\\"image\\":[\\"\\"],\\"datePublished\\":\\"2023-03-18T00:00:00.000Z\\",\\"dateModified\\":\\"2024-08-11T14:34:32.000Z\\",\\"author\\":[{\\"@type\\":\\"Person\\",\\"name\\":\\"樱宁\\",\\"url\\":\\"https://mister-hope.com\\"}]}"]]},"headers":[{"level":2,"title":"对象实例化","slug":"对象实例化","link":"#对象实例化","children":[{"level":3,"title":"面试题","slug":"面试题","link":"#面试题","children":[]},{"level":3,"title":"对象创建方式","slug":"对象创建方式","link":"#对象创建方式","children":[]},{"level":3,"title":"创建对象的步骤","slug":"创建对象的步骤","link":"#创建对象的步骤","children":[]},{"level":3,"title":"初始化分配到的内存","slug":"初始化分配到的内存","link":"#初始化分配到的内存","children":[]},{"level":3,"title":"设置对象的对象头","slug":"设置对象的对象头","link":"#设置对象的对象头","children":[]},{"level":3,"title":"执行init方法进行初始化","slug":"执行init方法进行初始化","link":"#执行init方法进行初始化","children":[]},{"level":3,"title":"对象实例化的过程","slug":"对象实例化的过程","link":"#对象实例化的过程","children":[]}]},{"level":2,"title":"对象内存布局","slug":"对象内存布局","link":"#对象内存布局","children":[{"level":3,"title":"对象头","slug":"对象头","link":"#对象头","children":[]},{"level":3,"title":"实例数据（Instance Data）","slug":"实例数据-instance-data","link":"#实例数据-instance-data","children":[]},{"level":3,"title":"小结","slug":"小结","link":"#小结","children":[]}]},{"level":2,"title":"对象的访问定位","slug":"对象的访问定位","link":"#对象的访问定位","children":[{"level":3,"title":"图示","slug":"图示","link":"#图示","children":[]},{"level":3,"title":"对象访问的两种方式","slug":"对象访问的两种方式","link":"#对象访问的两种方式","children":[]}]}],"git":{"createdTime":1723381883000,"updatedTime":1723386872000,"contributors":[{"name":"jiang","email":"948742327@qq.com","commits":3}]},"readingTime":{"minutes":5.36,"words":1607},"filePathRelative":"study-notes/JVM/Memory-GC/Object-Instantiation/README.md","localizedDate":"2023年3月18日","excerpt":"<h2>对象实例化</h2>\\n<h3>面试题</h3>\\n<ul>\\n<li>对象在JVM中是怎么存储的？</li>\\n<li>对象头信息里面有哪些东西？</li>\\n<li>Java对象头有什么？</li>\\n</ul>\\n<p>从对象创建的方式 和 步骤开始说</p>\\n<figure><figcaption>image-20200709095356247</figcaption></figure>\\n<h3>对象创建方式</h3>\\n<ul>\\n<li>new：最常见的方式、单例类中调用getInstance的静态类方法，XXXFactory的静态方法</li>\\n<li>Class的newInstance方法：在JDK9里面被标记为过时的方法，因为只能调用空参构造器</li>\\n<li>Constructor的newInstance(XXX)：反射的方式，可以调用空参的，或者带参的构造器</li>\\n<li>使用clone()：不调用任何的构造器，要求当前的类需要实现Cloneable接口中的clone接口</li>\\n<li>使用序列化：序列化一般用于Socket的网络传输</li>\\n<li>第三方库 Objenesis</li>\\n</ul>","autoDesc":true}')}}]);