"use strict";(self.webpackChunkblogs2=self.webpackChunkblogs2||[]).push([[4670],{66262:(a,s)=>{s.A=(a,s)=>{const n=a.__vccOpts||a;for(const[a,e]of s)n[a]=e;return n}},7697:(a,s,n)=>{n.r(s),n.d(s,{comp:()=>c,data:()=>r});var e=n(20641);const i=n.p+"assets/img/image-20200318213301603.cc4d3121.png",p=n.p+"assets/img/image-20200319113611244.18179925.png",t=n.p+"assets/img/image-20200319114526625.2d7e5eab.png",l=[(0,e.Fv)('<h2 id="jvm垃圾回收的时候如何确定垃圾-是否知道什么是gc-roots" tabindex="-1"><a class="header-anchor" href="#jvm垃圾回收的时候如何确定垃圾-是否知道什么是gc-roots"><span>JVM垃圾回收的时候如何确定垃圾？是否知道什么是GC Roots</span></a></h2><blockquote><p>友链：https://www.pdai.tech/md/java/jvm/java-jvm-gc.html#gc---java-%E5%9E%83%E5%9C%BE%E5%9B%9E%E6%94%B6%E5%9F%BA%E7%A1%80%E7%9F%A5%E8%AF%86</p></blockquote><h3 id="什么是垃圾" tabindex="-1"><a class="header-anchor" href="#什么是垃圾"><span>什么是垃圾</span></a></h3><p>简单来说就是内存中已经不再被使用的空间就是垃圾</p><h3 id="如何判断一个对象是否可以被回收" tabindex="-1"><a class="header-anchor" href="#如何判断一个对象是否可以被回收"><span>如何判断一个对象是否可以被回收</span></a></h3><h4 id="引用计数法" tabindex="-1"><a class="header-anchor" href="#引用计数法"><span>引用计数法</span></a></h4><p>Java中，引用和对象是有关联的。如果要操作对象则必须用引用进行。</p><p>因此，很显然一个简单的办法就是通过引用计数来判断一个对象是否可以回收。简单说，给对象中添加一个引用计数器</p><p>每当有一个地方引用它，计数器值加1</p><p>每当有一个引用失效，计数器值减1</p><p>任何时刻计数器值为零的对象就是不可能再被使用的，那么这个对象就是可回收对象。</p><p>那么为什么主流的Java虚拟机里面都没有选用这个方法呢？其中最主要的原因是它很难解决对象之间相互循环引用的问题。</p><p>该算法存在但目前无人用了，解决不了循环引用的问题，了解即可。</p><figure><img src="'+i+'" alt="image-20200318213301603" tabindex="0" loading="lazy"><figcaption>image-20200318213301603</figcaption></figure><h4 id="枚举根节点做可达性分析" tabindex="-1"><a class="header-anchor" href="#枚举根节点做可达性分析"><span>枚举根节点做可达性分析</span></a></h4><p>根搜索路径算法</p><p>为了解决引用计数法的循环引用个问题，Java使用了可达性分析的方法：</p><figure><img src="'+p+'" alt="image-20200319113611244" tabindex="0" loading="lazy"><figcaption>image-20200319113611244</figcaption></figure><p>所谓 GC Roots 或者说 Tracing Roots的“根集合” 就是一组必须活跃的引用</p><p><code>基本思路就是通过一系列名为 GC Roots的对象作为起始点</code>，从这个被称为GC Roots的对象开始向下搜索，如果一个对象到GC Roots没有任何引用链相连，则说明此对象不可用。也即给定一个集合的引用作为根出发，通过引用关系遍历对象图，能被遍历到的（可到达的）对象就被判定为存活，没有被遍历到的对象就被判定为死亡</p><figure><img src="'+t+'" alt="image-20200319114526625" tabindex="0" loading="lazy"><figcaption>image-20200319114526625</figcaption></figure><p>必须从GC Roots对象开始，这个类似于linux的 / 也就是根目录</p><p>蓝色部分是从GC Roots出发，能够循环可达</p><p>而白色部分，从GC Roots出发，无法到达</p><h4 id="一句话理解gc-roots" tabindex="-1"><a class="header-anchor" href="#一句话理解gc-roots"><span>一句话理解GC Roots</span></a></h4><p>假设我们现在有三个实体，分别是 人，狗，毛衣</p><p>然后他们之间的关系是：人 牵着 狗，狗穿着毛衣，他们之间是强连接的关系</p><p>有一天人消失了，只剩下狗狗 和 毛衣，这个时候，把人想象成 GC Roots，因为 人 和 狗之间失去了绳子连接，</p><p>那么狗可能被回收，也就是被警察抓起来，被送到流浪狗寄养所</p><p>假设狗和人有强连接的时候，狗狗就不会被当成是流浪狗</p><h4 id="那些对象可以当做gc-roots" tabindex="-1"><a class="header-anchor" href="#那些对象可以当做gc-roots"><span>那些对象可以当做GC Roots</span></a></h4><ul><li>虚拟机栈（栈帧中的局部变量区，也叫做局部变量表）中的引用对象</li><li>方法区中的类静态属性引用的对象</li><li>方法区中常量引用的对象</li><li>本地方法栈中的JNI（Native方法）的引用对象</li></ul><h4 id="代码说明" tabindex="-1"><a class="header-anchor" href="#代码说明"><span>代码说明</span></a></h4><div class="language- line-numbers-mode" data-highlighter="shiki" data-ext="" data-title="" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span></span></span>\n<span class="line"><span>/**</span></span>\n<span class="line"><span> * 在Java中，可以作为GC Roots的对象有：</span></span>\n<span class="line"><span> * - 虚拟机栈（栈帧中的局部变量区，也叫做局部变量表）中的引用对象</span></span>\n<span class="line"><span> * - 方法区中的类静态属性引用的对象</span></span>\n<span class="line"><span> * - 方法区中常量引用的对象</span></span>\n<span class="line"><span> * - 本地方法栈中的JNI（Native方法）的引用对象</span></span>\n<span class="line"><span> * @author: 阿飞</span></span>\n<span class="line"><span> * @create: 2020-03-19-11:57</span></span>\n<span class="line"><span> */</span></span>\n<span class="line"><span>public class GCRootDemo {</span></span>\n<span class="line"><span></span></span>\n<span class="line"><span></span></span>\n<span class="line"><span>    // 方法区中的类静态属性引用的对象</span></span>\n<span class="line"><span>    // private static GCRootDemo2 t2;</span></span>\n<span class="line"><span></span></span>\n<span class="line"><span>    // 方法区中的常量引用，GC Roots 也会以这个为起点，进行遍历</span></span>\n<span class="line"><span>    // private static final GCRootDemo3 t3 = new GCRootDemo3(8);</span></span>\n<span class="line"><span></span></span>\n<span class="line"><span>    public static void m1() {</span></span>\n<span class="line"><span>        // 第一种，虚拟机栈中的引用对象</span></span>\n<span class="line"><span>        GCRootDemo t1 = new GCRootDemo();</span></span>\n<span class="line"><span>        System.gc();</span></span>\n<span class="line"><span>        System.out.println(&quot;第一次GC完成&quot;);</span></span>\n<span class="line"><span>    }</span></span>\n<span class="line"><span>    public static void main(String[] args) {</span></span>\n<span class="line"><span>        m1();</span></span>\n<span class="line"><span>    }</span></span>\n<span class="line"><span>}</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>',34)],o={},c=(0,n(66262).A)(o,[["render",function(a,s){return(0,e.uX)(),(0,e.CE)("div",null,l)}]]),r=JSON.parse('{"path":"/study-notes/shangguigu-second/JVM/two.html","title":"GC Roots","lang":"zh-CN","frontmatter":{"title":"GC Roots","date":"2023-03-11T00:00:00.000Z","tags":["死锁"],"category":["JUC"],"description":"JVM垃圾回收的时候如何确定垃圾？是否知道什么是GC Roots 友链：https://www.pdai.tech/md/java/jvm/java-jvm-gc.html#gc---java-%E5%9E%83%E5%9C%BE%E5%9B%9E%E6%94%B6%E5%9F%BA%E7%A1%80%E7%9F%A5%E8%AF%86 什么是垃圾 简...","head":[["meta",{"property":"og:url","content":"https://mister-hope.github.io/blog/study-notes/shangguigu-second/JVM/two.html"}],["meta",{"property":"og:site_name","content":"撄宁的博客"}],["meta",{"property":"og:title","content":"GC Roots"}],["meta",{"property":"og:description","content":"JVM垃圾回收的时候如何确定垃圾？是否知道什么是GC Roots 友链：https://www.pdai.tech/md/java/jvm/java-jvm-gc.html#gc---java-%E5%9E%83%E5%9C%BE%E5%9B%9E%E6%94%B6%E5%9F%BA%E7%A1%80%E7%9F%A5%E8%AF%86 什么是垃圾 简..."}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:locale","content":"zh-CN"}],["meta",{"property":"og:updated_time","content":"2024-07-27T14:05:04.000Z"}],["meta",{"property":"article:author","content":"樱宁"}],["meta",{"property":"article:tag","content":"死锁"}],["meta",{"property":"article:published_time","content":"2023-03-11T00:00:00.000Z"}],["meta",{"property":"article:modified_time","content":"2024-07-27T14:05:04.000Z"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"GC Roots\\",\\"image\\":[\\"\\"],\\"datePublished\\":\\"2023-03-11T00:00:00.000Z\\",\\"dateModified\\":\\"2024-07-27T14:05:04.000Z\\",\\"author\\":[{\\"@type\\":\\"Person\\",\\"name\\":\\"樱宁\\",\\"url\\":\\"https://mister-hope.com\\"}]}"]]},"headers":[{"level":2,"title":"JVM垃圾回收的时候如何确定垃圾？是否知道什么是GC Roots","slug":"jvm垃圾回收的时候如何确定垃圾-是否知道什么是gc-roots","link":"#jvm垃圾回收的时候如何确定垃圾-是否知道什么是gc-roots","children":[{"level":3,"title":"什么是垃圾","slug":"什么是垃圾","link":"#什么是垃圾","children":[]},{"level":3,"title":"如何判断一个对象是否可以被回收","slug":"如何判断一个对象是否可以被回收","link":"#如何判断一个对象是否可以被回收","children":[]}]}],"git":{"createdTime":1722089104000,"updatedTime":1722089104000,"contributors":[{"name":"jiang","email":"948742327@qq.com","commits":1}]},"readingTime":{"minutes":3.39,"words":1016},"filePathRelative":"study-notes/shangguigu-second/JVM/two.md","localizedDate":"2023年3月11日","excerpt":"<h2>JVM垃圾回收的时候如何确定垃圾？是否知道什么是GC Roots</h2>\\n<blockquote>\\n<p>友链：https://www.pdai.tech/md/java/jvm/java-jvm-gc.html#gc---java-%E5%9E%83%E5%9C%BE%E5%9B%9E%E6%94%B6%E5%9F%BA%E7%A1%80%E7%9F%A5%E8%AF%86</p>\\n</blockquote>\\n<h3>什么是垃圾</h3>\\n<p>简单来说就是内存中已经不再被使用的空间就是垃圾</p>\\n<h3>如何判断一个对象是否可以被回收</h3>\\n<h4>引用计数法</h4>\\n<p>Java中，引用和对象是有关联的。如果要操作对象则必须用引用进行。</p>","autoDesc":true}')}}]);