"use strict";(self.webpackChunkblogs2=self.webpackChunkblogs2||[]).push([[4013],{66262:(n,s)=>{s.A=(n,s)=>{const a=n.__vccOpts||n;for(const[n,i]of s)a[n]=i;return a}},14273:(n,s,a)=>{a.r(s),a.d(s,{comp:()=>r,data:()=>u});var i=a(20641);const l=a.p+"assets/img/image-20200309153225758.0e6ba63f.png",e=a.p+"assets/img/image-20200309154435933.0d288133.png",p=a.p+"assets/img/image-20200309162154191.7bbc9d7d.png",t=a.p+"assets/img/image-20200309162314054.9a2c2c99.png",c=[(0,i.Fv)('<h2 id="谈谈对volatile的理解" tabindex="-1"><a class="header-anchor" href="#谈谈对volatile的理解"><span>谈谈对Volatile的理解</span></a></h2><ul><li>JUC（java.util.concurrent） <ul><li>进程和线程 <ul><li>进程：后台运行的程序（我们打开的一个软件，就是进程）</li><li>线程：轻量级的进程，并且一个进程包含多个线程（同在一个软件内，同时运行窗口，就是线程）</li></ul></li><li>并发和并行 <ul><li>并发：同时访问某个东西，就是并发</li><li>并行：一起做某些事情，就是并行</li></ul></li></ul></li><li>JUC下的三个包 <ul><li>java.util.concurrent <ul><li>java.util.concurrent.atomic</li><li>java.util.concurrent.locks</li></ul></li></ul></li></ul><p>Volatile在日常的单线程环境是应用不到的</p><ul><li>Volatile是Java虚拟机提供的<code>轻量级</code>的同步机制（三大特性） <ul><li>保证可见性</li><li>不保证原子性</li><li>禁止指令重排</li></ul></li></ul><h2 id="jmm是什么" tabindex="-1"><a class="header-anchor" href="#jmm是什么"><span>JMM是什么</span></a></h2><p>JMM是Java内存模型，也就是Java Memory Model，简称JMM，本身是一种抽象的概念，实际上并不存在，<strong>它描述的是一组规则或规范，通过这组规范定义了程序中各个变量（包括实例字段，静态字段和构成数组对象的元素）的访问方式</strong></p><p>JMM关于同步的规定：</p><ul><li>线程解锁前，必须把共享变量的值刷新回主内存</li><li>线程加锁前，必须读取主内存的最新值，到自己的工作内存</li><li>加锁和解锁是同一把锁</li></ul><p>由于JVM运行程序的实体是线程，而每个线程创建时JVM都会为其创建一个工作内存（有些地方称为栈空间），工作内存是每个线程的私有数据区域，而Java内存模型中规定所有变量都存储在主内存，主内存是共享内存区域，所有线程都可以访问，<code>但线程对变量的操作（读取赋值等）必须在工作内存中进行，首先要将变量从主内存拷贝到自己的工作内存空间，然后对变量进行操作，操作完成后再将变量写会主内存</code>，不能直接操作主内存中的变量，各个线程中的工作内存中存储着主内存中的变量副本拷贝，因此不同的线程间无法访问对方的工作内存，线程间的通信（传值）必须通过主内存来完成，其简要访问过程：</p><figure><img src="'+l+'" alt="image-20200309153225758" tabindex="0" loading="lazy"><figcaption>image-20200309153225758</figcaption></figure><p>数据传输速率：硬盘 &lt; 内存 &lt; &lt; cache &lt; CPU</p><p>上面提到了两个概念：主内存 和 工作内存</p><ul><li><p>主内存：就是计算机的内存，也就是经常提到的8G内存，16G内存</p></li><li><p>工作内存：但我们实例化 new student，那么 age = 25 也是存储在主内存中</p><ul><li>当同时有三个线程同时访问 student中的age变量时，那么每个线程都会拷贝一份，到各自的工作内存，从而实现了变量的拷贝</li></ul><figure><img src="'+e+'" alt="image-20200309154435933" tabindex="0" loading="lazy"><figcaption>image-20200309154435933</figcaption></figure></li></ul><p>即：JMM内存模型的可见性，指的是当主内存区域中的值被某个线程写入更改后，其它线程会马上知晓更改后的值，并重新得到更改后的值。</p><h2 id="缓存一致性" tabindex="-1"><a class="header-anchor" href="#缓存一致性"><span>缓存一致性</span></a></h2><p>为什么这里主线程中某个值被更改后，其它线程能马上知晓呢？其实这里是用到了总线嗅探技术</p><p>在说嗅探技术之前，首先谈谈缓存一致性的问题，就是当多个处理器运算任务都涉及到同一块主内存区域的时候，将可能导致各自的缓存数据不一。</p><p>为了解决缓存一致性的问题，需要各个处理器访问缓存时都遵循一些协议，在读写时要根据协议进行操作，这类协议主要有MSI、MESI等等。</p><h3 id="mesi" tabindex="-1"><a class="header-anchor" href="#mesi"><span>MESI</span></a></h3><p>当CPU写数据时，如果发现操作的变量是共享变量，即在其它CPU中也存在该变量的副本，会发出信号通知其它CPU将该内存变量的缓存行设置为无效，因此当其它CPU读取这个变量的时，发现自己缓存该变量的缓存行是无效的，那么它就会从内存中重新读取。</p><h3 id="总线嗅探" tabindex="-1"><a class="header-anchor" href="#总线嗅探"><span>总线嗅探</span></a></h3><p>那么是如何发现数据是否失效呢？</p><p>这里是用到了总线嗅探技术，就是每个处理器通过嗅探在总线上传播的数据来检查自己缓存值是否过期了，当处理器发现自己的缓存行对应的内存地址被修改，就会将当前处理器的缓存行设置为无效状态，当处理器对这个数据进行修改操作的时候，会重新从内存中把数据读取到处理器缓存中。</p><h3 id="总线风暴" tabindex="-1"><a class="header-anchor" href="#总线风暴"><span>总线风暴</span></a></h3><p>总线嗅探技术有哪些缺点？</p><p>由于Volatile的MESI缓存一致性协议，需要不断的从主内存嗅探和CAS循环，无效的交互会导致总线带宽达到峰值。因此不要大量使用volatile关键字，至于什么时候使用volatile、什么时候用锁以及Syschonized都是需要根据实际场景的。</p><h2 id="jmm的特性" tabindex="-1"><a class="header-anchor" href="#jmm的特性"><span>JMM的特性</span></a></h2><p>JMM的三大特性，volatile只保证了两个，即可见性和有序性，不满足原子性</p><ul><li>可见性</li><li>原子性</li><li>有序性</li></ul><h2 id="可见性代码验证" tabindex="-1"><a class="header-anchor" href="#可见性代码验证"><span>可见性代码验证</span></a></h2><p>但我们对于成员变量没有添加任何修饰时，是无法感知其它线程修改后的值</p><div class="language- line-numbers-mode" data-highlighter="shiki" data-ext="" data-title="" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span>package com.moxi.interview.study.thread;</span></span>\n<span class="line"><span></span></span>\n<span class="line"><span>/**</span></span>\n<span class="line"><span> * Volatile Java虚拟机提供的轻量级同步机制</span></span>\n<span class="line"><span> *</span></span>\n<span class="line"><span> * 可见性（及时通知）</span></span>\n<span class="line"><span> * 不保证原子性</span></span>\n<span class="line"><span> * 禁止指令重排</span></span>\n<span class="line"><span> *</span></span>\n<span class="line"><span> * @author: 阿飞</span></span>\n<span class="line"><span> * @create: 2020-03-09-15:58</span></span>\n<span class="line"><span> */</span></span>\n<span class="line"><span></span></span>\n<span class="line"><span>import java.util.concurrent.TimeUnit;</span></span>\n<span class="line"><span></span></span>\n<span class="line"><span>/**</span></span>\n<span class="line"><span> * 假设是主物理内存</span></span>\n<span class="line"><span> */</span></span>\n<span class="line"><span>class MyData {</span></span>\n<span class="line"><span></span></span>\n<span class="line"><span>    int number = 0;</span></span>\n<span class="line"><span></span></span>\n<span class="line"><span>    public void addTo60() {</span></span>\n<span class="line"><span>        this.number = 60;</span></span>\n<span class="line"><span>    }</span></span>\n<span class="line"><span>}</span></span>\n<span class="line"><span></span></span>\n<span class="line"><span>/**</span></span>\n<span class="line"><span> * 验证volatile的可见性</span></span>\n<span class="line"><span> * 1. 假设int number = 0， number变量之前没有添加volatile关键字修饰</span></span>\n<span class="line"><span> */</span></span>\n<span class="line"><span>public class VolatileDemo {</span></span>\n<span class="line"><span></span></span>\n<span class="line"><span>    public static void main(String args []) {</span></span>\n<span class="line"><span></span></span>\n<span class="line"><span>        // 资源类</span></span>\n<span class="line"><span>        MyData myData = new MyData();</span></span>\n<span class="line"><span></span></span>\n<span class="line"><span>        // AAA线程 实现了Runnable接口的，lambda表达式</span></span>\n<span class="line"><span>        new Thread(() -&gt; {</span></span>\n<span class="line"><span></span></span>\n<span class="line"><span>            System.out.println(Thread.currentThread().getName() + &quot;\\t come in&quot;);</span></span>\n<span class="line"><span></span></span>\n<span class="line"><span>            // 线程睡眠3秒，假设在进行运算</span></span>\n<span class="line"><span>            try {</span></span>\n<span class="line"><span>                TimeUnit.SECONDS.sleep(3);</span></span>\n<span class="line"><span>            } catch (InterruptedException e) {</span></span>\n<span class="line"><span>                e.printStackTrace();</span></span>\n<span class="line"><span>            }</span></span>\n<span class="line"><span>            // 修改number的值</span></span>\n<span class="line"><span>            myData.addTo60();</span></span>\n<span class="line"><span></span></span>\n<span class="line"><span>            // 输出修改后的值</span></span>\n<span class="line"><span>            System.out.println(Thread.currentThread().getName() + &quot;\\t update number value:&quot; + myData.number);</span></span>\n<span class="line"><span></span></span>\n<span class="line"><span>        }, &quot;AAA&quot;).start();</span></span>\n<span class="line"><span></span></span>\n<span class="line"><span>        while(myData.number == 0) {</span></span>\n<span class="line"><span>            // main线程就一直在这里等待循环，直到number的值不等于零</span></span>\n<span class="line"><span>        }</span></span>\n<span class="line"><span></span></span>\n<span class="line"><span>        // 按道理这个值是不可能打印出来的，因为主线程运行的时候，number的值为0，所以一直在循环</span></span>\n<span class="line"><span>        // 如果能输出这句话，说明AAA线程在睡眠3秒后，更新的number的值，重新写入到主内存，并被main线程感知到了</span></span>\n<span class="line"><span>        System.out.println(Thread.currentThread().getName() + &quot;\\t mission is over&quot;);</span></span>\n<span class="line"><span></span></span>\n<span class="line"><span>        /**</span></span>\n<span class="line"><span>         * 最后输出结果：</span></span>\n<span class="line"><span>         * AAA\t come in</span></span>\n<span class="line"><span>         * AAA\t update number value:60</span></span>\n<span class="line"><span>         * 最后线程没有停止，并行没有输出  mission is over 这句话，说明没有用volatile修饰的变量，是没有可见性</span></span>\n<span class="line"><span>         */</span></span>\n<span class="line"><span></span></span>\n<span class="line"><span>    }</span></span>\n<span class="line"><span>}</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>输出结果为</p><figure><img src="'+p+'" alt="image-20200309162154191" tabindex="0" loading="lazy"><figcaption>image-20200309162154191</figcaption></figure><p>最后线程没有停止，并行没有输出 mission is over 这句话，说明没有用volatile修饰的变量，是没有可见性</p><p>当我们修改MyData类中的成员变量时，并且添加volatile关键字修饰</p><div class="language- line-numbers-mode" data-highlighter="shiki" data-ext="" data-title="" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span>/**</span></span>\n<span class="line"><span> * 假设是主物理内存</span></span>\n<span class="line"><span> */</span></span>\n<span class="line"><span>class MyData {</span></span>\n<span class="line"><span>    /**</span></span>\n<span class="line"><span>     * volatile 修饰的关键字，是为了增加 主线程和线程之间的可见性，只要有一个线程修改了内存中的值，其它线程也能马上感知</span></span>\n<span class="line"><span>     */</span></span>\n<span class="line"><span>    volatile int number = 0;</span></span>\n<span class="line"><span></span></span>\n<span class="line"><span>    public void addTo60() {</span></span>\n<span class="line"><span>        this.number = 60;</span></span>\n<span class="line"><span>    }</span></span>\n<span class="line"><span>}</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>最后输出的结果为：</p><figure><img src="'+t+'" alt="image-20200309162314054" tabindex="0" loading="lazy"><figcaption>image-20200309162314054</figcaption></figure><p>主线程也执行完毕了，说明volatile修饰的变量，是具备JVM轻量级同步机制的，能够感知其它线程的修改后的值。</p><h2 id="参考" tabindex="-1"><a class="header-anchor" href="#参考"><span>参考</span></a></h2><p>https://mp.weixin.qq.com/s/Oa3tcfAFO9IgsbE22C5TEg</p>',42)],d={},r=(0,a(66262).A)(d,[["render",function(n,s){return(0,i.uX)(),(0,i.CE)("div",null,c)}]]),u=JSON.parse('{"path":"/study-notes/shangguigu-second/volatile/one.html","title":"Volatile和JMM内存模型的可见性","lang":"zh-CN","frontmatter":{"title":"Volatile和JMM内存模型的可见性","date":"2023-03-17T00:00:00.000Z","tags":["JUC","Volatile"],"category":["JUC"],"order":1,"description":"谈谈对Volatile的理解 JUC（java.util.concurrent） 进程和线程 进程：后台运行的程序（我们打开的一个软件，就是进程） 线程：轻量级的进程，并且一个进程包含多个线程（同在一个软件内，同时运行窗口，就是线程） 并发和并行 并发：同时访问某个东西，就是并发 并行：一起做某些事情，就是并行 JUC下的三个包 java.util.c...","head":[["meta",{"property":"og:url","content":"https://mister-hope.github.io/./study-notes/shangguigu-second/volatile/one.html"}],["meta",{"property":"og:site_name","content":"撄宁的博客"}],["meta",{"property":"og:title","content":"Volatile和JMM内存模型的可见性"}],["meta",{"property":"og:description","content":"谈谈对Volatile的理解 JUC（java.util.concurrent） 进程和线程 进程：后台运行的程序（我们打开的一个软件，就是进程） 线程：轻量级的进程，并且一个进程包含多个线程（同在一个软件内，同时运行窗口，就是线程） 并发和并行 并发：同时访问某个东西，就是并发 并行：一起做某些事情，就是并行 JUC下的三个包 java.util.c..."}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:locale","content":"zh-CN"}],["meta",{"property":"og:updated_time","content":"2024-07-27T14:05:04.000Z"}],["meta",{"property":"article:author","content":"樱宁"}],["meta",{"property":"article:tag","content":"JUC"}],["meta",{"property":"article:tag","content":"Volatile"}],["meta",{"property":"article:published_time","content":"2023-03-17T00:00:00.000Z"}],["meta",{"property":"article:modified_time","content":"2024-07-27T14:05:04.000Z"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"Volatile和JMM内存模型的可见性\\",\\"image\\":[\\"\\"],\\"datePublished\\":\\"2023-03-17T00:00:00.000Z\\",\\"dateModified\\":\\"2024-07-27T14:05:04.000Z\\",\\"author\\":[{\\"@type\\":\\"Person\\",\\"name\\":\\"樱宁\\",\\"url\\":\\"https://mister-hope.com\\"}]}"]]},"headers":[{"level":2,"title":"谈谈对Volatile的理解","slug":"谈谈对volatile的理解","link":"#谈谈对volatile的理解","children":[]},{"level":2,"title":"JMM是什么","slug":"jmm是什么","link":"#jmm是什么","children":[]},{"level":2,"title":"缓存一致性","slug":"缓存一致性","link":"#缓存一致性","children":[{"level":3,"title":"MESI","slug":"mesi","link":"#mesi","children":[]},{"level":3,"title":"总线嗅探","slug":"总线嗅探","link":"#总线嗅探","children":[]},{"level":3,"title":"总线风暴","slug":"总线风暴","link":"#总线风暴","children":[]}]},{"level":2,"title":"JMM的特性","slug":"jmm的特性","link":"#jmm的特性","children":[]},{"level":2,"title":"可见性代码验证","slug":"可见性代码验证","link":"#可见性代码验证","children":[]},{"level":2,"title":"参考","slug":"参考","link":"#参考","children":[]}],"git":{"createdTime":1722089104000,"updatedTime":1722089104000,"contributors":[{"name":"jiang","email":"948742327@qq.com","commits":1}]},"readingTime":{"minutes":6.41,"words":1922},"filePathRelative":"study-notes/shangguigu-second/volatile/one.md","localizedDate":"2023年3月17日","excerpt":"<h2>谈谈对Volatile的理解</h2>\\n<ul>\\n<li>JUC（java.util.concurrent）\\n<ul>\\n<li>进程和线程\\n<ul>\\n<li>进程：后台运行的程序（我们打开的一个软件，就是进程）</li>\\n<li>线程：轻量级的进程，并且一个进程包含多个线程（同在一个软件内，同时运行窗口，就是线程）</li>\\n</ul>\\n</li>\\n<li>并发和并行\\n<ul>\\n<li>并发：同时访问某个东西，就是并发</li>\\n<li>并行：一起做某些事情，就是并行</li>\\n</ul>\\n</li>\\n</ul>\\n</li>\\n<li>JUC下的三个包\\n<ul>\\n<li>java.util.concurrent\\n<ul>\\n<li>java.util.concurrent.atomic</li>\\n<li>java.util.concurrent.locks</li>\\n</ul>\\n</li>\\n</ul>\\n</li>\\n</ul>","autoDesc":true}')}}]);