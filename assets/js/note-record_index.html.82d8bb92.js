"use strict";(self.webpackChunkblogs2=self.webpackChunkblogs2||[]).push([[7123],{66262:(e,i)=>{i.A=(e,i)=>{const l=e.__vccOpts||e;for(const[e,n]of i)l[e]=n;return l}},63879:(e,i,l)=>{l.r(i),l.d(i,{comp:()=>c,data:()=>h});var n=l(20641);const s=(0,n.Fv)('<p>笔记的总览。将学习的知识点总结和归纳。</p><ul><li>1、你们项目中有没有做过限流 ? 怎么做的 ? 漏铜算法、令牌桶</li></ul><h2 id="redis" tabindex="-1"><a class="header-anchor" href="#redis"><span>Redis</span></a></h2><h3 id="_1、集群方式" tabindex="-1"><a class="header-anchor" href="#_1、集群方式"><span>1、集群方式</span></a></h3><ul><li>主从复制：读写分离。（全量同步，增量同步）。保证不了高可用</li><li>哨兵模式：实现主从集群的自动故障恢复(监控、自动故障恢复、通知)</li><li>分片集群：解决海量数据，高并发。集群中有多个master，每个master保存不同数据。引入了哈希槽的概念</li></ul><h3 id="_2、redis-的集群方案-主从复制-保证不了高可用" tabindex="-1"><a class="header-anchor" href="#_2、redis-的集群方案-主从复制-保证不了高可用"><span>2、Redis 的集群方案 - 主从复制 （保证不了高可用）</span></a></h3><p>建立集群、读写分离.</p><p>单节点Redis的并发能力是有上限的，要进一步提高Redis的并发能力，就需要搭建主从集群，实现读写分离.般都是一主多从，主节点负责写数据，从节点负责读数据.</p><p>主从同步数据的流程：</p><p><strong>全量同步</strong></p><ol><li>从节点请求主节点同步数据 (replication id、offset)</li><li>主节点判断是否是第一次请求，是第一次就与从节点同步版本信息 (replication id和offset)</li><li>主节点执行bgsave，生成rdb文件后，发送给从节点去执行</li><li>在rdb生成执行期间，主节点会以命令的方式记录到缓冲区(一个日志文件)</li><li>把生成之后的命令志文件发送给从节点进行同步</li></ol><p><strong>增量同步</strong></p><ol><li>从节点请求主节点同步数据，主节点判断不是第一次请求，不是第一次就获取从节点的offset值</li><li>主节点从命令日志中获取offset值之后的数据，发送给从节点进行数据同步</li></ol><p>哨兵模式:实现主从集群的自动故障恢复(监控、自动故障恢复、通知)</p><h3 id="_3、redis作为缓存-mysql的数据如何与redis进行同步呢" tabindex="-1"><a class="header-anchor" href="#_3、redis作为缓存-mysql的数据如何与redis进行同步呢"><span>3、Redis作为缓存，MySQL的数据如何与Redis进行同步呢？</span></a></h3><p><strong>双写一致性</strong>：当修改了数据库的数据也要同时更新缓存的数据，缓存和数据库的数据要保持一致。</p>',16),r=(0,n.Lk)("li",null,"读操作：缓存命中，直接返回；缓存未命中查询数据库，写入缓存，设定超时时间",-1),o=(0,n.Lk)("p",null,"延迟双删会造成脏数据，解决：",-1),t=(0,n.Lk)("ol",null,[(0,n.Lk)("li",null,"采用分布式锁（读写锁）。【强一致性，性能差】"),(0,n.Lk)("li",null,"异步通知。MQ、基于Canal的异步通知。【无代码嵌入】")],-1),a=(0,n.Lk)("p",null,"保证数据的强一致我们当时采用的是redisson提供的读写锁来保证数据的同步.",-1),p=(0,n.Fv)('<h3 id="_4、为什么使用redisson实现分布式锁而不是直接使用redis的setnx命令的原因" tabindex="-1"><a class="header-anchor" href="#_4、为什么使用redisson实现分布式锁而不是直接使用redis的setnx命令的原因"><span>4、为什么使用Redisson实现分布式锁而不是直接使用Redis的SETNX命令的原因？</span></a></h3><p>使用Redisson实现分布式锁而不是直接使用Redis的<code>SETNX</code>命令的原因主要在于Redisson提供了更为丰富和高级的特性，这些特性使得分布式锁的实现更加健壮、安全且易于使用。以下是Redisson相对于直接使用<code>SETNX</code>的一些优势：</p><ol><li><strong>锁的自动续期</strong>： <ul><li>Redisson支持锁的自动续期，这意味着即使持有锁的客户端在执行长时间任务时也不会因为锁超时而失去锁。这对于防止因任务未完成而导致的锁提前释放非常有用。</li></ul></li><li><strong>可重入锁</strong>： <ul><li>Redisson的分布式锁是可重入的，这意味着同一个线程可以多次获取同一个锁而不会被阻塞。这是通过在Redis中存储线程信息和锁的递归次数来实现的。</li></ul></li><li><strong>公平锁</strong>： <ul><li>Redisson支持公平锁，确保锁的获取是按照请求顺序来的，防止饥饿现象。</li></ul></li><li><strong>锁的监控</strong>： <ul><li>Redisson提供了锁的监控功能，可以查看锁的状态，如锁的持有者、等待时间等。</li></ul></li><li><strong>集群支持</strong>： <ul><li>Redisson支持Redis集群，能够在Redis集群环境中正确地实现分布式锁。</li></ul></li><li><strong>异常处理</strong>： <ul><li>Redisson提供了更为完善的异常处理机制，如网络问题或Redis服务问题时的重试策略。</li></ul></li><li><strong>简化代码</strong>： <ul><li>使用Redisson可以大大简化分布式锁的代码实现，开发者不需要关心底层的Redis命令细节。 相比之下，直接使用<code>SETNX</code>命令实现分布式锁会有以下限制：</li></ul></li></ol><ul><li><p><strong>锁续期</strong>：需要手动实现锁续期逻辑，增加了复杂性。</p></li><li><p><strong>可重入性</strong>：<code>SETNX</code>本身不提供可重入锁的功能，需要额外的逻辑来支持。</p></li><li><p><strong>公平性</strong>：<code>SETNX</code>不支持公平锁，可能会导致某些线程长期无法获取锁。</p></li><li><p><strong>集群兼容性</strong>：在Redis集群环境中使用<code>SETNX</code>实现分布式锁可能会遇到问题，需要额外的逻辑来保证锁的正确性。</p></li><li><p><strong>异常处理</strong>：需要自己处理网络异常、Redis服务异常等情况。</p><p>总的来说，虽然<code>SETNX</code>可以用于实现简单的分布式锁，但在复杂的生产环境中，Redisson提供了更为全面和可靠的解决方案。</p></li></ul><h3 id="_5、持久化方式-rdb、aof" tabindex="-1"><a class="header-anchor" href="#_5、持久化方式-rdb、aof"><span>5、持久化方式 RDB、AOF</span></a></h3><ol><li>在Redis中提供了两种数据持久化的方式：1、RDB 2、AOF</li><li>RDB是一个快照文件，它是把redis内存存储的数据写到磁盘上，当redis实例宕机恢复数据的时候，方便从RDB的快照文件中恢复数据。</li><li>AOF的含义是追加文件，当redis操作写命令的时候，都会存储这个文件中，当redis实例宕机恢复数据的时候，会从这个文件中再次执行一遍命令来恢复数据</li><li>RDB因为是二进制文件，在保存的时候体积也是比较小的，它恢复的比较快，但是它有可能会丢数据，我们通常在项目中也会使用AOF来恢复数据，虽然AOF恢复的速度慢一些，但是它丢数据的风险要小很多， 在AOF文件中可以设置刷盘策略，我们当时设置的就是每秒批量写入一次命令。</li></ol><h3 id="_6、redis的数据过期策略" tabindex="-1"><a class="header-anchor" href="#_6、redis的数据过期策略"><span>6、Redis的数据过期策略</span></a></h3><p><strong>Redis的数据过期策略</strong></p><ol><li><strong>惰性删除</strong>：访问key的时候判断是否过期，如果过期，则删除</li><li><strong>定期删除</strong>：定期检查一定量的key是否过期(SLOW模式+ FAST模式</li><li>Redis的过期删除策略: 惰性删除 + 定期删除 两种策略进行配合使用</li></ol><h3 id="_7、redis是单线程的-但是为什么还那么快" tabindex="-1"><a class="header-anchor" href="#_7、redis是单线程的-但是为什么还那么快"><span>7、Redis是单线程的，但是为什么还那么快？</span></a></h3><ol><li>完全基于内存的，C语言编写</li><li>采用单线程，避免不必要的上下文切换可竞争条件</li><li>使用多路I/O复用模型，非阻塞IO</li></ol><p>I/O多路复用是指利用单个线程来同时监听多个Socket ，并在某个Socket可读、可写时得到通知，从而避免无效的等待，充分利用CPU资源。 目前的I/O多路复用都是采用的epoll模式实现，它会在通知用户进程Socket就绪的同时，把已就绪的Socket写入用户空间，不需要挨个遍历Socket来判断是否就绪，提升了性能。 在Redis6.0之后，为了提升更好的性能，在命令回复处理器使用了多线程来处理回复事件</p><blockquote><p>&quot;Socket&quot;指的是网络套接字，它是一种通信机制，允许在不同计算机上的进程之间进行网络通信。</p></blockquote><h2 id="rocketmq" tabindex="-1"><a class="header-anchor" href="#rocketmq"><span>RocketMQ</span></a></h2><h3 id="_1、用途" tabindex="-1"><a class="header-anchor" href="#_1、用途"><span>1、用途</span></a></h3><ul><li>限流削峰、异步解耦、数据收集</li></ul><h3 id="_2、系统架构" tabindex="-1"><a class="header-anchor" href="#_2、系统架构"><span>2、系统架构</span></a></h3><ul><li>NameServer：是一个Broker与Topic路由的注册中心，支持Broker的动态注册与发现。</li><li>Broker：</li></ul><h3 id="保证不丢失" tabindex="-1"><a class="header-anchor" href="#保证不丢失"><span>保证不丢失</span></a></h3><p>开启生产者确认机制、开启持久化功能、开启消费者确认机制为auto</p><h3 id="重复消费问题" tabindex="-1"><a class="header-anchor" href="#重复消费问题"><span>重复消费问题</span></a></h3><p>业务的唯一标识、（典型的幂等的问题）redis分布式锁、数据库的锁</p><h3 id="消息堆积" tabindex="-1"><a class="header-anchor" href="#消息堆积"><span>消息堆积</span></a></h3><p>提高消费者的消费能力，使用多线程、增加消费者、扩大队列容积</p><h2 id="算法" tabindex="-1"><a class="header-anchor" href="#算法"><span>算法</span></a></h2><p>http://localhost:8099/study-notes/heima-baodian/base/</p><h3 id="快速排序" tabindex="-1"><a class="header-anchor" href="#快速排序"><span>快速排序</span></a></h3><p><strong>算法描述</strong></p><ol><li>每一轮排序选择一个基准点（pivot）进行分区 <ol><li>让小于基准点的元素的进入一个分区，大于基准点的元素的进入另一个分区</li><li>当分区完成时，基准点元素的位置就是其最终位置</li></ol></li><li>在子分区内重复以上过程，直至子分区元素个数少于等于 1，这体现的是分而治之的思想 （<a href="https://en.wikipedia.org/wiki/Divide-and-conquer_algorithm" target="_blank" rel="noopener noreferrer">divide-and-conquer</a>）</li><li>从以上描述可以看出，一个关键在于分区算法，常见的有洛穆托分区方案、双边循环分区方案、霍尔分区方案</li></ol><p><strong>快排特点</strong></p><ol><li><p>平均时间复杂度是 <code>O(nlog_2⁡n )</code>，最坏时间复杂度 <code>O(n^2)</code></p></li><li><p>数据量较大时，优势非常明显</p></li><li><p>属于不稳定排序</p></li></ol><h3 id="插入排序" tabindex="-1"><a class="header-anchor" href="#插入排序"><span>插入排序</span></a></h3><p><strong>算法描述</strong></p><ol><li><p>将数组分为两个子集，排序的和未排序的，每一轮从未排序的子集中选出最小的元素，放入排序子集</p></li><li><p>重复以上步骤，直到整个数组有序</p></li></ol><p><strong>与选择排序比较</strong></p><ol><li><p>二者平均时间复杂度都是 <code>O(n^2)</code></p></li><li><p>大部分情况下，插入都略优于选择</p></li><li><p>有序集合插入的时间复杂度为 <code>O(n)</code></p></li><li><p>插入属于稳定排序算法，而选择属于不稳定排序</p></li></ol><p><strong>提示</strong></p><blockquote><p><em>插入排序通常被同学们所轻视，其实它的地位非常重要。小数据量排序，都会优先选择插入排序</em></p></blockquote><h2 id="微服务" tabindex="-1"><a class="header-anchor" href="#微服务"><span>微服务</span></a></h2><pre><code>注册中心、负载均衡、远程调用、服务熔断、网关\n\n注册中心：服务注册 、服务发现、服务状态监控\nNacos与Eureka的区别：Nacos集群默认采用AP方式\n</code></pre><p>负载均衡如何实现的: Ribbon 组件实现，, Feign的底层已经自动集成了Ribbon。</p><p>Ribbon负载均衡策略:轮询、权重、随机、区域敏感</p><p>服务雪崩：一个服务失败，导致整条链路的服务都失败的情形。 解决：第一个是服务降级，第二个是服务熔断，如果流量太大的话，可以考虑限流</p><p>分布式服务的接口幂等性如何设计：（保证重复调用的结果和单次调用的结果一致）。<code>token+redis</code></p><h3 id="spring-bean-生命周期" tabindex="-1"><a class="header-anchor" href="#spring-bean-生命周期"><span>Spring bean 生命周期</span></a></h3><ol><li>创建 Bean 的实例：Bean 容器首先会找到配置文件中的 Bean 定义，然后使用 Java 反射 API 来创建 Bean 的实例。</li><li>Bean 属性赋值/填充（依赖注入）：为 Bean 设置相关属性和依赖，例如@Autowired 等注解注入的对象、@Value 注入的值、setter方法或构造函数注入依赖和值、@Resource注入的各种资源。</li><li>Bean 初始化</li><li>销毁 Bean</li></ol><h3 id="spring-怎么解决循环依赖的呢" tabindex="-1"><a class="header-anchor" href="#spring-怎么解决循环依赖的呢"><span>Spring 怎么解决循环依赖的呢</span></a></h3><p>单例 Bean 初始化完成，要经历三步： 实例化、属性赋值、初始化。</p><p>注入就发生在第二步，属性赋值，结合这个过程，Spring 通过三级缓存解决了循环依赖：</p><ol><li>一级缓存 : Map&lt;String,Object&gt; singletonObjects，单例池，用于保存实例化、属性赋值（注入）、初始化完成的 bean 实例</li><li>二级缓存 : Map&lt;String,Object&gt; earlySingletonObjects，早期曝光对象，用于保存实例化完成的 bean 实例</li><li>三级缓存 : Map&lt;String,ObjectFactory&lt;?&gt;&gt; singletonFactories，早期曝光对象工厂，用于保存 bean 创建工厂，以便于后面扩展有机会创建代理对象。</li></ol><p>当 A、B 两个类发生循环依赖时:</p><ol><li>创建 A 实例，实例化的时候把 A 对象⼯⼚放⼊三级缓存，表示 A 开始实例化了，虽然我这个对象还不完整，但是先曝光出来让大家知道</li><li>A 注⼊属性时，发现依赖 B，此时 B 还没有被创建出来，所以去实例化 B</li><li>B 从三级缓存通过对象工厂，A放在二级，自己放在一级</li><li>A拿到B，A把自己放在一级缓存</li></ol><h3 id="说说什么是-aop" tabindex="-1"><a class="header-anchor" href="#说说什么是-aop"><span>说说什么是 AOP</span></a></h3><p>面向切面编程。简单说，就是把一些业务逻辑中的相同的代码抽取到一个独立的模块中，让业务逻辑更加清爽。</p><h3 id="说说-jdk-动态代理和-cglib-代理" tabindex="-1"><a class="header-anchor" href="#说说-jdk-动态代理和-cglib-代理"><span>说说 JDK 动态代理和 CGLIB 代理</span></a></h3><p>Spring 的 AOP 是通过动态代理来实现的，动态代理主要有两种方式 JDK 动态代理和 Cglib 动态代理，这两种动态代理的使用和原理有些不同。</p><p>JDK 动态代理</p><ol><li>Interface：对于 JDK 动态代理，目标类需要实现一个 Interface。</li><li>InvocationHandler：InvocationHandler 是一个接口，可以通过实现这个接口，定义横切逻辑，再通过反射机制（invoke）调用目标类的代码，在次过程，可能包装逻辑，对目标方法进行前置后置处理。</li><li>Proxy：Proxy 利用 InvocationHandler 动态创建一个符合目标类实现的接口的实例，生成目标类的代理对象。</li></ol><p>CgLib 动态代理</p><ol><li>使用 JDK 创建代理有一大限制，它只能为接口创建代理实例，而 CgLib 动态代理就没有这个限制。</li><li>CgLib 动态代理是使用字节码处理框架 ASM，其原理是通过字节码技术为一个类创建子类，并在子类中采用方法拦截的技术拦截所有父类方法的调用，顺势织入横切逻辑。</li><li>CgLib 创建的动态代理对象性能比 JDK 创建的动态代理对象的性能高不少，但是 CGLib 在创建代理对象时所花费的时间却比 JDK 多得多， 所以对于单例的对象，因为无需频繁创建对象，用 CGLib 合适，反之，使用 JDK 方式要更为合适一些。同时，由于 CGLib 由于是采用动态创建子类的方法，对于 final 方法，无法进行代理。</li></ol><h3 id="spring-管理事务的方式有几种" tabindex="-1"><a class="header-anchor" href="#spring-管理事务的方式有几种"><span>Spring 管理事务的方式有几种？</span></a></h3><ul><li>编程式事务：在代码中硬编码(在分布式系统中推荐使用) : 通过 TransactionTemplate或者 TransactionManager 手动管理事务，事务范围过大会出现事务未提交导致超时，因此事务要比锁的粒度更小。</li><li>声明式事务：在 XML 配置文件中配置或者直接基于注解（单体应用或者简单业务系统推荐使用） : 实际是通过 AOP 实现（基于@Transactional 的全注解方式使用最多）</li></ul><h3 id="springboot-自动配置原理了解吗" tabindex="-1"><a class="header-anchor" href="#springboot-自动配置原理了解吗"><span>SpringBoot 自动配置原理了解吗？</span></a></h3><p>SpringBoot 开启自动配置的注解是<code>@EnableAutoConfiguration</code> ，启动类上的注解<code>@SpringBootApplication</code>是一个复合注解，包含了<code>@EnableAutoConfiguration</code>：</p><ul><li>JVM 程序计数器：完成分支、循环、跳转、异常处理、线程恢复 方法区：存储了每一个类的结构信息。包括：运行时常量池、字段</li></ul><h2 id="jvm" tabindex="-1"><a class="header-anchor" href="#jvm"><span>JVM</span></a></h2><h3 id="jvm监控及诊断工具-命令行篇" tabindex="-1"><a class="header-anchor" href="#jvm监控及诊断工具-命令行篇"><span>JVM监控及诊断工具-命令行篇</span></a></h3><p>补充：如果某 Java 进程关闭了默认开启的UsePerfData参数（即使用参数-XX：-UsePerfData），那么jps命令（以及下面介绍的jstat）将无法探知该Java 进程。</p><ul><li>jps：查看正在运行的Java进程</li><li>jstat：查看JVM统计信息。（用于监视虚拟机各种运行状态信息的命令行工具。它可以显示本地或者远程虚拟机进程中的类装载、内存、垃圾收集、JIT编译等运行数据）</li><li>jinfo：实时查看和修改JVM配置参数。</li><li>jmap：导出内存映像文件&amp;内存使用情况</li><li>jhat：JDK自带堆分析工具。（hat命令与jmap命令搭配使用，用于分析jmap生成的heap dump文件（堆转储快照）。） 使用了jhat命令，就启动了一个http服务，端口是7000，即http://localhost:7000/，就可以在浏览器里分析。</li><li></li></ul><p>MySQL 锁</p><p>当然，MySQL中的锁是数据库管理系统用来保证数据一致性和完整性的重要机制。以下是MySQL中常见的几种锁类型：</p><ol><li><strong>乐观锁（Optimistic Locking）</strong>：这种锁不是MySQL内置的，而是通过应用程序来实现。乐观锁假设多个事务并发访问同一数据时，不会发生冲突，因此在大多数情况下不会对数据进行锁定。它通常通过版本号或时间戳来实现。</li><li><strong>悲观锁（Pessimistic Locking）</strong>：与乐观锁相反，悲观锁假设多个事务并发访问同一数据时会发生冲突，因此在数据被访问时就进行锁定。 以下是MySQL中具体的锁类型：</li><li><strong>表锁（Table Lock）</strong>： <ul><li><strong>共享锁（Shared Lock）</strong>：多个事务可以同时获取同一张表的共享锁，用于读取操作。</li><li><strong>排他锁（Exclusive Lock）</strong>：在事务对表进行写操作时使用，确保同一时间只有一个事务能对表进行写操作。</li></ul></li><li><strong>行锁（Row Lock）</strong>： <ul><li><strong>记录锁（Record Lock）</strong>：锁定特定的记录行。</li><li><strong>间隙锁（Gap Lock）</strong>：锁定一个范围，但不包括记录本身，用于防止幻读。</li><li><strong>临键锁（Next-Key Lock）</strong>：是记录锁和间隙锁的组合，锁定一个范围，并且包括记录本身。</li></ul></li><li><strong>意向锁（Intention Lock）</strong>： <ul><li><strong>意向共享锁（Intention Shared Lock）</strong>：表示事务打算在表中的某些行上设置共享锁。</li><li><strong>意向排他锁（Intention Exclusive Lock）</strong>：表示事务打算在表中的某些行上设置排他锁。</li></ul></li><li><strong>自增锁（AUTO-INC Lock）</strong>：在插入数据时，为了保持自增字段的连续性，MySQL会对表施加自增锁。 锁的粒度不同，对性能的影响也不同。表锁的开销较小，但并发性能较差；行锁的开销较大，但并发性能较好。在实际使用中，应根据具体场景选择合适的锁策略。</li></ol><h2 id="mq" tabindex="-1"><a class="header-anchor" href="#mq"><span>MQ</span></a></h2><p>https://tobebetterjavaer.com/sidebar/sanfene/rocketmq.html#_7-roctetmq%E5%9F%BA%E6%9C%AC%E6%9E%B6%E6%9E%84%E4%BA%86%E8%A7%A3%E5%90%97</p><ul><li><p>AOP<br> 面向切面编程，用于将那些与业务无关，但却对多个对象产生影响的公共行为和逻辑，抽取公共模块复用，降低耦合。</p></li><li><p>spring Bean 的生命周期 ① 通过 BeanDefinition 获取 bean 的定义信息 ② 调用构造函数实例化 bean ③ bean 的依赖注入 ④ 处理 Aware 接口 (BeanNameAware 、 BeanFactoryAware 、 ApplicationContextAware) ⑤ Bean 的后置处理器 BeanPostProcessor- 前置 ⑥ 初始化方法 (InitializingBean 、 init-method) ⑦ Bean 的后置处理器 BeanPostProcessor- 后置 ⑧ 销毁 bean</p></li><li><p>三级缓存 ABA A加载A，A放在三级缓存，创建B也放在三级缓存，B请求注入A，Spring容器从三级缓存中获取A的工厂对象，放在二级缓存，返回给B。 B，完成后放在一级缓存。 A在直接加载B</p></li><li><p>线上服务CPU彪高： top -&gt; top -Hp ID -&gt; printf &quot;%x\\n&quot; PID (把线程 ID 转换为 16 进制) -&gt; jstack PID 打印出进程的所有线程信息 -&gt; 最后根据线程的堆栈信息定位到具体业务方法,从代码逻辑中找到问题所在。</p></li><li><p>三次握手 客户端–发送带有 SYN 标志的数据包–一次握手–服务端 服务端–发送带有 SYN/ACK 标志的数据包–二次握手–客户端 客户端–发送带有带有 ACK 标志的数据包–三次握手–服务端</p></li><li><p>RocketMQ的整体工作流程？ Broker在启动的时候去向所有的NameServer注册，并保持长连接，每30s发送一次心跳 Producer在发送消息的时候从NameServer获取Broker服务器地址，根据负载均衡算法选择一台服务器来发送消息 Conusmer消费消息的时候同样从NameServer获取Broker地址，然后主动拉取消息来消费 排查问题 CPU 过高</p></li></ul><p>top 列出系统各个进程的资源占用情况。 top -Hp 进程 ID 列出对应进程里面的线程占用资源情况 printf &quot;%x\\n&quot; PID 把线程 ID 转换为 16 进制。 jstack PID 打印出进程的所有线程信息，从打印出来的线程信息中找到上一步转换为 16 进制的线程 ID 对应的线程信息。 最后根据线程的堆栈信息定位到具体业务方法,从代码逻辑中找到问题所在。</p><p>MQ高并发</p><ul><li>RocketMQ 发布-订阅模型 ，生产者、消费者和主题 RocketMQ 一共有四个部分组成：NameServer(和Broker 结点保持长连接、维护 Topic 的路由信息)，Broker(消息存储和中转角色，负责存储和转发消息)，Producer 生产者，Consumer 消费者，它们对应了：发现、发、存、收，为了保证高可用，一般每一部分都是集群部署的。</li></ul><p>1、现场环境查看JVM运行情况 2、快速排序 3、JVM调优 4、现场遇到的问题排查</p>',79),d={},c=(0,l(66262).A)(d,[["render",function(e,i){const l=(0,n.g2)("font");return(0,n.uX)(),(0,n.CE)("div",null,[s,(0,n.Lk)("ul",null,[r,(0,n.Lk)("li",null,[(0,n.eW)("写操作："),(0,n.Lk)("strong",null,[(0,n.bF)(l,{color:"Red"},{default:(0,n.k6)((()=>[(0,n.eW)("延迟双删")])),_:1})])])]),o,t,a,(0,n.Lk)("p",null,[(0,n.Lk)("strong",null,[(0,n.bF)(l,{color:"Red"},{default:(0,n.k6)((()=>[(0,n.eW)("强一致性的")])),_:1})]),(0,n.eW)("，采用Redisson提供的读写锁 ① 共享锁: 读锁readLock，加锁之后，其他线程可以共享读操作 ② 排他锁:独占锁writeLock也叫，加锁之后，阻塞其他线程读写操作")]),p])}]]),h=JSON.parse('{"path":"/note-record/","title":"学习笔记总结","lang":"zh-CN","frontmatter":{"title":"学习笔记总结","category":"学习笔记","description":"笔记的总览。将学习的知识点总结和归纳。 1、你们项目中有没有做过限流 ? 怎么做的 ? 漏铜算法、令牌桶 Redis 1、集群方式 主从复制：读写分离。（全量同步，增量同步）。保证不了高可用 哨兵模式：实现主从集群的自动故障恢复(监控、自动故障恢复、通知) 分片集群：解决海量数据，高并发。集群中有多个master，每个master保存不同数据。引入了哈...","head":[["meta",{"property":"og:url","content":"https://mister-hope.github.io/blog/note-record/"}],["meta",{"property":"og:site_name","content":"撄宁的博客"}],["meta",{"property":"og:title","content":"学习笔记总结"}],["meta",{"property":"og:description","content":"笔记的总览。将学习的知识点总结和归纳。 1、你们项目中有没有做过限流 ? 怎么做的 ? 漏铜算法、令牌桶 Redis 1、集群方式 主从复制：读写分离。（全量同步，增量同步）。保证不了高可用 哨兵模式：实现主从集群的自动故障恢复(监控、自动故障恢复、通知) 分片集群：解决海量数据，高并发。集群中有多个master，每个master保存不同数据。引入了哈..."}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:locale","content":"zh-CN"}],["meta",{"property":"og:updated_time","content":"2024-08-12T03:33:55.000Z"}],["meta",{"property":"article:author","content":"樱宁"}],["meta",{"property":"article:modified_time","content":"2024-08-12T03:33:55.000Z"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"学习笔记总结\\",\\"image\\":[\\"\\"],\\"dateModified\\":\\"2024-08-12T03:33:55.000Z\\",\\"author\\":[{\\"@type\\":\\"Person\\",\\"name\\":\\"樱宁\\",\\"url\\":\\"https://mister-hope.com\\"}]}"]]},"headers":[{"level":2,"title":"Redis","slug":"redis","link":"#redis","children":[{"level":3,"title":"1、集群方式","slug":"_1、集群方式","link":"#_1、集群方式","children":[]},{"level":3,"title":"2、Redis 的集群方案 - 主从复制 （保证不了高可用）","slug":"_2、redis-的集群方案-主从复制-保证不了高可用","link":"#_2、redis-的集群方案-主从复制-保证不了高可用","children":[]},{"level":3,"title":"3、Redis作为缓存，MySQL的数据如何与Redis进行同步呢？","slug":"_3、redis作为缓存-mysql的数据如何与redis进行同步呢","link":"#_3、redis作为缓存-mysql的数据如何与redis进行同步呢","children":[]},{"level":3,"title":"4、为什么使用Redisson实现分布式锁而不是直接使用Redis的SETNX命令的原因？","slug":"_4、为什么使用redisson实现分布式锁而不是直接使用redis的setnx命令的原因","link":"#_4、为什么使用redisson实现分布式锁而不是直接使用redis的setnx命令的原因","children":[]},{"level":3,"title":"5、持久化方式 RDB、AOF","slug":"_5、持久化方式-rdb、aof","link":"#_5、持久化方式-rdb、aof","children":[]},{"level":3,"title":"6、Redis的数据过期策略","slug":"_6、redis的数据过期策略","link":"#_6、redis的数据过期策略","children":[]},{"level":3,"title":"7、Redis是单线程的，但是为什么还那么快？","slug":"_7、redis是单线程的-但是为什么还那么快","link":"#_7、redis是单线程的-但是为什么还那么快","children":[]}]},{"level":2,"title":"RocketMQ","slug":"rocketmq","link":"#rocketmq","children":[{"level":3,"title":"1、用途","slug":"_1、用途","link":"#_1、用途","children":[]},{"level":3,"title":"2、系统架构","slug":"_2、系统架构","link":"#_2、系统架构","children":[]},{"level":3,"title":"保证不丢失","slug":"保证不丢失","link":"#保证不丢失","children":[]},{"level":3,"title":"重复消费问题","slug":"重复消费问题","link":"#重复消费问题","children":[]},{"level":3,"title":"消息堆积","slug":"消息堆积","link":"#消息堆积","children":[]}]},{"level":2,"title":"算法","slug":"算法","link":"#算法","children":[{"level":3,"title":"快速排序","slug":"快速排序","link":"#快速排序","children":[]},{"level":3,"title":"插入排序","slug":"插入排序","link":"#插入排序","children":[]}]},{"level":2,"title":"微服务","slug":"微服务","link":"#微服务","children":[{"level":3,"title":"Spring bean 生命周期","slug":"spring-bean-生命周期","link":"#spring-bean-生命周期","children":[]},{"level":3,"title":"Spring 怎么解决循环依赖的呢","slug":"spring-怎么解决循环依赖的呢","link":"#spring-怎么解决循环依赖的呢","children":[]},{"level":3,"title":"说说什么是 AOP","slug":"说说什么是-aop","link":"#说说什么是-aop","children":[]},{"level":3,"title":"说说 JDK 动态代理和 CGLIB 代理","slug":"说说-jdk-动态代理和-cglib-代理","link":"#说说-jdk-动态代理和-cglib-代理","children":[]},{"level":3,"title":"Spring 管理事务的方式有几种？","slug":"spring-管理事务的方式有几种","link":"#spring-管理事务的方式有几种","children":[]},{"level":3,"title":"SpringBoot 自动配置原理了解吗？","slug":"springboot-自动配置原理了解吗","link":"#springboot-自动配置原理了解吗","children":[]}]},{"level":2,"title":"JVM","slug":"jvm","link":"#jvm","children":[{"level":3,"title":"JVM监控及诊断工具-命令行篇","slug":"jvm监控及诊断工具-命令行篇","link":"#jvm监控及诊断工具-命令行篇","children":[]}]},{"level":2,"title":"MQ","slug":"mq","link":"#mq","children":[]}],"git":{"createdTime":1722093117000,"updatedTime":1723433635000,"contributors":[{"name":"jiang","email":"948742327@qq.com","commits":8},{"name":"jiangyunfei","email":"jiangyunfei@thunisoft.com","commits":3}]},"readingTime":{"minutes":17.56,"words":5268},"filePathRelative":"note-record/README.md","localizedDate":"2024年7月27日","excerpt":"<p>笔记的总览。将学习的知识点总结和归纳。</p>\\n<ul>\\n<li>1、你们项目中有没有做过限流 ? 怎么做的 ?\\n漏铜算法、令牌桶</li>\\n</ul>\\n<h2>Redis</h2>\\n<h3>1、集群方式</h3>\\n<ul>\\n<li>主从复制：读写分离。（全量同步，增量同步）。保证不了高可用</li>\\n<li>哨兵模式：实现主从集群的自动故障恢复(监控、自动故障恢复、通知)</li>\\n<li>分片集群：解决海量数据，高并发。集群中有多个master，每个master保存不同数据。引入了哈希槽的概念</li>\\n</ul>\\n<h3>2、Redis 的集群方案 - 主从复制 （保证不了高可用）</h3>","autoDesc":true}')}}]);