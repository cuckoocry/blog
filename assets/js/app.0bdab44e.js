"use strict";(self.webpackChunkblogs2=self.webpackChunkblogs2||[]).push([[3524],{1709:(i,s,e)=>{e.d(s,{l:()=>n});const n={category:{"/":{path:"/category/",map:{博客:{path:"/category/%E5%8D%9A%E5%AE%A2/",indexes:[0]},Python:{path:"/category/python/",indexes:[1]},作者:{path:"/category/%E4%BD%9C%E8%80%85/",indexes:[2]},使用指南:{path:"/category/%E4%BD%BF%E7%94%A8%E6%8C%87%E5%8D%97/",indexes:[3,4,5,6,7]},指南:{path:"/category/%E6%8C%87%E5%8D%97/",indexes:[8]},面试:{path:"/category/%E9%9D%A2%E8%AF%95/",indexes:[9,10,11,12,13,14,15,16,17]},面试指南:{path:"/category/%E9%9D%A2%E8%AF%95%E6%8C%87%E5%8D%97/",indexes:[18,19]},樱桃:{path:"/category/%E6%A8%B1%E6%A1%83/",indexes:[20]},火龙果:{path:"/category/%E7%81%AB%E9%BE%99%E6%9E%9C/",indexes:[21]},水果:{path:"/category/%E6%B0%B4%E6%9E%9C/",indexes:[22,21]},草莓:{path:"/category/%E8%8D%89%E8%8E%93/",indexes:[22]},蔬菜:{path:"/category/%E8%94%AC%E8%8F%9C/",indexes:[23]},文件下载:{path:"/category/%E6%96%87%E4%BB%B6%E4%B8%8B%E8%BD%BD/",indexes:[24]},code:{path:"/category/code/",indexes:[25,26]},开发工具:{path:"/category/%E5%BC%80%E5%8F%91%E5%B7%A5%E5%85%B7/",indexes:[27]},IDEA:{path:"/category/idea/",indexes:[28,29]},代码实践:{path:"/category/%E4%BB%A3%E7%A0%81%E5%AE%9E%E8%B7%B5/",indexes:[30]},redisson:{path:"/category/redisson/",indexes:[31]},分布式锁:{path:"/category/%E5%88%86%E5%B8%83%E5%BC%8F%E9%94%81/",indexes:[31]},学习笔记:{path:"/category/%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/",indexes:[32,33,34,35,36,37,38,39,40,41,42]},Vue系列:{path:"/category/vue%E7%B3%BB%E5%88%97/",indexes:[43,44]},JUC:{path:"/category/juc/",indexes:[45,46,47,48,49,50,51,52,53,54,55,56,57,58,59]},线程池:{path:"/category/%E7%BA%BF%E7%A8%8B%E6%B1%A0/",indexes:[60]},GitHub:{path:"/category/github/",indexes:[61]}}}},tag:{"/":{path:"/tag/",map:{禁用:{path:"/tag/%E7%A6%81%E7%94%A8/",indexes:[5]},加密:{path:"/tag/%E5%8A%A0%E5%AF%86/",indexes:[6]},布局:{path:"/tag/%E5%B8%83%E5%B1%80/",indexes:[8]},Markdown:{path:"/tag/markdown/",indexes:[7]},页面配置:{path:"/tag/%E9%A1%B5%E9%9D%A2%E9%85%8D%E7%BD%AE/",indexes:[3]},使用指南:{path:"/tag/%E4%BD%BF%E7%94%A8%E6%8C%87%E5%8D%97/",indexes:[3]},红:{path:"/tag/%E7%BA%A2/",indexes:[23,22,21,20]},小:{path:"/tag/%E5%B0%8F/",indexes:[22,20]},圆:{path:"/tag/%E5%9C%86/",indexes:[23,20]},大:{path:"/tag/%E5%A4%A7/",indexes:[21]},Git:{path:"/tag/git/",indexes:[27]},PDF文件合并:{path:"/tag/pdf%E6%96%87%E4%BB%B6%E5%90%88%E5%B9%B6/",indexes:[30]},redisson:{path:"/tag/redisson/",indexes:[31]},JUC:{path:"/tag/juc/",indexes:[45,62,40,47,57,58,59]},CAS:{path:"/tag/cas/",indexes:[62,47]},ABA问题:{path:"/tag/aba%E9%97%AE%E9%A2%98/",indexes:[62]},Volatile:{path:"/tag/volatile/",indexes:[45,40,57,58,59]},BlockingQueue:{path:"/tag/blockingqueue/",indexes:[46]},CyclicBarrier:{path:"/tag/cyclicbarrier/",indexes:[33]},Semaphore:{path:"/tag/semaphore/",indexes:[34]},CountDownLatch:{path:"/tag/countdownlatch/",indexes:[35]},OOM:{path:"/tag/oom/",indexes:[48]},Java中的引用:{path:"/tag/java%E4%B8%AD%E7%9A%84%E5%BC%95%E7%94%A8/",indexes:[49]},死锁:{path:"/tag/%E6%AD%BB%E9%94%81/",indexes:[50,52,53,55]},垃圾收集器:{path:"/tag/%E5%9E%83%E5%9C%BE%E6%94%B6%E9%9B%86%E5%99%A8/",indexes:[51]},Linux诊断原因:{path:"/tag/linux%E8%AF%8A%E6%96%AD%E5%8E%9F%E5%9B%A0/",indexes:[54]},Synchronized:{path:"/tag/synchronized/",indexes:[56]},Lock:{path:"/tag/lock/",indexes:[56]},线程池:{path:"/tag/%E7%BA%BF%E7%A8%8B%E6%B1%A0/",indexes:[60]},GitHub:{path:"/tag/github/",indexes:[61]},锁:{path:"/tag/%E9%94%81/",indexes:[36,37,38,39,41,42]}}}}}},4776:(i,s,e)=>{e.d(s,{M:()=>n});const n=["/about-the-blogs/about-blogs.html","/about-the-blogs/about-learn.html","/about-the-blogs/","/demo/page.html","/demo/","/demo/disable.html","/demo/encrypt.html","/demo/markdown.html","/demo/layout.html","/interview-related/","/interview-related/java-thread.html","/interview-related/jvm.html","/interview-related/mybatis.html","/interview-related/mysql.html","/interview-related/network.html","/interview-related/redis.html","/interview-related/rocketMQ.html","/interview-related/spring.html","/interview-related/collection.html","/interview-related/javase.html","/posts/cherry.html","/posts/dragonfruit.html","/posts/strawberry.html","/posts/tomato.html","/problem-record/HTTPInputStreamExample.html","/problem-record/miscellaneous-notes.html","/problem-record/delete-more-iif.html","/problem-record/github-tips.html","/problem-record/idea-template.html","/problem-record/idea-tool.html","/problem-record/merge-pdf.html","/problem-record/redission.html","/study-notes/","/study-notes/shangguigu-second/CountDownLatch_CyclicBarrier_Semaphore/CyclicBarrier.html","/study-notes/shangguigu-second/CountDownLatch_CyclicBarrier_Semaphore/Semaphore.html","/study-notes/shangguigu-second/CountDownLatch_CyclicBarrier_Semaphore/countDownLatch.html","/study-notes/shangguigu-second/lock/five.html","/study-notes/shangguigu-second/lock/four.html","/study-notes/shangguigu-second/lock/one.html","/study-notes/shangguigu-second/lock/six.html","/study-notes/shangguigu-second/ArrayList/","/study-notes/shangguigu-second/lock/three.html","/study-notes/shangguigu-second/lock/two.html","/vue/advanced.html","/vue/basics.html","/study-notes/shangguigu-second/volatile/one.html","/study-notes/shangguigu-second/BlockingQueue/","/study-notes/shangguigu-second/CAS/","/study-notes/shangguigu-second/JVM/five.html","/study-notes/shangguigu-second/JVM/four.html","/study-notes/shangguigu-second/JVM/one.html","/study-notes/shangguigu-second/JVM/six.html","/study-notes/shangguigu-second/JVM/three.html","/study-notes/shangguigu-second/JVM/two.html","/study-notes/shangguigu-second/Linux/","/study-notes/shangguigu-second/SiSuo/","/study-notes/shangguigu-second/Synchronized-Lock/","/study-notes/shangguigu-second/volatile/four.html","/study-notes/shangguigu-second/volatile/three.html","/study-notes/shangguigu-second/volatile/two.html","/study-notes/shangguigu-second/ThreadPool/","/study-notes/shangguigu-second/github/","/study-notes/shangguigu-second/ABA/","/intro.html","/problem-record/interview-transcripts.html","/problem-record/tool.html"]},3781:(i,s,e)=>{e.d(s,{U:()=>n});const n={article:{"/":{path:"/article/",indexes:[23,3,27,43,44,63,0,1,2,4,5,6,8,7,9,18,10,19,11,12,13,14,15,16,17,32,64,25,31,24,30,60,33,34,35,36,37,38,39,45,62,40,46,47,48,49,50,51,52,53,54,55,56,61,41,42,57,58,59,26,28,29,65,22,21,20]}},star:{"/":{path:"/star/",indexes:[23,3]}},timeline:{"/":{path:"/timeline/",indexes:[27,43,44,63,0,1,2,4,5,6,8,7,9,18,10,19,11,12,13,14,15,16,17,32,64,25,31,24,30,60,33,34,35,36,37,38,39,45,62,40,46,47,48,49,50,51,52,53,54,55,56,61,41,42,57,58,59,26,28,23,29,65,22,21,20,3]}}}},3600:(i,s,e)=>{e.d(s,{B:()=>j});var n={};e.r(n);var a={};e.r(a);var t={};e.r(t),e.d(t,{default:()=>g});var l={};e.r(l),e.d(l,{default:()=>D});var h={};e.r(h),e.d(h,{default:()=>L});var r=e(8278),p=e(3812),d=e(3073),o=e(9403),c=e(596),k=e(8831);const g=(0,r.re)({enhance:({app:i})=>{(0,p.L4)("FontIcon")||i.component("FontIcon",o.A),(0,p.L4)("Badge")||i.component("Badge",c.A),(0,p.L4)("VPCard")||i.component("VPCard",k.A)},setup:()=>{(0,d.r9V)("https://cdn.jsdelivr.net/npm/@fortawesome/fontawesome-free@6/js/brands.min.js",(()=>{}),{attrs:{"data-auto-replace-svg":"nest"}}),(0,d.r9V)("https://cdn.jsdelivr.net/npm/@fortawesome/fontawesome-free@6/js/solid.min.js",(()=>{}),{attrs:{"data-auto-replace-svg":"nest"}}),(0,d.r9V)("https://cdn.jsdelivr.net/npm/@fortawesome/fontawesome-free@6/js/fontawesome.min.js",(()=>{}),{attrs:{"data-auto-replace-svg":"nest"}})},rootComponents:[]});var u=e(6358),m=e(9588),A=e(355),y=e(1599),B=e(5496),b=e(457),v=e(7152),E=e(5214),C=e(1219),F=e(3027),f=e(2763),w=e(9589);const D=(0,r.re)({enhance:({app:i})=>{i.component("CodeTabs",v.A),(0,p.L4)("CodeGroup",i)||i.component("CodeGroup",E.lF),(0,p.L4)("CodeGroupItem",i)||i.component("CodeGroupItem",E.E7),i.component("CodeDemo",C.A),i.component("MdDemo",F.A),i.component("Tabs",w.A)},setup:()=>{(0,f.p)()}});var x=e(3004),S=e(783),I=e(8465),M=e(641),J=e(8030),_=e(9920);(0,I.M_)((i=>{const s=i.t,e=!1!==i.I,n=i.i;return e?{title:s,content:n?()=>[(0,M.h)(S.GB,{icon:n}),s]:null,order:i.O,index:i.I}:null}));const L=(0,r.re)({enhance:({app:i,router:s})=>{const{scrollBehavior:e}=s.options;s.options.scrollBehavior=async(...i)=>(await S.lE.wait(),e(...i)),(0,S.fk)(i),i.component("HopeIcon",S.GB),i.component("BloggerInfo",J.tI),i.component("SocialMedias",J.rS),i.component("GlobalEncrypt",_.J),i.component("LocalEncrypt",_.n)},setup:()=>{(0,S.PV)(),(0,S.i$)(),(0,J.su)()},layouts:{Layout:S.PE,NotFound:S.Mk,BlogCategory:J.Pn,BlogHome:J.qX,BlogType:J.z7,Timeline:J.Kf}}),j=[n,a,t,u,m,A,y,B,b,l,x,h].map((i=>i.default)).filter(Boolean)},8164:(i,s,e)=>{e.d(s,{J:()=>a,c:()=>n});const n=JSON.parse("{}"),a=Object.fromEntries([["/",{loader:()=>e.e(4470).then(e.bind(e,6948)),meta:{t:"博客主页",i:"home"}}],["/intro.html",{loader:()=>e.e(3912).then(e.bind(e,9416)),meta:{d:1722072119e3,v:"/assets/images/cover3.jpg",e:"\n<p>将你的个人介绍和档案放置在此处。</p>\n",r:{minutes:.08,words:23},t:"介绍页",i:"circle-info",y:"a"}}],["/about-the-blogs/about-blogs.html",{loader:()=>e.e(175).then(e.bind(e,9169)),meta:{d:1722072119e3,c:"博客",e:'<h3>关于博客</h3>\n<p>主要用于记录工作中重要的信息何止是。面得以往</p>\n<h3>优秀真实博客案列</h3>\n<p><a href="https://theme-hope.vuejs.press/zh/demo/projects.html#%E4%BD%BF%E7%94%A8-vuepress-theme-hope-%E7%9A%84%E5%8D%9A%E5%AE%A2" target="_blank" rel="noopener noreferrer">优秀真实博客案列</a></p>\n<div class="language-java line-numbers-mode" data-highlighter="shiki" data-ext="java" data-title="java" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"></span></code></pre>\n<div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0"><div class="line-number"></div></div></div>',r:{minutes:.23,words:69},t:"介绍",y:"a"}}],["/about-the-blogs/about-learn.html",{loader:()=>e.e(4148).then(e.bind(e,6185)),meta:{d:1722072119e3,c:"Python",e:'<div class="hint-container tip">\n<p class="hint-container-title">提示</p>\n<p>1、 https://www.w3schools.com/</p>\n<blockquote>\n<p>jaignyunfei888@gmail.com</p>\n</blockquote>\n<p>2、 https://www.w3school.com.cn/python/python_intro.asp\n3、 https://www.runoob.com/python3/python3-tutorial.html\n4、 https://docs.python.org/3/tutorial/index.html\n5、 https://www.programiz.com/python-programming/first-program</p>\n</div>',r:{minutes:5.11,words:1532},t:"编程语言",y:"a"}}],["/about-the-blogs/",{loader:()=>e.e(5162).then(e.bind(e,5882)),meta:{d:1722072119e3,c:"作者",r:{minutes:.02,words:6},t:"介绍",y:"a"}}],["/demo/",{loader:()=>e.e(3320).then(e.bind(e,2410)),meta:{d:1722072119e3,c:["使用指南"],r:{minutes:.07,words:22},t:"主要功能与配置演示",i:"laptop-code",y:"a"}}],["/demo/disable.html",{loader:()=>e.e(2756).then(e.bind(e,7383)),meta:{d:1722072119e3,c:["使用指南"],g:["禁用"],e:"<p>你可以通过设置页面的 Frontmatter，在页面禁用功能与布局。</p>\n",r:{minutes:.43,words:128},t:"布局与功能禁用",i:"gears",O:4,y:"a"}}],["/demo/encrypt.html",{loader:()=>e.e(2581).then(e.bind(e,4429)),meta:{d:1722072119e3,c:["使用指南"],g:["加密"],n:!0,r:{minutes:.51,words:154},t:"密码加密的文章",i:"lock",y:"a"}}],["/demo/layout.html",{loader:()=>e.e(6216).then(e.bind(e,6361)),meta:{d:1722072119e3,c:["指南"],g:["布局"],e:'<p>布局包括:</p>\n<ul>\n<li><a href="https://theme-hope.vuejs.press/zh/guide/layout/navbar.html" target="_blank" rel="noopener noreferrer">导航栏</a></li>\n<li><a href="https://theme-hope.vuejs.press/zh/guide/layout/sidebar.html" target="_blank" rel="noopener noreferrer">侧边栏</a></li>\n<li><a href="https://theme-hope.vuejs.press/zh/guide/layout/footer.html" target="_blank" rel="noopener noreferrer">页脚</a></li>\n</ul>',r:{minutes:.53,words:159},t:"布局",i:"object-group",O:2,y:"a"}}],["/demo/markdown.html",{loader:()=>e.e(8711).then(e.bind(e,9618)),meta:{d:1722072119e3,c:["使用指南"],g:["Markdown"],e:"<p>VuePress 主要从 Markdown 文件生成页面。因此，你可以使用它轻松生成文档或博客站点。</p>\n<p>你需要创建并编写 Markdown，以便 VuePress 可以根据文件结构将它们转换为不同的页面。</p>\n",r:{minutes:3.51,words:1053},t:"Markdown 展示",i:"fab fa-markdown",O:2,y:"a"}}],["/demo/page.html",{loader:()=>e.e(645).then(e.bind(e,2242)),meta:{a:"Ms.Hope",d:15778368e5,l:"2020年1月1日",c:["使用指南"],g:["页面配置","使用指南"],u:!0,v:"/assets/images/cover1.jpg",e:"<p><code>more</code> 注释之前的内容被视为文章摘要。</p>\n",r:{minutes:1.76,words:529},t:"页面配置",i:"file",O:3,y:"a"}}],["/interview-related/",{loader:()=>e.e(6616).then(e.bind(e,9581)),meta:{d:1722072119e3,c:"面试",e:'<div class="hint-container tip">\n<p class="hint-container-title">提示</p>\n<p>Be a better version of yourself</p>\n</div>\n<h2>概述</h2>\n<p>该篇章主要是收集的面试题，然后通过学习去完善结果。</p>\n<p>1、mysql索引。分库分表，in，exist的区别\n2、Redis\n3、RocketMQ\n4、基础再过</p>\n<p>1、JVM\n2、数据库\n3、spring\n4、RocketMQ\n5、IO</p>\n<h3>1、MySQL中exists和in的区别</h3>\n<p>https://blog.csdn.net/taomeechildren/article/details/128922688#:~:text=exists%E5%8F%AA%E6%9C%89%E5%86%85%E8%A1%A8%E5%8F%AF%E4%BB%A5%E7%94%A8%E4%B8%8A%E7%B4%A2%E5%BC%95%20%EF%BC%8C%E5%A4%96%E5%B1%82%E5%BE%AA%E7%8E%AF%E5%BF%85%E9%A1%BB%E8%A6%81%E8%B5%B0%E4%B8%80%E4%B8%AA%E9%81%8D%E5%8E%86%E8%BF%87%E7%A8%8B%EF%BC%9B%20%E8%80%8Cin%E5%86%85%E8%A1%A8%E5%92%8C%E5%A4%96%E8%A1%A8%E9%83%BD%E5%8F%AF%E4%BB%A5%E7%94%A8%E4%B8%8A%E7%B4%A2%E5%BC%95%20%EF%BC%8C%E5%9B%A0%E4%B8%BAin%E6%9C%AC%E8%B4%A8%E4%B8%8A%E5%B1%9E%E4%BA%8E%E5%A4%9A%E4%B8%AA%20%E6%9D%A1%E4%BB%B6%E6%9F%A5%E8%AF%A2%20%E7%9A%84%E5%B9%B6%E9%9B%86%20%28or%29%E3%80%82%20%E5%A6%82%E4%BD%95%E9%80%89%E7%94%A8,%EF%BC%9F%20%E5%BD%93%E4%B8%A4%E4%B8%AA%E8%A1%A8%E7%9A%84%E5%A4%A7%E5%B0%8F%E7%9B%B8%E5%BD%93%E6%97%B6%EF%BC%8C%E7%94%A8exists%E5%92%8Cin%E7%9A%84%E6%95%88%E7%8E%87%E5%B7%AE%E5%88%AB%E4%B8%8D%E5%A4%A7%E3%80%82%20%E5%A6%82%E6%9E%9C%E4%B8%A4%E4%B8%AA%E8%A1%A8%E4%B8%80%E4%B8%AA%E5%A4%A7%E4%B8%80%E4%B8%AA%E5%B0%8F%EF%BC%8C%E5%88%99%20%E5%AD%90%E6%9F%A5%E8%AF%A2%E8%A1%A8%20%28%E5%8D%B3%E5%86%85%E8%A1%A8%29%E5%A4%A7%E7%9A%84%E7%94%A8exists%EF%BC%8C%E5%AD%90%E6%9F%A5%E8%AF%A2%E8%A1%A8%20%28%E5%8D%B3%E5%86%85%E8%A1%A8%29%E5%B0%8F%E7%9A%84%E7%94%A8in%20%E3%80%82%20%E5%85%B6%E5%AE%9E%E5%B0%B1%E6%98%AF%E2%80%9D%E5%B0%8F%E8%A1%A8%E9%A9%B1%E5%8A%A8%E5%A4%A7%E8%A1%A8%E2%80%9C%E7%9A%84%E6%80%9D%E6%83%B3%EF%BC%9A%E7%94%A8exist%E6%97%B6%E5%A4%96%E8%A1%A8%E6%98%AF%E9%A9%B1%E5%8A%A8%E8%A1%A8%EF%BC%8C%E7%94%A8in%E6%97%B6%E5%86%85%E8%A1%A8%E6%98%AF%E9%A9%B1%E5%8A%A8%E8%A1%A8%E3%80%82</p>',r:{minutes:2.2,words:659},t:"Java学习&面试指南",y:"a"}}],["/interview-related/collection.html",{loader:()=>e.e(2174).then(e.bind(e,1244)),meta:{d:1722072119e3,c:"面试指南",e:'<div class="hint-container tip">\n<p class="hint-container-title">提示</p>\n<p>Be a better version of yourself</p>\n</div>\n<h2>概述</h2>\n<p>该篇章主要是收集的面试题，然后通过学习去完善结果。</p>\n',r:{minutes:.16,words:49},t:"面试指南-Java集合框架",O:2,y:"a"}}],["/interview-related/java-thread.html",{loader:()=>e.e(4847).then(e.bind(e,6658)),meta:{d:1722072119e3,c:"面试",e:'<div class="hint-container tip">\n<p class="hint-container-title">提示</p>\n<p>Be a better version of yourself</p>\n</div>\n<h2>概述</h2>\n<p>该篇章主要是收集的面试题，然后通过学习去完善结果。</p>\n',r:{minutes:.16,words:47},t:"面试指南-Java并发编程",O:3,y:"a"}}],["/interview-related/javase.html",{loader:()=>e.e(6906).then(e.bind(e,6437)),meta:{d:1722072119e3,c:"面试指南",e:'<div class="hint-container tip">\n<p class="hint-container-title">提示</p>\n<p>Be a better version of yourself</p>\n</div>\n<h2>概述</h2>\n<p>该篇章主要是收集的面试题，然后通过学习去完善结果。</p>\n',r:{minutes:.16,words:47},t:"面试指南-java基础",O:1,y:"a"}}],["/interview-related/jvm.html",{loader:()=>e.e(4391).then(e.bind(e,208)),meta:{d:1722072119e3,c:"面试",e:'<div class="hint-container tip">\n<p class="hint-container-title">提示</p>\n<p>Be a better version of yourself</p>\n</div>\n<h2>概述</h2>\n<p>该篇章主要是收集的面试题，然后通过学习去完善结果。</p>\n',r:{minutes:.14,words:43},t:"面试指南-JVM",O:4,y:"a"}}],["/interview-related/mybatis.html",{loader:()=>e.e(6753).then(e.bind(e,3012)),meta:{d:1722072119e3,c:"面试",e:'<div class="hint-container tip">\n<p class="hint-container-title">提示</p>\n<p>Be a better version of yourself</p>\n</div>\n<h2>概述</h2>\n<p>该篇章主要是收集的面试题，然后通过学习去完善结果。</p>\n',r:{minutes:.14,words:43},t:"面试指南-MyBatis",O:7,y:"a"}}],["/interview-related/mysql.html",{loader:()=>e.e(5014).then(e.bind(e,4966)),meta:{d:1722072119e3,c:"面试",e:'<div class="hint-container tip">\n<p class="hint-container-title">提示</p>\n<p>Be a better version of yourself</p>\n</div>\n<h2>概述</h2>\n<p>该篇章主要是收集的面试题，然后通过学习去完善结果。</p>\n',r:{minutes:.14,words:43},t:"面试指南-MySQL",O:6,y:"a"}}],["/interview-related/network.html",{loader:()=>e.e(7134).then(e.bind(e,9965)),meta:{d:1722072119e3,c:"面试",e:'<div class="hint-container tip">\n<p class="hint-container-title">提示</p>\n<p>Be a better version of yourself</p>\n</div>\n<h2>概述</h2>\n<p>该篇章主要是收集的面试题，然后通过学习去完善结果。</p>\n',r:{minutes:.16,words:47},t:"面试指南-计算机网络",O:7,y:"a"}}],["/interview-related/redis.html",{loader:()=>e.e(2623).then(e.bind(e,9159)),meta:{d:1722072119e3,c:"面试",e:'<div class="hint-container tip">\n<p class="hint-container-title">提示</p>\n<p>Be a better version of yourself</p>\n</div>\n<h2>概述</h2>\n<p>该篇章主要是收集的面试题，然后通过学习去完善结果。</p>\n',r:{minutes:.14,words:43},t:"面试指南-Redis",O:6,y:"a"}}],["/interview-related/rocketMQ.html",{loader:()=>e.e(2984).then(e.bind(e,5934)),meta:{d:1722072119e3,c:"面试",e:'<div class="hint-container tip">\n<p class="hint-container-title">提示</p>\n<p>Be a better version of yourself</p>\n</div>\n<h2>概述</h2>\n<p>该篇章主要是收集的面试题，然后通过学习去完善结果。</p>\n',r:{minutes:.14,words:43},t:"面试指南-RocketMQ",O:8,y:"a"}}],["/interview-related/spring.html",{loader:()=>e.e(7299).then(e.bind(e,523)),meta:{d:1722072119e3,c:"面试",e:'<div class="hint-container tip">\n<p class="hint-container-title">提示</p>\n<p>Be a better version of yourself</p>\n</div>\n<h2>概述</h2>\n<p>该篇章主要是收集的面试题，然后通过学习去完善结果。</p>\n',r:{minutes:.14,words:43},t:"面试指南-Spring",O:5,y:"a"}}],["/posts/cherry.html",{loader:()=>e.e(2345).then(e.bind(e,3704)),meta:{d:16416864e5,l:"2022年1月9日",c:["樱桃"],g:["红","小","圆"],e:"\n<h2>标题 2</h2>\n<p>这里是内容。</p>\n<h3>标题 3</h3>\n<p>这里是内容。</p>\n",r:{minutes:.11,words:33},t:"樱桃",i:"pen-to-square",y:"a"}}],["/posts/dragonfruit.html",{loader:()=>e.e(5853).then(e.bind(e,7421)),meta:{d:16417728e5,l:"2022年1月10日",c:["火龙果","水果"],g:["红","大"],e:"\n<h2>标题 2</h2>\n<p>这里是内容。</p>\n<h3>标题 3</h3>\n<p>这里是内容。</p>\n",r:{minutes:.12,words:36},t:"火龙果",i:"pen-to-square",y:"a"}}],["/posts/strawberry.html",{loader:()=>e.e(8461).then(e.bind(e,2806)),meta:{d:16418592e5,l:"2022年1月11日",c:["水果","草莓"],g:["红","小"],e:"\n<h2>标题 2</h2>\n<p>这里是内容。</p>\n<h3>标题 3</h3>\n<p>这里是内容。</p>\n",r:{minutes:.11,words:34},t:"草莓",i:"pen-to-square",y:"a"}}],["/posts/tomato.html",{loader:()=>e.e(6218).then(e.bind(e,9468)),meta:{d:16419456e5,l:"2022年1月12日",c:["蔬菜"],g:["红","圆"],u:!0,v:"/assets/images/cover2.jpg",e:"\n<h2>标题 2</h2>\n<p>这里是内容。</p>\n<h3>标题 3</h3>\n<p>这里是内容。</p>\n",r:{minutes:.13,words:38},t:"番茄",i:"pen-to-square",y:"a"}}],["/problem-record/HTTPInputStreamExample.html",{loader:()=>e.e(9800).then(e.bind(e,3174)),meta:{d:16923168e5,l:"2023年8月18日",c:["文件下载"],e:'<h3>根据文件下载地址获取流</h3>\n<div class="language-java line-numbers-mode" data-highlighter="shiki" data-ext="java" data-title="java" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD">import</span><span style="--shiki-light:#C18401;--shiki-dark:#E5C07B"> java.io.IOException</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">;</span></span>\n<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD">import</span><span style="--shiki-light:#C18401;--shiki-dark:#E5C07B"> java.io.InputStream</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">;</span></span>\n<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD">import</span><span style="--shiki-light:#C18401;--shiki-dark:#E5C07B"> java.net.HttpURLConnection</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">;</span></span>\n<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD">import</span><span style="--shiki-light:#C18401;--shiki-dark:#E5C07B"> java.net.URL</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">;</span></span>\n<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD">import</span><span style="--shiki-light:#C18401;--shiki-dark:#E5C07B"> java.net.URLEncoder</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">;</span></span>\n<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD">import</span><span style="--shiki-light:#C18401;--shiki-dark:#E5C07B"> java.nio.charset.StandardCharsets</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">;</span></span>\n<span class="line"></span>\n<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD">public</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD"> class</span><span style="--shiki-light:#C18401;--shiki-dark:#E5C07B"> HTTPInputStreamExample</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF"> {</span></span>\n<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD">    public</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD"> static</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD"> void</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF"> main</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">(</span><span style="--shiki-light:#C18401;--shiki-dark:#E5C07B">String</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">[] </span><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;--shiki-light-font-style:inherit;--shiki-dark-font-style:italic">args</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">)</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF"> {</span></span>\n<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-dark:#7F848E;--shiki-light-font-style:italic;--shiki-dark-font-style:italic">        //String urlStr = "http://172.18.20.15:8080/sfgk/pub/download.do?path=szjh%2F7bf4e83827d9092cbaf54f5e9f9e1ce5%2Fff808081760299d101760299d1250000/民事调解书.doc";</span></span>\n<span class="line"></span>\n<span class="line"><span style="--shiki-light:#C18401;--shiki-dark:#E5C07B">        String</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75"> urlStr</span><span style="--shiki-light:#383A42;--shiki-dark:#56B6C2"> =</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379"> "http://172.25.17.12:9090/jyhzx/wszx/2400/2022/08/26/d4f32f9ea3454264a0d400dedd4179d9/%E6%89%A7%E8%A1%8C%E9%A3%8E%E9%99%A9%E5%91%8A%E7%9F%A5%E4%B9%A6/%E6%89%A7%E8%A1%8C%E9%A3%8E%E9%99%A9%E5%91%8A%E7%9F%A5%E4%B9%A6.docx?X-Amz-Algorithm=AWS4-HMAC-SHA256&amp;X-Amz-Credential=minio%2F20230816%2Fus-east-1%2Fs3%2Faws4_request&amp;X-Amz-Date=20230816T030924Z&amp;X-Amz-Expires=86400&amp;X-Amz-SignedHeaders=host&amp;X-Amz-Signature=ec995e8cbf769c643ec3b1bf56afb029213bd598c35e45de5c4d0fb0c6372837"</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">;</span></span>\n<span class="line"></span>\n<span class="line"></span>\n<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD">        try</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF"> {</span></span>\n<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD">            int</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75"> lastSlashIndex</span><span style="--shiki-light:#383A42;--shiki-dark:#56B6C2"> =</span><span style="--shiki-light:#E45649;--shiki-dark:#E5C07B"> urlStr</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">.</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF">lastIndexOf</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">(</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379">\'/\'</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">);</span></span>\n<span class="line"><span style="--shiki-light:#C18401;--shiki-dark:#E5C07B">            String</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75"> encodedPart</span><span style="--shiki-light:#383A42;--shiki-dark:#56B6C2"> =</span><span style="--shiki-light:#E45649;--shiki-dark:#E5C07B"> urlStr</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">.</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF">substring</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">(lastSlashIndex </span><span style="--shiki-light:#383A42;--shiki-dark:#56B6C2">+</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66"> 1</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">);</span></span>\n<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD">            if</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF"> (</span><span style="--shiki-light:#383A42;--shiki-dark:#56B6C2">!</span><span style="--shiki-light:#E45649;--shiki-dark:#E5C07B">StandardCharsets</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">.</span><span style="--shiki-light:#E45649;--shiki-dark:#E5C07B">US_ASCII</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">.</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF">newEncoder</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">().</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF">canEncode</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">(encodedPart)) {</span></span>\n<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">                encodedPart </span><span style="--shiki-light:#383A42;--shiki-dark:#56B6C2">=</span><span style="--shiki-light:#E45649;--shiki-dark:#E5C07B"> URLEncoder</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">.</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF">encode</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">(encodedPart, </span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379">"UTF-8"</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">);</span></span>\n<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">            }</span></span>\n<span class="line"><span style="--shiki-light:#C18401;--shiki-dark:#E5C07B">            String</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75"> newUrlStr</span><span style="--shiki-light:#383A42;--shiki-dark:#56B6C2"> =</span><span style="--shiki-light:#E45649;--shiki-dark:#E5C07B"> urlStr</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">.</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF">substring</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">(</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66">0</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">, lastSlashIndex </span><span style="--shiki-light:#383A42;--shiki-dark:#56B6C2">+</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66"> 1</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">) </span><span style="--shiki-light:#383A42;--shiki-dark:#56B6C2">+</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF"> encodedPart;</span></span>\n<span class="line"></span>\n<span class="line"><span style="--shiki-light:#C18401;--shiki-dark:#E5C07B">            URL</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75"> url</span><span style="--shiki-light:#383A42;--shiki-dark:#56B6C2"> =</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD"> new</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF"> URL</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">(newUrlStr);</span></span>\n<span class="line"></span>\n<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-dark:#7F848E;--shiki-light-font-style:italic;--shiki-dark-font-style:italic">            // Open a connection to the URL</span></span>\n<span class="line"><span style="--shiki-light:#C18401;--shiki-dark:#E5C07B">            HttpURLConnection</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75"> connection</span><span style="--shiki-light:#383A42;--shiki-dark:#56B6C2"> =</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF"> (HttpURLConnection) </span><span style="--shiki-light:#E45649;--shiki-dark:#E5C07B">url</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">.</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF">openConnection</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">();</span></span>\n<span class="line"></span>\n<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-dark:#7F848E;--shiki-light-font-style:italic;--shiki-dark-font-style:italic">            // Set up the connection properties</span></span>\n<span class="line"><span style="--shiki-light:#E45649;--shiki-dark:#E5C07B">            connection</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">.</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF">setRequestMethod</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">(</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379">"GET"</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">);</span></span>\n<span class="line"><span style="--shiki-light:#E45649;--shiki-dark:#E5C07B">            connection</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">.</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF">setDoInput</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">(</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66">true</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">);</span></span>\n<span class="line"></span>\n<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-dark:#7F848E;--shiki-light-font-style:italic;--shiki-dark-font-style:italic">            // Connect to the URL</span></span>\n<span class="line"><span style="--shiki-light:#E45649;--shiki-dark:#E5C07B">            connection</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">.</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF">connect</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">();</span></span>\n<span class="line"></span>\n<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-dark:#7F848E;--shiki-light-font-style:italic;--shiki-dark-font-style:italic">            // Check if the response code indicates success</span></span>\n<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD">            int</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75"> responseCode</span><span style="--shiki-light:#383A42;--shiki-dark:#56B6C2"> =</span><span style="--shiki-light:#E45649;--shiki-dark:#E5C07B"> connection</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">.</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF">getResponseCode</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">();</span></span>\n<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD">            if</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF"> (responseCode </span><span style="--shiki-light:#383A42;--shiki-dark:#56B6C2">==</span><span style="--shiki-light:#E45649;--shiki-dark:#E5C07B"> HttpURLConnection</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">.</span><span style="--shiki-light:#E45649;--shiki-dark:#E5C07B">HTTP_OK</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">) {</span></span>\n<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-dark:#7F848E;--shiki-light-font-style:italic;--shiki-dark-font-style:italic">                // Get the InputStream from the connection</span></span>\n<span class="line"><span style="--shiki-light:#C18401;--shiki-dark:#E5C07B">                InputStream</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75"> inputStream</span><span style="--shiki-light:#383A42;--shiki-dark:#56B6C2"> =</span><span style="--shiki-light:#E45649;--shiki-dark:#E5C07B"> connection</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">.</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF">getInputStream</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">();</span></span>\n<span class="line"></span>\n<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-dark:#7F848E;--shiki-light-font-style:italic;--shiki-dark-font-style:italic">                // Use the inputStream as needed (e.g., read/write data)</span></span>\n<span class="line"></span>\n<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-dark:#7F848E;--shiki-light-font-style:italic;--shiki-dark-font-style:italic">                // Don\'t forget to close the inputStream when you\'re done</span></span>\n<span class="line"><span style="--shiki-light:#E45649;--shiki-dark:#E5C07B">                inputStream</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">.</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF">close</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">();</span></span>\n<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">            } </span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD">else</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF"> {</span></span>\n<span class="line"><span style="--shiki-light:#E45649;--shiki-dark:#E5C07B">                System</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">.</span><span style="--shiki-light:#E45649;--shiki-dark:#E5C07B">out</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">.</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF">println</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">(</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379">"HTTP request failed with response code: "</span><span style="--shiki-light:#383A42;--shiki-dark:#56B6C2"> +</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF"> responseCode);</span></span>\n<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">            }</span></span>\n<span class="line"></span>\n<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-dark:#7F848E;--shiki-light-font-style:italic;--shiki-dark-font-style:italic">            // Disconnect and clean up the connection</span></span>\n<span class="line"><span style="--shiki-light:#E45649;--shiki-dark:#E5C07B">            connection</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">.</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF">disconnect</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">();</span></span>\n<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">        } </span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD">catch</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF"> (</span><span style="--shiki-light:#C18401;--shiki-dark:#E5C07B">IOException</span><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;--shiki-light-font-style:inherit;--shiki-dark-font-style:italic"> e</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">) {</span></span>\n<span class="line"><span style="--shiki-light:#E45649;--shiki-dark:#E5C07B">            e</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">.</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF">printStackTrace</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">();</span></span>\n<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">        }</span></span>\n<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">    }</span></span>\n<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">}</span></span></code></pre>\n<div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>',r:{minutes:.91,words:273},t:"根据文件下载地址获取流",y:"a"}}],["/problem-record/delete-more-iif.html",{loader:()=>e.e(2930).then(e.bind(e,250)),meta:{d:16685568e5,l:"2022年11月16日",c:["code"],e:'<h2>策略模式 + 工厂模式</h2>\n<figure><figcaption>img_1.png</figcaption></figure>\n<p>1、策略类工厂  <code>StrategyFactory</code></p>\n<div class="language-java line-numbers-mode" data-highlighter="shiki" data-ext="java" data-title="java" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"></span>\n<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-dark:#7F848E;--shiki-light-font-style:italic;--shiki-dark-font-style:italic">/**</span></span>\n<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-dark:#7F848E;--shiki-light-font-style:italic;--shiki-dark-font-style:italic"> * StrategyFactory</span></span>\n<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-dark:#7F848E;--shiki-light-font-style:italic;--shiki-dark-font-style:italic"> * @description 策略类工厂</span></span>\n<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-dark:#7F848E;--shiki-light-font-style:italic;--shiki-dark-font-style:italic"> * </span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;--shiki-light-font-style:italic;--shiki-dark-font-style:italic">@author</span><span style="--shiki-light:#A0A1A7;--shiki-dark:#7F848E;--shiki-light-font-style:italic;--shiki-dark-font-style:italic"> jiangyunfei</span></span>\n<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-dark:#7F848E;--shiki-light-font-style:italic;--shiki-dark-font-style:italic"> * @date 2023/11/16 10:54</span></span>\n<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-dark:#7F848E;--shiki-light-font-style:italic;--shiki-dark-font-style:italic"> * </span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;--shiki-light-font-style:italic;--shiki-dark-font-style:italic">@version</span><span style="--shiki-light:#A0A1A7;--shiki-dark:#7F848E;--shiki-light-font-style:italic;--shiki-dark-font-style:italic"> 1.0</span></span>\n<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-dark:#7F848E;--shiki-light-font-style:italic;--shiki-dark-font-style:italic"> */</span></span>\n<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD">public</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD"> class</span><span style="--shiki-light:#C18401;--shiki-dark:#E5C07B"> StrategyFactory</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF"> {</span></span>\n<span class="line"></span>\n<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-dark:#7F848E;--shiki-light-font-style:italic;--shiki-dark-font-style:italic">    /**</span></span>\n<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-dark:#7F848E;--shiki-light-font-style:italic;--shiki-dark-font-style:italic">     * 私有构造函数，防止实例化</span></span>\n<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-dark:#7F848E;--shiki-light-font-style:italic;--shiki-dark-font-style:italic">     */</span></span>\n<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD">    private</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF"> StrategyFactory</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">()</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF"> {}</span></span>\n<span class="line"></span>\n<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD">    public</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD"> static</span><span style="--shiki-light:#C18401;--shiki-dark:#E5C07B"> Strategy</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF"> execute</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">(</span><span style="--shiki-light:#C18401;--shiki-dark:#E5C07B">Integer</span><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;--shiki-light-font-style:inherit;--shiki-dark-font-style:italic"> levelCode</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">){</span></span>\n<span class="line"><span style="--shiki-light:#C18401;--shiki-dark:#E5C07B">        Strategy</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75"> strategy</span><span style="--shiki-light:#383A42;--shiki-dark:#56B6C2"> =</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66"> null</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">;</span></span>\n<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD">        switch</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF"> (levelCode){</span></span>\n<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD">            case</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66"> 1</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD">:</span></span>\n<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">                strategy </span><span style="--shiki-light:#383A42;--shiki-dark:#56B6C2">=</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD"> new</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF"> SpringActivity</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">();</span></span>\n<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD">                break</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">;</span></span>\n<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD">            case</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66"> 2</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD">:</span></span>\n<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">                strategy </span><span style="--shiki-light:#383A42;--shiki-dark:#56B6C2">=</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD"> new</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF"> SummerActivity</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">();</span></span>\n<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD">                break</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">;</span></span>\n<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD">            case</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66"> 3</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD">:</span></span>\n<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">                strategy </span><span style="--shiki-light:#383A42;--shiki-dark:#56B6C2">=</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD"> new</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF"> AutumnActivity</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">();</span></span>\n<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD">                break</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">;</span></span>\n<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD">            case</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66"> 4</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD">:</span></span>\n<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">                strategy </span><span style="--shiki-light:#383A42;--shiki-dark:#56B6C2">=</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD"> new</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF"> WinterActivity</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">();</span></span>\n<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD">                break</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">;</span></span>\n<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD">            default:</span></span>\n<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD">                throw</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD"> new</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF"> IllegalArgumentException</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">(</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379">"活动编号错误:"</span><span style="--shiki-light:#383A42;--shiki-dark:#56B6C2">+</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">levelCode);</span></span>\n<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">        }</span></span>\n<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD">        return</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF"> strategy;</span></span>\n<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">    }</span></span>\n<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">}</span></span></code></pre>\n<div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>',r:{minutes:2.38,words:715},t:"如何干掉过多的 if else",y:"a"}}],["/problem-record/github-tips.html",{loader:()=>e.e(9404).then(e.bind(e,7389)),meta:{d:1722074851e3,c:"开发工具",g:["Git"],e:'<p>我使用 Github 已经有 6 年多了，今天毫无保留地把自己觉得比较有用的 Github 小技巧送给关注 JavaGuide 的各位小伙伴。</p>\n<h2>一键生成 Github 简历 &amp; Github 年报</h2>\n<p>通过 <a href="https://resume.github.io/" target="_blank" rel="noopener noreferrer">https://resume.github.io/</a> 这个网站你可以一键生成一个在线的 Github 简历。</p>\n<p>当时我参加的校招的时候，个人信息那里就放了一个在线的 Github 简历。我觉得这样会让面试官感觉你是一个内行，会提高一些印象分。</p>',r:{minutes:6.27,words:1881},t:"Github 实用小技巧总结",y:"a"}}],["/problem-record/idea-template.html",{loader:()=>e.e(3776).then(e.bind(e,4129)),meta:{d:16504128e5,l:"2022年4月20日",c:["IDEA"],e:"<blockquote>\n<p>其他关于IDEA的使用技巧：https://gitee.com/SnailClimb/awesome-idea-tutorial</p>\n</blockquote>\n<h2>1、关闭IDEA格式化注释</h2>\n<blockquote>\n<p>IDEA在格式化模板的时候会把注释一起格式化，导致排好序的方法或者类注释顺序错乱。</p>\n</blockquote>\n<p>设置方法：打开IDEAFile-&gt; Setting -&gt; Editor -&gt; Code Style -&gt; Java -&gt; JavaDoc，找到Enable JavaDoc Formatting，将勾选取消掉即可。</p>",r:{minutes:1.65,words:494},t:"IDEA注释模板",y:"a"}}],["/problem-record/idea-tool.html",{loader:()=>e.e(7868).then(e.bind(e,1528)),meta:{d:16419456e5,l:"2022年1月12日",c:["IDEA"],e:'<h3>1、有关工具使用网址</h3>\n<p><a href="https://idea.javaguide.cn/" target="_blank" rel="noopener noreferrer">IDEA 高效使用指南</a></p>\n',r:{minutes:.11,words:34},t:"IDEA 高效使用指南",O:2,y:"a"}}],["/problem-record/interview-transcripts.html",{loader:()=>e.e(6621).then(e.bind(e,9123)),meta:{d:17220384e5,l:"2024年7月27日",e:"<h3>1、面试被问到的问题</h3>\n<h3>2、如何做好准备</h3>\n<h3>3、</h3>\n",r:{minutes:.09,words:28},t:"面试经历",O:1,y:"a"}}],["/problem-record/merge-pdf.html",{loader:()=>e.e(6255).then(e.bind(e,419)),meta:{d:16915392e5,l:"2023年8月9日",c:["代码实践"],g:["PDF文件合并"],e:"<h3>1、背景</h3>\n<p>需要根据选中的列表数据，获取其对应的附件信息（PDF文件），合并成一个PDF文件并可以打印。</p>\n<h3>2、开发过程</h3>\n<p>因为项目是一个老项目，且是高度封装的框架，一般请求不合适。采用原始的Ajax请求，后台是servelet定义接口。\n开始是想用框架自带的请求方式，发相不行。而且框架自动生成的方法，无法使用HttpServletResponse作为方法参数。\n所以摒弃框架自带的方式，使用原始的Ajax请求，后台是servelet定义接口，后台通过调试，Ajax不行，直接使用printJS即可。</p>\n<h3>3、外部插件</h3>\n<p>前端：https://printjs.crabbly.com/<br>\n后端：pdfbox PDFMergerUtility （https://iowiki.com/pdfbox/pdfbox_quick_guide.html）</p>",r:{minutes:3.23,words:968},t:"合并PDF，打印预览",y:"a"}}],["/problem-record/miscellaneous-notes.html",{loader:()=>e.e(6048).then(e.bind(e,3506)),meta:{d:17220384e5,l:"2024年7月27日",c:["code"],e:'<h2>1、在springboot中,生成word文件，包含表格形式。</h2>\n<p>使用Apache POI库，它是一个Java API，用于处理Microsoft Office格式的文件。\n以下是一个使用Apache POI将查询结果转换为Word文件表格形式的简单示例：</p>\n<blockquote>\n<p>参考文档：http://deepoove.com/poi-tl/apache-poi-guide.html</p>\n<ol>\n<li>首先，将以下依赖项添加到您的Maven项目中，以使用Apache POI库：</li>\n</ol>\n</blockquote>\n<div class="language-xml line-numbers-mode" data-highlighter="shiki" data-ext="xml" data-title="xml" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">&lt;</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75">dependency</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">&gt;</span></span>\n<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">  &lt;</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75">groupId</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">&gt;org.apache.poi&lt;/</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75">groupId</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">&gt;</span></span>\n<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">  &lt;</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75">artifactId</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">&gt;poi&lt;/</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75">artifactId</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">&gt;</span></span>\n<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">  &lt;</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75">version</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">&gt;5.2.0&lt;/</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75">version</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">&gt;</span></span>\n<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">&lt;/</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75">dependency</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">&gt;</span></span>\n<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">&lt;</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75">dependency</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">&gt;</span></span>\n<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">  &lt;</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75">groupId</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">&gt;org.apache.poi&lt;/</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75">groupId</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">&gt;</span></span>\n<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">  &lt;</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75">artifactId</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">&gt;poi-ooxml&lt;/</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75">artifactId</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">&gt;</span></span>\n<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">  &lt;</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75">version</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">&gt;5.2.0&lt;/</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75">version</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">&gt;</span></span>\n<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">&lt;/</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75">dependency</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">&gt;</span></span></code></pre>\n<div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>',r:{minutes:3.85,words:1154},t:"SpringBoot生成Word文档",y:"a"}}],["/problem-record/redission.html",{loader:()=>e.e(6098).then(e.bind(e,7089)),meta:{d:17160768e5,l:"2024年5月19日",c:["redisson","分布式锁"],g:["redisson"],e:'<h2>项目中redisson分布式锁的使用</h2>\n<div class="hint-container tip">\n<p class="hint-container-title">提示</p>\n<p>Redisson 分布式锁在处理分布式系统中的并发问题时非常有用。通过确保关键代码块在任何时候只有一个实例在执行，可以有效避免数据不一致和竞争条件。常见的使用场景包括资源访问控制、任务调度、库存管理、分布式事务、分布式队列、限流和熔断以及缓存更新等。</p>\n<p>可参考：https://doc.ruoyi.vip/ruoyi-vue/document/cjjc.html#%E9%9B%86%E6%88%90redisson%E5%AE%9E%E7%8E%B0redis%E5%88%86%E5%B8%83%E5%BC%8F%E9%94%81</p>\n</div>',r:{minutes:.98,words:294},t:"redisson分布式锁的使用",y:"a"}}],["/problem-record/tool.html",{loader:()=>e.e(3048).then(e.bind(e,255)),meta:{d:16419456e5,l:"2022年1月12日",e:'<h3>博客文章转换成 Markdown</h3>\n<ol>\n<li>将博客文章打开控制台，找到\'article_content\',’复制到outerHTML‘.</li>\n<li>markdown转换工具：<a href="https://tool.lu/markdown/#" target="_blank" rel="noopener noreferrer">https://tool.lu/markdown/#</a></li>\n</ol>\n<h3>yarn升级</h3>\n<p>他需要单独升级，不能用npm\nhttps://yarnpkg.com/getting-started/install</p>',r:{minutes:.21,words:63},t:"工具",O:0,y:"a"}}],["/study-notes/",{loader:()=>e.e(9064).then(e.bind(e,9096)),meta:{d:1722072119e3,c:"学习笔记",r:{minutes:.04,words:12},t:"学习笔记首页",y:"a"}}],["/vue/advanced.html",{loader:()=>e.e(8383).then(e.bind(e,182)),meta:{d:1722074851e3,c:"Vue系列",e:"<h3>关于博客</h3>\n",r:{minutes:.04,words:12},t:"Vue进阶",y:"a"}}],["/vue/basics.html",{loader:()=>e.e(222).then(e.bind(e,9833)),meta:{d:1722074851e3,c:"Vue系列",e:"<h3>关于博客</h3>\n<p>this.$nextTick</p>\n<p>DOM（文档对象模型，Document Object Model）是一个跨平台和语言独立的接口，它允许程序和脚本动态地访问和更新文档的内容、结构和样式。在网页浏览器中，DOM通常指的是HTML和XML文档的编程接口。\n以下是DOM的一些基本概念：</p>\n<ol>\n<li><strong>文档</strong>：在Web浏览器中，文档通常指的是网页，即HTML或XML文件。DOM将文档表示为一个树形结构，称为DOM树。</li>\n<li><strong>对象</strong>：在DOM中，文档的每一个元素、属性和文本都被视为一个对象。例如，HTML中的每个标签（如<code>&lt;div&gt;</code>、<code>&lt;p&gt;</code>、<code>&lt;a&gt;</code>等）都是一个对象，称为元素节点；每个属性（如<code>id</code>、<code>class</code>、<code>href</code>等）也是一个对象，称为属性节点；标签内的文本也是一个对象，称为文本节点。</li>\n<li><strong>模型</strong>：DOM提供了一个模型，即一套规则，用于描述如何通过对象来表示文档的结构，以及如何对这些对象进行操作。\n以下是DOM的一些主要功能：</li>\n</ol>",r:{minutes:1.48,words:443},t:"Vue基础",y:"a"}}],["/study-notes/shangguigu-second/ABA/",{loader:()=>e.e(3265).then(e.bind(e,3130)),meta:{d:16784928e5,l:"2023年3月11日",g:["JUC","CAS","ABA问题"],e:"<h2>连环套路</h2>\n<p>从AtomicInteger引出下面的问题</p>\n<p>CAS -&gt; Unsafe -&gt; CAS底层思想 -&gt; ABA -&gt; 原子引用更新 -&gt; 如何规避ABA问题</p>\n<h2>ABA问题是什么</h2>\n<p>狸猫换太子</p>\n<figure><figcaption>image-20200311212442057</figcaption></figure>\n<p>假设现在有两个线程，分别是T1 和 T2，然后T1执行某个操作的时间为10秒，T2执行某个时间的操作是2秒，最开始AB两个线程，分别从主内存中获取A值，但是因为B的执行速度更快，他先把A的值改成B，然后在修改成A，然后执行完毕，T1线程在10秒后，执行完毕，判断内存中的值为A，并且和自己预期的值一样，它就认为没有人更改了主内存中的值，就快乐的修改成B，但是实际上 可能中间经历了 ABCDEFA 这个变换，也就是中间的值经历了狸猫换太子。</p>",r:{minutes:13.98,words:4194},t:"3、原子类AtomicInteger的ABA问题",y:"a"}}],["/study-notes/shangguigu-second/ArrayList/",{loader:()=>e.e(3894).then(e.bind(e,5892)),meta:{d:16784928e5,l:"2023年3月11日",c:["学习笔记"],g:["JUC","Volatile"],e:'<h2>前言</h2>\n<p>1、当我们执行下面语句的时候，底层进行了什么操作</p>\n<div class="language- line-numbers-mode" data-highlighter="shiki" data-ext="" data-title="" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span>new ArrayList&lt;Integer&gt;();</span></span></code></pre>\n<div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0"><div class="line-number"></div></div></div>',r:{minutes:3.75,words:1124},t:"4、Collection线程不安全的举例",y:"a"}}],["/study-notes/shangguigu-second/BlockingQueue/",{loader:()=>e.e(3629).then(e.bind(e,517)),meta:{d:16784928e5,l:"2023年3月11日",c:["JUC"],g:["BlockingQueue"],e:"<h3>队列</h3>\n<p>队列就可以想成是一个数组，从一头进入，一头出去，排队买饭</p>\n<h3>阻塞队列</h3>\n<p>BlockingQueue   阻塞队列，排队拥堵，首先它是一个队列，而一个阻塞队列在数据结构中所起的作用大致如下图所示：</p>\n<figure><figcaption>image-20200316152120272</figcaption></figure>\n<p>线程1往阻塞队列中添加元素，而线程2从阻塞队列中移除元素</p>\n<ul>\n<li><code>当阻塞队列是空时，从队列中获取元素的操作将会被阻塞</code></li>\n<li><code>当阻塞队列是满时，从队列中添加元素的操作将会被阻塞</code></li>\n</ul>",r:{minutes:10.69,words:3206},t:"7、阻塞队列",y:"a"}}],["/study-notes/shangguigu-second/CAS/",{loader:()=>e.e(6614).then(e.bind(e,1458)),meta:{d:16784928e5,l:"2023年3月11日",c:["JUC"],g:["JUC","CAS"],e:"<h2>概念</h2>\n<p>CAS的全称是Compare-And-Swap，它是CPU并发原语</p>\n<p>它的功能是判断内存某个位置的值是否为预期值，如果是则更改为新的值，这个过程是原子的</p>\n<p>CAS并发原语体现在Java语言中就是sun.misc.Unsafe类的各个方法。调用UnSafe类中的CAS方法，JVM会帮我们实现出CAS汇编指令，这是一种完全依赖于硬件的功能，通过它实现了原子操作，再次强调，由于CAS是一种系统原语，原语属于操作系统用于范畴，是由若干条指令组成，用于完成某个功能的一个过程，并且原语的执行必须是连续的，在执行过程中不允许被中断，也就是说CAS是一条CPU的原子指令，不会造成所谓的数据不一致的问题，也就是说CAS是线程安全的。</p>",r:{minutes:6.53,words:1959},t:"2、CAS底层原理",y:"a"}}],["/study-notes/shangguigu-second/CountDownLatch_CyclicBarrier_Semaphore/CyclicBarrier.html",{loader:()=>e.e(8800).then(e.bind(e,8221)),meta:{d:16790976e5,l:"2023年3月18日",c:["学习笔记"],g:["CyclicBarrier"],e:'<h2>概念</h2>\n<p>和CountDownLatch相反，需要集齐七颗龙珠，召唤神龙。也就是做加法，开始是0，加到某个值的时候就执行。</p>\n<p>CyclicBarrier的字面意思就是可循环（cyclic）使用的屏障（Barrier）。它要求做的事情是，让一组线程到达一个屏障（也可以叫同步点）时被阻塞，直到最后一个线程到达屏障时，屏障才会开门，所有被屏障拦截的线程才会继续干活，线程进入屏障通过CyclicBarrier的await方法</p>\n<h2>案例</h2>\n<p>集齐7个龙珠，召唤神龙的Demo，我们需要首先创建CyclicBarrier</p>\n<div class="language- line-numbers-mode" data-highlighter="shiki" data-ext="" data-title="" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span>/**</span></span>\n<span class="line"><span>* 定义一个循环屏障，参数1：需要累加的值，参数2 需要执行的方法</span></span>\n<span class="line"><span>*/</span></span>\n<span class="line"><span>CyclicBarrier cyclicBarrier = new CyclicBarrier(7, () -&gt; {</span></span>\n<span class="line"><span>\tSystem.out.println("召唤神龙");</span></span>\n<span class="line"><span>});</span></span></code></pre>\n<div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>',r:{minutes:1.54,words:462},t:"CyclicBarrier",y:"a"}}],["/study-notes/shangguigu-second/CountDownLatch_CyclicBarrier_Semaphore/Semaphore.html",{loader:()=>e.e(1220).then(e.bind(e,1754)),meta:{d:16790976e5,l:"2023年3月18日",c:["学习笔记"],g:["Semaphore"],e:'<h2>概念</h2>\n<p>信号量主要用于两个目的</p>\n<ul>\n<li>一个是用于共享资源的互斥使用</li>\n<li>另一个用于并发线程数的控制</li>\n</ul>\n<h2>代码</h2>\n<p>我们模拟一个抢车位的场景，假设一共有6个车，3个停车位</p>\n<p>那么我们首先需要定义信号量为3，也就是3个停车位</p>\n<div class="language- line-numbers-mode" data-highlighter="shiki" data-ext="" data-title="" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span>/**</span></span>\n<span class="line"><span>* 初始化一个信号量为3，默认是false 非公平锁， 模拟3个停车位</span></span>\n<span class="line"><span>*/</span></span>\n<span class="line"><span>Semaphore semaphore = new Semaphore(3, false);</span></span></code></pre>\n<div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>',r:{minutes:1.64,words:491},t:"Semaphore",y:"a"}}],["/study-notes/shangguigu-second/CountDownLatch_CyclicBarrier_Semaphore/countDownLatch.html",{loader:()=>e.e(1243).then(e.bind(e,8434)),meta:{d:16790976e5,l:"2023年3月18日",c:["学习笔记"],g:["CountDownLatch"],e:"<h2>概念</h2>\n<p>让一些线程阻塞直到另一些线程完成一系列操作才被唤醒</p>\n<p>CountDownLatch主要有两个方法，当一个或多个线程调用await方法时，调用线程就会被阻塞。其它线程调用CountDown方法会将计数器减1（调用CountDown方法的线程不会被阻塞），当计数器的值变成零时，因调用await方法被阻塞的线程会被唤醒，继续执行</p>\n<h2>场景</h2>\n<p>现在有这样一个场景，假设一个自习室里有7个人，其中有一个是班长，班长的主要职责就是在其它6个同学走了后，关灯，锁教室门，然后走人，因此班长是需要最后一个走的，那么有什么方法能够控制班长这个线程是最后一个执行，而其它线程是随机执行的</p>",r:{minutes:2.27,words:680},t:"CountDownLatch",y:"a"}}],["/study-notes/shangguigu-second/JVM/five.html",{loader:()=>e.e(3294).then(e.bind(e,6865)),meta:{d:16784928e5,l:"2023年3月11日",c:["JUC"],g:["OOM"],e:"<h2>经典错误</h2>\n<p>JVM中常见的两个错误</p>\n<p>StackoverFlowError ：栈溢出</p>\n<p>OutofMemoryError: java heap space：堆溢出</p>\n<p>除此之外，还有以下的错误</p>\n<ul>\n<li>java.lang.StackOverflowError</li>\n<li>java.lang.OutOfMemoryError：java heap space</li>\n<li>java.lang.OutOfMemoryError：GC overhead limit exceeeded</li>\n<li>java.lang.OutOfMemoryError：Direct buffer memory</li>\n<li>java.lang.OutOfMemoryError：unable to create new native thread</li>\n<li>java.lang.OutOfMemoryError：Metaspace</li>\n</ul>",r:{minutes:6.69,words:2006},t:"Java内存溢出OOM",y:"a"}}],["/study-notes/shangguigu-second/JVM/four.html",{loader:()=>e.e(6282).then(e.bind(e,6771)),meta:{d:16784928e5,l:"2023年3月11日",c:["JUC"],g:["Java中的引用"],e:'<h2>前言</h2>\n<p>在原来的时候，我们谈到一个类的实例化</p>\n<div class="language- line-numbers-mode" data-highlighter="shiki" data-ext="" data-title="" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span>Person p = new Person()</span></span></code></pre>\n<div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0"><div class="line-number"></div></div></div>',r:{minutes:9.46,words:2837},t:"Java中的引用",y:"a"}}],["/study-notes/shangguigu-second/JVM/one.html",{loader:()=>e.e(7840).then(e.bind(e,7593)),meta:{d:16784928e5,l:"2023年3月11日",c:["JUC"],g:["死锁"],e:"<p>JVM前提学习视频：\nhttps://www.bilibili.com/video/BV1TJ411R75F/?spm_id_from=333.337.search-card.all.click&amp;vd_source=7138dfc78c49f602f8d3ed8cfbf0513d（没了）<br>\nhttps://www.bilibili.com/video/BV1jJ411t71s/?spm_id_from=333.788.recommend_more_video.4&amp;vd_source=7138dfc78c49f602f8d3ed8cfbf0513d<br>\n相应笔记： https://blog.csdn.net/q961250375/article/details/107499173</p>",r:{minutes:.86,words:258},t:"JVM体系结构",y:"a"}}],["/study-notes/shangguigu-second/JVM/six.html",{loader:()=>e.e(3880).then(e.bind(e,8152)),meta:{d:16784928e5,l:"2023年3月11日",c:["JUC"],g:["垃圾收集器"],e:"<h2>GC垃圾回收算法和垃圾收集器关系</h2>\n<blockquote>\n<p>天上飞的理念，要有落地的实现（垃圾收集器就是GC垃圾回收算法的实现）</p>\n<p>GC算法是内存回收的方法论，垃圾收集器就是算法的落地实现</p>\n</blockquote>\n<p>GC算法主要有以下几种</p>\n<ul>\n<li>引用计数（几乎不用，无法解决循环引用的问题）</li>\n<li>复制拷贝（用于新生代）</li>\n<li>标记清除（用于老年代）</li>\n<li>标记整理（用于老年代）</li>\n</ul>\n<p>因为目前为止还没有完美的收集器出现，更没有万能的收集器，只是针对具体应用最合适的收集器，进行分代收集（那个代用什么收集器）</p>",r:{minutes:18.74,words:5623},t:"垃圾收集器",y:"a"}}],["/study-notes/shangguigu-second/JVM/three.html",{loader:()=>e.e(6704).then(e.bind(e,5111)),meta:{d:16784928e5,l:"2023年3月11日",c:["JUC"],g:["死锁"],e:'<h2>前言</h2>\n<p>你说你做过JVM调优和参数配置，请问如何盘点查看JVM系统默认值</p>\n<p>使用jps和jinfo进行查看</p>\n<div class="language- line-numbers-mode" data-highlighter="shiki" data-ext="" data-title="" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span>-Xms：初始堆空间</span></span>\n<span class="line"><span>-Xmx：堆最大值</span></span>\n<span class="line"><span>-Xss：栈空间</span></span></code></pre>\n<div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>',r:{minutes:8.38,words:2514},t:"JVM调优和参数配置",y:"a"}}],["/study-notes/shangguigu-second/JVM/two.html",{loader:()=>e.e(4670).then(e.bind(e,7697)),meta:{d:16784928e5,l:"2023年3月11日",c:["JUC"],g:["死锁"],e:"<h2>JVM垃圾回收的时候如何确定垃圾？是否知道什么是GC Roots</h2>\n<blockquote>\n<p>友链：https://www.pdai.tech/md/java/jvm/java-jvm-gc.html#gc---java-%E5%9E%83%E5%9C%BE%E5%9B%9E%E6%94%B6%E5%9F%BA%E7%A1%80%E7%9F%A5%E8%AF%86</p>\n</blockquote>\n<h3>什么是垃圾</h3>\n<p>简单来说就是内存中已经不再被使用的空间就是垃圾</p>\n<h3>如何判断一个对象是否可以被回收</h3>\n<h4>引用计数法</h4>\n<p>Java中，引用和对象是有关联的。如果要操作对象则必须用引用进行。</p>",r:{minutes:3.39,words:1016},t:"GC Roots",y:"a"}}],["/study-notes/shangguigu-second/Linux/",{loader:()=>e.e(1821).then(e.bind(e,9308)),meta:{d:16784928e5,l:"2023年3月11日",c:["JUC"],g:["Linux诊断原因"],e:"<h2>命令集合</h2>\n<p>1、整机系统性能：top  查看,（ %CPU、%MEM 、load average）,按1查看不同CPU。看id，空闲率</p>\n<p>2、内存: free  -m</p>\n<p>3、硬盘: df -h</p>\n<p>4、CPU ： vmstat -n 2 3</p>\n<p>5、 磁盘io：iostat -xdk 2 3  看：r/s  w/s,每秒的读写速率，判断sql调优否。</p>\n<p>6、 其他命令：chmod、ifconfig、</p>\n<h3>整机：top，查看整机系统性能</h3>\n<figure><figcaption>image-20200326162329550</figcaption></figure>",r:{minutes:4.32,words:1297},t:"Linux诊断原因",y:"a"}}],["/study-notes/shangguigu-second/SiSuo/",{loader:()=>e.e(2334).then(e.bind(e,3064)),meta:{d:16784928e5,l:"2023年3月11日",c:["JUC"],g:["死锁"],e:"<p>死锁是指两个或多个以上的进程在执行过程中，因争夺资源而造成一种<code>互相等待的现象</code>，若无外力干涉那他们都将无法推进下去。如果资源充足，进程的资源请求都能够得到满足，死锁出现的可能性就很低，否则就会因争夺有限的资源而陷入死锁。</p>\n<figure><figcaption>image-20200318175441578</figcaption></figure>\n<h2>产生死锁的原因</h2>\n<ul>\n<li>系统资源不足</li>\n<li>进程运行推进的顺序不对</li>\n<li>资源分配不当</li>\n</ul>\n<h2>死锁产生的四个必要条件</h2>\n<ul>\n<li>互斥\n<ul>\n<li>解决方法：把互斥的共享资源封装成可同时访问</li>\n</ul>\n</li>\n<li>占有且等待\n<ul>\n<li>解决方法：进程请求资源时，要求它不占有任何其它资源，也就是它必须一次性申请到所有的资源，这种方式会导致资源效率低。</li>\n</ul>\n</li>\n<li>非抢占式\n<ul>\n<li>解决方法：如果进程不能立即分配资源，要求它不占有任何其他资源，也就是只能够同时获得所有需要资源时，才执行分配操作</li>\n</ul>\n</li>\n<li>循环等待\n<ul>\n<li>解决方法：对资源进行排序，要求进程按顺序请求资源。</li>\n</ul>\n</li>\n</ul>",r:{minutes:2.93,words:879},t:"10、死锁编码及定位分析",y:"a"}}],["/study-notes/shangguigu-second/Synchronized-Lock/",{loader:()=>e.e(4473).then(e.bind(e,7918)),meta:{d:16784928e5,l:"2023年3月11日",c:["JUC"],g:["Synchronized","Lock"],e:"<p>早期的时候我们对线程的主要操作为：</p>\n<ul>\n<li>synchronized wait  notify</li>\n</ul>\n<p>然后后面出现了替代方案</p>\n<ul>\n<li>lock await  signal</li>\n</ul>\n<figure><figcaption>image-20200317101210376</figcaption></figure>\n<h2>问题</h2>\n<h3>synchronized 和 lock 有什么区别？用新的lock有什么好处？举例说明</h3>\n<ul>\n<li>synchronized 和 lock 有什么区别？用新的lock有什么好处？举例说明</li>\n</ul>",r:{minutes:3.91,words:1172},t:"8、Synchronized和Lock的区别",y:"a"}}],["/study-notes/shangguigu-second/ThreadPool/",{loader:()=>e.e(3871).then(e.bind(e,9752)),meta:{d:16818624e5,l:"2023年4月19日",c:"线程池",g:["线程池"],e:'<h2>1、前言</h2>\n<p>获取多线程的方法，我们都知道有三种，还有一种是实现Callable接口</p>\n<ul>\n<li>实例化Thread类</li>\n<li>实现Runnable接口</li>\n<li>实现Callable接口</li>\n<li>使用线程池获取</li>\n</ul>\n<h3>1.1、Callable接口</h3>\n<p>Callable接口，是一种让线程执行完成后，能够返回结果的</p>\n<p>在说到Callable接口的时候，我们不得不提到Runnable接口</p>\n<div class="language- line-numbers-mode" data-highlighter="shiki" data-ext="" data-title="" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span>/**</span></span>\n<span class="line"><span> * 实现Runnable接口</span></span>\n<span class="line"><span> */</span></span>\n<span class="line"><span>class MyThread implements Runnable {</span></span>\n<span class="line"><span></span></span>\n<span class="line"><span>    @Override</span></span>\n<span class="line"><span>    public void run() {</span></span>\n<span class="line"><span></span></span>\n<span class="line"><span>    }</span></span>\n<span class="line"><span>}</span></span></code></pre>\n<div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>',r:{minutes:19.96,words:5989},t:"9、线程池（Java中有哪些方法获取多线程）",y:"a"}}],["/study-notes/shangguigu-second/github/",{loader:()=>e.e(3214).then(e.bind(e,5093)),meta:{d:16784928e5,l:"2023年3月11日",c:["GitHub"],g:["GitHub"],e:"<p>使用Github优秀框架 + 源码 提升自己</p>\n<p>https://github.com/FlyCloudRiver<br>\nhttps://gitee.com/cuckoocry/projects?scope=personal&amp;&amp;sort=</p>\n<h2>常用词含义</h2>\n<ul>\n<li>watch：会持续收到该项目的动态</li>\n<li>fork：复制某个仓库到自己的Github仓库中</li>\n<li>star：可以理解为点赞</li>\n<li>clone：将项目下载至本地</li>\n<li>follow：关注你感兴趣的作者，会收到他们的动态</li>\n</ul>",r:{minutes:1.33,words:398},t:"GitHub学习",y:"a"}}],["/study-notes/shangguigu-second/lock/five.html",{loader:()=>e.e(6432).then(e.bind(e,6681)),meta:{d:16790976e5,l:"2023年3月18日",c:["学习笔记"],g:["锁"],e:"<h2>前言</h2>\n<p>首先我们要分析下这道题，这简单的一个问题，其实里面还是包含了很多信息的，要想回答好这个问题，面试者至少要知道一下概念：</p>\n<ul>\n<li>Java内存模型</li>\n<li>并发编程有序性问题</li>\n<li>指令重排</li>\n<li>synchronized锁</li>\n<li>可重入锁</li>\n<li>排它锁</li>\n<li>as-if-serial语义</li>\n<li>单线程&amp;多线程</li>\n</ul>\n<h2>标准解答</h2>\n<p>为了进一步提升计算机各方面能力，在硬件层面做了很多优化，如处理器优化和指令重排等，但是这些技术的引入就会导致有序性问题。</p>",r:{minutes:2.39,words:717},t:"为什么Synchronized无法禁止指令重排，却能保证有序性",y:"a"}}],["/study-notes/shangguigu-second/lock/four.html",{loader:()=>e.e(9088).then(e.bind(e,1591)),meta:{d:16790976e5,l:"2023年3月18日",c:["学习笔记"],g:["锁"],e:"<p>自旋锁：spinlock，是指尝试获取锁的线程不会立即阻塞，而是，这样的好处是减少线程上下文切换的消耗，缺点是循环会消耗CPU</p>\n<p>原来提到的比较并交换，底层使用的就是自旋，自旋就是多次尝试，多次访问，不会阻塞的状态就是自旋。</p>\n<figure><figcaption>image-20200315154143781</figcaption></figure>\n<h2>优缺点</h2>\n<p>优点：循环比较获取直到成功为止，没有类似于wait的阻塞</p>\n<p>缺点：当不断自旋的线程越来越多的时候，会因为执行while循环不断的消耗CPU资源</p>\n<h2>手写自旋锁</h2>",r:{minutes:2.37,words:710},t:"Java锁之自旋锁",y:"a"}}],["/study-notes/shangguigu-second/lock/one.html",{loader:()=>e.e(7174).then(e.bind(e,2126)),meta:{d:16790976e5,l:"2023年3月18日",c:["学习笔记"],g:["锁"],e:"<h2>概念</h2>\n<p><strong>独占锁：指该锁一次只能被一个线程所持有。对ReentrantLock和Synchronized而言都是独占锁。</strong></p>\n<p>共享锁：指该锁可以被多个线程锁持有</p>\n<p>对ReentrantReadWriteLock其读锁是共享，其写锁是独占</p>\n<p>写的时候只能一个人写，但是读的时候，可以多个人同时读</p>\n<h2>为什么会有写锁和读锁</h2>\n<p>原来我们使用ReentrantLock创建锁的时候，是独占锁，也就是说一次只能一个线程访问，但是有一个读写分离场景，读的时候想同时进行，因此原来独占锁的并发性就没这么好了，因为读锁并不会造成数据不一致的问题，因此可以多个人共享读</p>",r:{minutes:6.01,words:1802},t:"独占锁（写锁） / 共享锁（读锁） / 互斥锁",y:"a"}}],["/study-notes/shangguigu-second/lock/six.html",{loader:()=>e.e(3178).then(e.bind(e,8990)),meta:{d:16790976e5,l:"2023年3月18日",c:["学习笔记"],g:["锁"],e:"<h2>乐观锁</h2>\n<h3>概念</h3>\n<p>乐观锁：顾名思义，就是十分乐观，它总是认为不会出现问题，无论干什么都不去上锁~，如果出现了问题，再次更新值测试，这里使用了version字段。</p>\n<p>也就是每次更新的时候同时维护一个version字段</p>\n<h3>乐观锁实现方式</h3>\n<ul>\n<li>取出记录时，获取当前的version</li>\n<li>更新时，带上这个version</li>\n<li>执行更新时，set version = newVersion where version = oldVersion</li>\n<li>如果version不对，就更新失败</li>\n</ul>",r:{minutes:1.09,words:328},t:"乐观锁和悲观锁",y:"a"}}],["/study-notes/shangguigu-second/lock/three.html",{loader:()=>e.e(5610).then(e.bind(e,1047)),meta:{d:16784928e5,l:"2023年3月11日",c:["学习笔记"],g:["锁"],e:'<h2>概念</h2>\n<p>可重入锁就是递归锁</p>\n<p>指的是同一线程外层函数获得锁之后，内层递归函数仍然能获取到该锁的代码，在同一线程在外层方法获取锁的时候，在进入内层方法会自动获取锁</p>\n<p>也就是说：</p>\n<p><strong>ReentrantLock / Synchronized 就是一个典型的可重入锁</strong></p>\n<h2>代码</h2>\n<p>可重入锁就是，在一个method1方法中加入一把锁，方法2也加锁了，那么他们拥有的是同一把锁</p>\n<div class="language- line-numbers-mode" data-highlighter="shiki" data-ext="" data-title="" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span>public synchronized void method1() {</span></span>\n<span class="line"><span>\tmethod2();</span></span>\n<span class="line"><span>}</span></span>\n<span class="line"><span></span></span>\n<span class="line"><span>public synchronized void method2() {</span></span>\n<span class="line"><span></span></span>\n<span class="line"><span>}</span></span></code></pre>\n<div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>',r:{minutes:4.18,words:1254},t:"可重入锁(又名递归锁) ReentrantLock",y:"a"}}],["/study-notes/shangguigu-second/lock/two.html",{loader:()=>e.e(9660).then(e.bind(e,9980)),meta:{d:16784928e5,l:"2023年3月11日",c:["学习笔记"],g:["锁"],e:'<h2>概念</h2>\n<h3>公平锁</h3>\n<p>是指多个线程按照申请锁的顺序来获取锁，类似于排队买饭，先来后到，先来先服务，就是公平的，也就是队列</p>\n<h3>非公平锁</h3>\n<p>是指多个线程获取锁的顺序，并不是按照申请锁的顺序，有可能申请的线程比先申请的线程优先获取锁，在高并发环境下，有可能造成优先级翻转，或者饥饿的线程（也就是某个线程一直得不到锁）</p>\n<h2>如何创建</h2>\n<p>并发包中ReentrantLock的创建可以指定析构函数的boolean类型来得到公平锁或者非公平锁，默认是非公平锁</p>\n<div class="language- line-numbers-mode" data-highlighter="shiki" data-ext="" data-title="" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span>/**</span></span>\n<span class="line"><span>* 创建一个可重入锁，true 表示公平锁，false 表示非公平锁。默认非公平锁</span></span>\n<span class="line"><span>*/</span></span>\n<span class="line"><span>Lock lock = new ReentrantLock(true);</span></span></code></pre>\n<div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>',r:{minutes:1.44,words:431},t:"Java锁之公平锁和非公平锁",y:"a"}}],["/study-notes/shangguigu-second/volatile/four.html",{loader:()=>e.e(5149).then(e.bind(e,6704)),meta:{d:16784928e5,l:"2023年3月11日",c:["JUC"],g:["JUC","Volatile"],e:'<h2>单例模式DCL代码</h2>\n<p>首先回顾一下，单线程下的单例模式代码</p>\n<div class="language- line-numbers-mode" data-highlighter="shiki" data-ext="" data-title="" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span>/**</span></span>\n<span class="line"><span> * SingletonDemo（单例模式）</span></span>\n<span class="line"><span> *</span></span>\n<span class="line"><span> * @author: 阿飞</span></span>\n<span class="line"><span> * @create: 2020-03-10-16:40</span></span>\n<span class="line"><span> */</span></span>\n<span class="line"><span>public class SingletonDemo {</span></span>\n<span class="line"><span></span></span>\n<span class="line"><span>    private static SingletonDemo instance = null;</span></span>\n<span class="line"><span></span></span>\n<span class="line"><span>    private SingletonDemo () {</span></span>\n<span class="line"><span>        System.out.println(Thread.currentThread().getName() + "\\t 我是构造方法SingletonDemo");</span></span>\n<span class="line"><span>    }</span></span>\n<span class="line"><span></span></span>\n<span class="line"><span>    public static SingletonDemo getInstance() {</span></span>\n<span class="line"><span>        if(instance == null) {</span></span>\n<span class="line"><span>            instance = new SingletonDemo();</span></span>\n<span class="line"><span>        }</span></span>\n<span class="line"><span>        return instance;</span></span>\n<span class="line"><span>    }</span></span>\n<span class="line"><span></span></span>\n<span class="line"><span>    public static void main(String[] args) {</span></span>\n<span class="line"><span>        // 这里的 == 是比较内存地址</span></span>\n<span class="line"><span>        System.out.println(SingletonDemo.getInstance() == SingletonDemo.getInstance());</span></span>\n<span class="line"><span>        System.out.println(SingletonDemo.getInstance() == SingletonDemo.getInstance());</span></span>\n<span class="line"><span>        System.out.println(SingletonDemo.getInstance() == SingletonDemo.getInstance());</span></span>\n<span class="line"><span>        System.out.println(SingletonDemo.getInstance() == SingletonDemo.getInstance());</span></span>\n<span class="line"><span>    }</span></span>\n<span class="line"><span>}</span></span></code></pre>\n<div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>',r:{minutes:4,words:1201},t:"Volatile的应用",O:4,y:"a"}}],["/study-notes/shangguigu-second/volatile/one.html",{loader:()=>e.e(4013).then(e.bind(e,4273)),meta:{d:16790112e5,l:"2023年3月17日",c:["JUC"],g:["JUC","Volatile"],e:"<h2>谈谈对Volatile的理解</h2>\n<ul>\n<li>JUC（java.util.concurrent）\n<ul>\n<li>进程和线程\n<ul>\n<li>进程：后台运行的程序（我们打开的一个软件，就是进程）</li>\n<li>线程：轻量级的进程，并且一个进程包含多个线程（同在一个软件内，同时运行窗口，就是线程）</li>\n</ul>\n</li>\n<li>并发和并行\n<ul>\n<li>并发：同时访问某个东西，就是并发</li>\n<li>并行：一起做某些事情，就是并行</li>\n</ul>\n</li>\n</ul>\n</li>\n<li>JUC下的三个包\n<ul>\n<li>java.util.concurrent\n<ul>\n<li>java.util.concurrent.atomic</li>\n<li>java.util.concurrent.locks</li>\n</ul>\n</li>\n</ul>\n</li>\n</ul>",r:{minutes:6.41,words:1922},t:"Volatile和JMM内存模型的可见性",O:1,y:"a"}}],["/study-notes/shangguigu-second/volatile/three.html",{loader:()=>e.e(5761).then(e.bind(e,6570)),meta:{d:16784928e5,l:"2023年3月11日",c:["JUC"],g:["JUC","Volatile"],e:'<p>计算机在执行程序时，为了提高性能，编译器和处理器常常会对指令重排，一般分为以下三种：</p>\n<div class="language- line-numbers-mode" data-highlighter="shiki" data-ext="" data-title="" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span>源代码 -&gt; 编译器优化的重排 -&gt; 指令并行的重排 -&gt; 内存系统的重排 -&gt; 最终执行指令</span></span></code></pre>\n<div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0"><div class="line-number"></div></div></div>',r:{minutes:4.07,words:1222},t:"Volatile禁止指令重排",O:3,y:"a"}}],["/study-notes/shangguigu-second/volatile/two.html",{loader:()=>e.e(4559).then(e.bind(e,1344)),meta:{d:16784928e5,l:"2023年3月11日",c:["JUC"],g:["JUC","Volatile"],e:"<h2>前言</h2>\n<p>通过前面对JMM的介绍，我们知道，各个线程对主内存中共享变量的操作都是各个线程各自拷贝到自己的工作内存进行操作后在写回到主内存中的。</p>\n<p>这就可能存在一个线程AAA修改了共享变量X的值，但是还未写入主内存时，另外一个线程BBB又对主内存中同一共享变量X进行操作，但此时A线程工作内存中共享变量X对线程B来说是不可见，这种工作内存与主内存同步延迟现象就造成了可见性问题。</p>\n<h2>原子性</h2>\n<p>不可分割，完整性，也就是说某个线程正在做某个具体业务时，中间不可以被加塞或者被分割，需要具体完成，要么同时成功，要么同时失败。</p>\n<p>数据库也经常提到事务具备原子性</p>",r:{minutes:19.43,words:5829},t:"Volatile不保证原子性",O:2,y:"a"}}],["/404.html",{loader:()=>e.e(7490).then(e.bind(e,4510)),meta:{t:""}}],["/posts/",{loader:()=>e.e(8666).then(e.bind(e,8290)),meta:{t:"Posts"}}],["/problem-record/",{loader:()=>e.e(5060).then(e.bind(e,1962)),meta:{t:"Problem Record"}}],["/vue/",{loader:()=>e.e(1205).then(e.bind(e,3049)),meta:{t:"Vue"}}],["/study-notes/shangguigu-second/",{loader:()=>e.e(9736).then(e.bind(e,5983)),meta:{t:"Shangguigu Second"}}],["/study-notes/shangguigu-second/CountDownLatch_CyclicBarrier_Semaphore/",{loader:()=>e.e(5446).then(e.bind(e,733)),meta:{t:"Count Down Latch Cyclic Barrier Semaphore"}}],["/study-notes/shangguigu-second/JVM/",{loader:()=>e.e(2200).then(e.bind(e,6703)),meta:{t:"JVM"}}],["/study-notes/shangguigu-second/lock/",{loader:()=>e.e(7346).then(e.bind(e,6169)),meta:{t:"Lock"}}],["/study-notes/shangguigu-second/volatile/",{loader:()=>e.e(5045).then(e.bind(e,1980)),meta:{t:"Volatile"}}],["/category/",{loader:()=>e.e(3583).then(e.bind(e,905)),meta:{t:"分类",I:!1}}],["/category/%E5%8D%9A%E5%AE%A2/",{loader:()=>e.e(1080).then(e.bind(e,4162)),meta:{t:"博客 分类",I:!1}}],["/category/python/",{loader:()=>e.e(1034).then(e.bind(e,403)),meta:{t:"Python 分类",I:!1}}],["/category/%E4%BD%9C%E8%80%85/",{loader:()=>e.e(1939).then(e.bind(e,1449)),meta:{t:"作者 分类",I:!1}}],["/category/%E4%BD%BF%E7%94%A8%E6%8C%87%E5%8D%97/",{loader:()=>e.e(4021).then(e.bind(e,4581)),meta:{t:"使用指南 分类",I:!1}}],["/category/%E6%8C%87%E5%8D%97/",{loader:()=>e.e(8622).then(e.bind(e,5573)),meta:{t:"指南 分类",I:!1}}],["/category/%E9%9D%A2%E8%AF%95/",{loader:()=>e.e(1673).then(e.bind(e,8885)),meta:{t:"面试 分类",I:!1}}],["/category/%E9%9D%A2%E8%AF%95%E6%8C%87%E5%8D%97/",{loader:()=>e.e(1171).then(e.bind(e,3201)),meta:{t:"面试指南 分类",I:!1}}],["/category/%E6%A8%B1%E6%A1%83/",{loader:()=>e.e(9080).then(e.bind(e,8104)),meta:{t:"樱桃 分类",I:!1}}],["/category/%E7%81%AB%E9%BE%99%E6%9E%9C/",{loader:()=>e.e(8280).then(e.bind(e,493)),meta:{t:"火龙果 分类",I:!1}}],["/category/%E6%B0%B4%E6%9E%9C/",{loader:()=>e.e(8484).then(e.bind(e,8659)),meta:{t:"水果 分类",I:!1}}],["/category/%E8%8D%89%E8%8E%93/",{loader:()=>e.e(6112).then(e.bind(e,9714)),meta:{t:"草莓 分类",I:!1}}],["/category/%E8%94%AC%E8%8F%9C/",{loader:()=>e.e(3612).then(e.bind(e,993)),meta:{t:"蔬菜 分类",I:!1}}],["/category/%E6%96%87%E4%BB%B6%E4%B8%8B%E8%BD%BD/",{loader:()=>e.e(3665).then(e.bind(e,3202)),meta:{t:"文件下载 分类",I:!1}}],["/category/code/",{loader:()=>e.e(3897).then(e.bind(e,5393)),meta:{t:"code 分类",I:!1}}],["/category/%E5%BC%80%E5%8F%91%E5%B7%A5%E5%85%B7/",{loader:()=>e.e(4491).then(e.bind(e,3784)),meta:{t:"开发工具 分类",I:!1}}],["/category/idea/",{loader:()=>e.e(739).then(e.bind(e,8458)),meta:{t:"IDEA 分类",I:!1}}],["/category/%E4%BB%A3%E7%A0%81%E5%AE%9E%E8%B7%B5/",{loader:()=>e.e(2193).then(e.bind(e,2554)),meta:{t:"代码实践 分类",I:!1}}],["/category/redisson/",{loader:()=>e.e(4441).then(e.bind(e,2898)),meta:{t:"redisson 分类",I:!1}}],["/category/%E5%88%86%E5%B8%83%E5%BC%8F%E9%94%81/",{loader:()=>e.e(187).then(e.bind(e,4943)),meta:{t:"分布式锁 分类",I:!1}}],["/category/%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/",{loader:()=>e.e(5334).then(e.bind(e,8571)),meta:{t:"学习笔记 分类",I:!1}}],["/category/vue%E7%B3%BB%E5%88%97/",{loader:()=>e.e(1026).then(e.bind(e,4084)),meta:{t:"Vue系列 分类",I:!1}}],["/category/juc/",{loader:()=>e.e(9954).then(e.bind(e,5608)),meta:{t:"JUC 分类",I:!1}}],["/category/%E7%BA%BF%E7%A8%8B%E6%B1%A0/",{loader:()=>e.e(8338).then(e.bind(e,3590)),meta:{t:"线程池 分类",I:!1}}],["/category/github/",{loader:()=>e.e(2143).then(e.bind(e,5352)),meta:{t:"GitHub 分类",I:!1}}],["/tag/",{loader:()=>e.e(1797).then(e.bind(e,4103)),meta:{t:"标签",I:!1}}],["/tag/%E7%A6%81%E7%94%A8/",{loader:()=>e.e(1331).then(e.bind(e,2630)),meta:{t:"标签: 禁用",I:!1}}],["/tag/%E5%8A%A0%E5%AF%86/",{loader:()=>e.e(8496).then(e.bind(e,5637)),meta:{t:"标签: 加密",I:!1}}],["/tag/%E5%B8%83%E5%B1%80/",{loader:()=>e.e(609).then(e.bind(e,8661)),meta:{t:"标签: 布局",I:!1}}],["/tag/markdown/",{loader:()=>e.e(7931).then(e.bind(e,7301)),meta:{t:"标签: Markdown",I:!1}}],["/tag/%E9%A1%B5%E9%9D%A2%E9%85%8D%E7%BD%AE/",{loader:()=>e.e(602).then(e.bind(e,721)),meta:{t:"标签: 页面配置",I:!1}}],["/tag/%E4%BD%BF%E7%94%A8%E6%8C%87%E5%8D%97/",{loader:()=>e.e(1431).then(e.bind(e,5198)),meta:{t:"标签: 使用指南",I:!1}}],["/tag/%E7%BA%A2/",{loader:()=>e.e(4068).then(e.bind(e,8616)),meta:{t:"标签: 红",I:!1}}],["/tag/%E5%B0%8F/",{loader:()=>e.e(3215).then(e.bind(e,3128)),meta:{t:"标签: 小",I:!1}}],["/tag/%E5%9C%86/",{loader:()=>e.e(9048).then(e.bind(e,6420)),meta:{t:"标签: 圆",I:!1}}],["/tag/%E5%A4%A7/",{loader:()=>e.e(3047).then(e.bind(e,4561)),meta:{t:"标签: 大",I:!1}}],["/tag/git/",{loader:()=>e.e(8474).then(e.bind(e,9516)),meta:{t:"标签: Git",I:!1}}],["/tag/pdf%E6%96%87%E4%BB%B6%E5%90%88%E5%B9%B6/",{loader:()=>e.e(9491).then(e.bind(e,7868)),meta:{t:"标签: PDF文件合并",I:!1}}],["/tag/redisson/",{loader:()=>e.e(2707).then(e.bind(e,8997)),meta:{t:"标签: redisson",I:!1}}],["/tag/juc/",{loader:()=>e.e(4540).then(e.bind(e,8477)),meta:{t:"标签: JUC",I:!1}}],["/tag/cas/",{loader:()=>e.e(6171).then(e.bind(e,7687)),meta:{t:"标签: CAS",I:!1}}],["/tag/aba%E9%97%AE%E9%A2%98/",{loader:()=>e.e(626).then(e.bind(e,7331)),meta:{t:"标签: ABA问题",I:!1}}],["/tag/volatile/",{loader:()=>e.e(3878).then(e.bind(e,477)),meta:{t:"标签: Volatile",I:!1}}],["/tag/blockingqueue/",{loader:()=>e.e(6244).then(e.bind(e,6062)),meta:{t:"标签: BlockingQueue",I:!1}}],["/tag/cyclicbarrier/",{loader:()=>e.e(3984).then(e.bind(e,2008)),meta:{t:"标签: CyclicBarrier",I:!1}}],["/tag/semaphore/",{loader:()=>e.e(8648).then(e.bind(e,8536)),meta:{t:"标签: Semaphore",I:!1}}],["/tag/countdownlatch/",{loader:()=>e.e(5841).then(e.bind(e,7508)),meta:{t:"标签: CountDownLatch",I:!1}}],["/tag/oom/",{loader:()=>e.e(5123).then(e.bind(e,757)),meta:{t:"标签: OOM",I:!1}}],["/tag/java%E4%B8%AD%E7%9A%84%E5%BC%95%E7%94%A8/",{loader:()=>e.e(8374).then(e.bind(e,561)),meta:{t:"标签: Java中的引用",I:!1}}],["/tag/%E6%AD%BB%E9%94%81/",{loader:()=>e.e(3442).then(e.bind(e,5645)),meta:{t:"标签: 死锁",I:!1}}],["/tag/%E5%9E%83%E5%9C%BE%E6%94%B6%E9%9B%86%E5%99%A8/",{loader:()=>e.e(6517).then(e.bind(e,6347)),meta:{t:"标签: 垃圾收集器",I:!1}}],["/tag/linux%E8%AF%8A%E6%96%AD%E5%8E%9F%E5%9B%A0/",{loader:()=>e.e(4182).then(e.bind(e,4392)),meta:{t:"标签: Linux诊断原因",I:!1}}],["/tag/synchronized/",{loader:()=>e.e(6236).then(e.bind(e,6209)),meta:{t:"标签: Synchronized",I:!1}}],["/tag/lock/",{loader:()=>e.e(5501).then(e.bind(e,7082)),meta:{t:"标签: Lock",I:!1}}],["/tag/%E7%BA%BF%E7%A8%8B%E6%B1%A0/",{loader:()=>e.e(3308).then(e.bind(e,4571)),meta:{t:"标签: 线程池",I:!1}}],["/tag/github/",{loader:()=>e.e(2813).then(e.bind(e,1384)),meta:{t:"标签: GitHub",I:!1}}],["/tag/%E9%94%81/",{loader:()=>e.e(3089).then(e.bind(e,2256)),meta:{t:"标签: 锁",I:!1}}],["/article/",{loader:()=>e.e(7511).then(e.bind(e,9574)),meta:{t:"文章",I:!1}}],["/star/",{loader:()=>e.e(7199).then(e.bind(e,3639)),meta:{t:"星标",I:!1}}],["/timeline/",{loader:()=>e.e(5464).then(e.bind(e,3931)),meta:{t:"时间轴",I:!1}}]])},8761:(i,s,e)=>{e.d(s,{U:()=>n});const n=JSON.parse('{"base":"/","lang":"zh-CN","title":"博客演示","description":"vuepress-theme-hope 的博客演示","head":[],"locales":{}}')},6653:(i,s,e)=>{e.d(s,{K:()=>n});const n=JSON.parse('{"encrypt":{"config":{"/demo/encrypt.html":["$2a$10$ZRxtLFpliOLmi0Xw294Lb.msKiLc31w3JSE8XFavrmso2Mq9bi4Uy"]}},"author":{"name":"樱宁","url":"https://mister-hope.com"},"logo":"https://theme-hope-assets.vuejs.press/logo.svg","repo":"vuepress-theme-hope/vuepress-theme-hope","docsDir":"src","footer":"子在川上曰：“逝者如斯夫，不舍昼夜。","displayFooter":true,"blog":{"description":"子在川上曰：“逝者如斯夫，不舍昼夜。","intro":"/intro.html","medias":{"GitHub":"https://github.com/cuckoocry/vuepress-theme-hope.git"}},"locales":{"/":{"lang":"zh-CN","navbarLocales":{"langName":"简体中文","selectLangAriaLabel":"选择语言"},"metaLocales":{"author":"作者","date":"写作日期","origin":"原创","views":"访问量","category":"分类","tag":"标签","readingTime":"阅读时间","words":"字数","toc":"此页内容","prev":"上一页","next":"下一页","lastUpdated":"上次编辑于","contributors":"贡献者","editLink":"在 GitHub 上编辑此页","print":"打印"},"blogLocales":{"article":"文章","articleList":"文章列表","category":"分类","tag":"标签","timeline":"时间轴","timelineTitle":"昨日不在","all":"全部","intro":"个人介绍","star":"星标","empty":"$text 为空"},"paginationLocales":{"prev":"上一页","next":"下一页","navigate":"跳转到","action":"前往","errorText":"请输入 1 到 $page 之前的页码！"},"outlookLocales":{"themeColor":"主题色","darkmode":"外观","fullscreen":"全屏"},"encryptLocales":{"iconLabel":"文章已加密","placeholder":"输入密码","remember":"记住密码","errorHint":"请输入正确的密码"},"routeLocales":{"skipToContent":"跳至主要內容","notFoundTitle":"页面不存在","notFoundMsg":["这里什么也没有","我们是怎么来到这儿的？","这 是 四 零 四 !","看起来你访问了一个失效的链接"],"back":"返回上一页","home":"带我回家","openInNewWindow":"Open in new window"},"navbar":[{"text":"首页","icon":"home","link":"/"},{"text":"学习笔记","icon":"note","link":"/study-notes/"},{"text":"面试指南","icon":"pen-to-square","link":"/interview-related/"},{"text":"博客相关","icon":"blog","link":"/about-the-blogs/"},{"text":"笔记","icon":"eye","link":"/problem-record/"},{"text":"Vue系列","icon":"VSue","link":"/vue/"},{"text":"博文","icon":"pen-to-square","link":"/posts/"}],"sidebar":{"/study-notes/":[{"text":"大厂面试第二季","icon":"edit","prefix":"shangguigu-second/","collapsible":true,"children":[{"text":"1、Volatile","prefix":"volatile/","collapsible":true,"children":["one","two","three","four"]},"CAS/","ABA/","ArrayList/",{"text":"5、Java的锁","collapsible":true,"prefix":"lock/","children":[{"text":"Java锁之读写锁","icon":"edit","link":"one"},"two","three","four","five","six"]},{"text":"6、CountDownLatch","collapsible":true,"prefix":"CountDownLatch_CyclicBarrier_Semaphore/","children":["countDownLatch","CyclicBarrier","Semaphore"]},"BlockingQueue/","Synchronized-Lock/","ThreadPool/","SiSuo/",{"text":"12、JVM","icon":"edit","collapsible":true,"prefix":"JVM/","children":["one","two","three","four","five","six"]},"Linux/","github/"]},{"text":"大厂面试第三季","icon":"edit","prefix":"大厂面试第三季/","collapsible":true,"children":["","01_字符串常量Java内部加载/","02_闲聊力扣算法第一题/","04_可重入锁理论/","05_LockSupport是什么/","06_waitNotify限制/","07_awaitSignal限制/","08_LockSupport方法介绍/","09_AbstractQueuedSynchronizer之_AQS/","10_Spring/","11_redis/","12_集群高并发情况下如何保证分布式唯一全局Id生成/"]},{"text":"JVM","icon":"edit","prefix":"JVM/","collapsible":true,"children":["",{"text":"内存与垃圾回收篇","icon":"edit","prefix":"1_内存与垃圾回收篇/","collapsible":true,"children":["","1_JVM与Java体系结构/","2_类加载子系统/","3_运行时数据区概述及线程/","4_程序计数器/","5_虚拟机栈/","6_本地方法接口/","7_本地方法栈/","8_堆/","9_方法区/","10_对象实例化内存布局与访问定位/","11_直接内存/","12_执行引擎/","13_StringTable/","14_垃圾回收概述/","15_垃圾回收相关算法/","16_垃圾回收相关概念/","17_垃圾回收器/"]},{"text":"字节码与类的加载篇","icon":"edit","prefix":"2_字节码与类的加载篇/","collapsible":true,"children":["","01-class文件结构/","02-字节码指令集/","03-类的加载过程（类的生命周期）详解/","04-再谈类的加载器/"]},{"text":"性能监控与调优篇","icon":"edit","prefix":"3_性能监控与调优篇/","collapsible":true,"children":["01-概述篇/","02-JVM监控及诊断工具-命令行篇/","03-JVM监控及诊断工具-GUI篇/","04-JVM运行时参数/","05-分析GC日志/","补充：使用OQL语言查询对象信息/","补充：浅堆深堆与内存泄露/"]}]},{"text":"计算机网络","icon":"network","prefix":"计算机网络/","collapsible":true,"children":["","1_三次握手和四次挥手/","2_https和http/","3_TCP中的拥塞控制和流量控制/","4_物理层/","5_数据链路层/","http中的状态码/"]},{"text":"SpringBoot","icon":"edit","prefix":"SpringBoot/","collapsible":true,"children":[""]},{"text":"SpringCloud","icon":"edit","prefix":"SpringCloud/","collapsible":true,"children":["","1_SpringCloud是什么/","2_搭建一个SpringCloud项目/","3_搭建Eureka集群/","4_Eureka停更后的替换/","5_Ribbon负载均衡/","6_OpenFeign实现服务调用/","7_Hystrix中的服务降级和熔断/","8_服务网关Gateway/","9_分布式配置中心SpringCloudConfig/","10_消息总线Bus/","11_消息驱动SpringCloudStream/","12_SpringCloudSleuth分布式请求链路跟踪/","13_Nacos是什么/","14_SpringCloudAlibabaSentinel实现熔断和限流/","15_SpringCloudAlibabaSeata处理分布式事务/"]},{"text":"ElasticStack技术栈","icon":"edit","prefix":"ElasticStack/","collapsible":true,"children":["","1_ElasticSearch介绍与安装/","2_Beats入门简介/","3_Kibana安装与介绍/","4_Logstash入门简介/","5_ElasticStack综合案例/","6_使用ELK搭建蘑菇博客日志收集/"]},{"text":"RocketMQ","icon":"edit","prefix":"RocketMQ/","collapsible":true,"children":[""]},{"text":"Redis","icon":"edit","prefix":"Redis/","collapsible":true,"children":["",{"text":"入门篇","icon":"edit","collapsible":true,"prefix":"入门篇/","children":["","Redis安装说明"]},"实战篇/",{"text":"高级篇","icon":"edit","collapsible":true,"prefix":"高级篇/","children":["01-分布式缓存/","02-多级缓存/","03-Redis最佳实践/"]},"原理篇/"]},{"text":"黑马Java八股","prefix":"黑马Java八股/","collapsible":true,"children":["",{"text":"redis","prefix":"Redis/","collapsible":true,"children":["","Redis相关面试题"]},{"text":"MySQL","prefix":"MySQL/","collapsible":true,"children":["","MySQL面试题-参考回答"]},{"text":"框架","prefix":"框架/","collapsible":true,"children":["","spring","mybatis"]},{"text":"微服务","prefix":"微服务/","collapsible":true,"children":["","微服务面试题-参考回答"]},{"text":"消息中间件","prefix":"消息中间件/","collapsible":true,"children":["","消息中间件面试题-参考回答.md"]},{"text":"集合","prefix":"集合/","collapsible":true,"children":["","Java集合相关面试题"]},{"text":"并发编程","prefix":"并发编程/","collapsible":true,"children":["","多线程相关面试题"]},{"text":"JVM虚拟机","prefix":"JVM虚拟机/","collapsible":true,"children":[""]},{"text":"实际场景","prefix":"企业场景/","collapsible":true,"children":["01-设计模式","02-常见技术场景"]}]},{"text":"SpringBoot常⻅⾯试题总结","link":"spring-boot/"},{"text":"短期突击面试题","link":"video-one/"},{"text":"尚硅谷50道面试题","link":"written-test/"}],"/about-the-blogs/":[{"text":"介绍","icon":"about","link":"readme.md","collapsible":false},{"text":"关于博客","icon":"book","link":"about-blogs","collapsible":false},{"text":"关于学习","icon":"book","link":"about-learn","collapsible":false},{"text":"更新历史","icon":"history","link":"/timeline/"}],"/post/":"structure","/interview-related/":"structure","/problem-record/":"structure"}}}}')},8123:(i,s,e)=>{e.d(s,{v:()=>n});const n={"/post/":[],"/interview-related/":["","javase","collection","java-thread","jvm","spring","mysql","redis","mybatis","network","rocketMQ"],"/problem-record/":["interview-transcripts","idea-tool","github-tips","idea-template","redission","miscellaneous-notes","merge-pdf","delete-more-iif","tool","HTTPInputStreamExample"]}},2878:(i,s,e)=>{e.d(s,{P:()=>n});const n={GitHub:'<svg xmlns="http://www.w3.org/2000/svg" class="icon github-icon" viewBox="0 0 1024 1024"><circle cx="512" cy="512" r="512" fill="#171515"/><path fill="#fff" d="M509.423 146.442c-200.317 0-362.756 162.42-362.756 362.8 0 160.266 103.936 296.24 248.109 344.217 18.139 3.327 24.76-7.872 24.76-17.486 0-8.613-.313-31.427-.49-61.702-100.912 21.923-122.205-48.63-122.205-48.63-16.495-41.91-40.28-53.067-40.28-53.067-32.937-22.51 2.492-22.053 2.492-22.053 36.407 2.566 55.568 37.386 55.568 37.386 32.362 55.438 84.907 39.43 105.58 30.143 3.296-23.444 12.667-39.43 23.032-48.498-80.557-9.156-165.246-40.28-165.246-179.297 0-39.604 14.135-71.988 37.342-97.348-3.731-9.178-16.18-46.063 3.556-96.009 0 0 30.46-9.754 99.76 37.19 28.937-8.048 59.97-12.071 90.823-12.211 30.807.14 61.843 4.165 90.822 12.21 69.26-46.944 99.663-37.189 99.663-37.189 19.792 49.946 7.34 86.831 3.61 96.01 23.25 25.359 37.29 57.742 37.29 97.347 0 139.366-84.82 170.033-165.637 179.013 13.026 11.2 24.628 33.342 24.628 67.182 0 48.498-.445 87.627-.445 99.521 0 9.702 6.535 20.988 24.945 17.444 144.03-48.067 247.881-183.95 247.881-344.175 0-200.378-162.442-362.798-362.802-362.798z"/></svg>'}}},i=>{i.O(0,[6799,4438],(()=>i(i.s=8731))),i.O()}]);