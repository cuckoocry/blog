"use strict";(self.webpackChunkblogs2=self.webpackChunkblogs2||[]).push([[5680],{66262:(e,i)=>{i.A=(e,i)=>{const l=e.__vccOpts||e;for(const[e,n]of i)l[e]=n;return l}},68689:(e,i,l)=>{l.r(i),l.d(i,{comp:()=>c,data:()=>d});var n=l(20641);const a=l.p+"assets/img/img_1.0cc03cf8.png",r=l.p+"assets/img/img.e7eab528.png",t=l.p+"assets/img/img_2.2f05120d.png",s=l.p+"assets/img/img_3.2f94c880.png",o=l.p+"assets/img/img_4.336393cd.png",p=[(0,n.Fv)('<div class="hint-container tip"><p class="hint-container-title">提示</p><p>北京大学公开课《区块链技术与应用》由肖臻老师讲授,主要讲解区块链的基本概念和实现原理，面向广大对区块链技术和应用感兴趣的同学。通过这门课的学习，能够掌握比特币、以太坊等区块链技术的设计思路并有效解决实际问题。</p><p><a href="https://www.bilibili.com/video/BV1Vt411X7JF/?vd_source=7138dfc78c49f602f8d3ed8cfbf0513d" target="_blank" rel="noopener noreferrer">课程来源：https://www.bilibili.com/video/BV1Vt411X7JF/?vd_source=7138dfc78c49f602f8d3ed8cfbf0513d</a></p><p><a href="http://zhenxiao.com/blockchain/" target="_blank" rel="noopener noreferrer">博客地址：ttp://zhenxiao.com/blockchain/</a></p><p>笔记内容主要是根据老师课程来，笔记内容也博采众长，加上自己的理解和总结。</p></div><p>一些笔记： 1、 https://blog.nowcoder.net/n/30cbdb37108b4d93b3a5a93b8226ae31 2、 https://cn.leapwhale.com/zh/article/me0uzckk</p><h2 id="课程大纲" tabindex="-1"><a class="header-anchor" href="#课程大纲"><span>课程大纲</span></a></h2><p><strong>比特币</strong>：</p><ul><li>密码学基础</li><li>比特币的数据结构</li><li>共识协议和系统实现-挖矿算法和难度调整</li><li>比特币脚本</li><li>软分叉和硬分叉</li><li>匿名和隐私保护</li></ul><p><strong>以太坊</strong>：</p><ul><li>概述:基于帐户的分布式账本-数据结构:状态树、交易树、收据树</li><li>GHOST协议</li><li>挖矿:memory-hard mining puzzle-挖矿难度调整</li><li>权益证明 <ul><li>Casper the Friendly Finality Gadget(FFG)-智能合约</li></ul></li></ul><p><strong>总结与展望</strong></p><h2 id="第二讲-比特币中的密码学原理" tabindex="-1"><a class="header-anchor" href="#第二讲-比特币中的密码学原理"><span>第二讲：比特币中的密码学原理</span></a></h2><h2 id="哈希" tabindex="-1"><a class="header-anchor" href="#哈希"><span>哈希</span></a></h2><p>比特币中使用的：Cryptographic Hash Function（密码学哈希函数）</p><h3 id="哈希算法" tabindex="-1"><a class="header-anchor" href="#哈希算法"><span><strong>哈希算法</strong></span></a></h3><p>哈希算法是一种<strong>将任意长度的数据</strong>映射为<strong>固定长度的散列值</strong>（也称为哈希值、摘要或指纹）的算法。哈希算法的主要特点：</p><ol><li>确定性（Determinism）：相同的输入总是产生相同的输出。</li><li>快速计算（高效性）：对于给定的输入，哈希值可以迅速计算出来。</li><li><strong>抗碰撞性(Collision resistance)</strong>：很难找到两个不同的输入，它们的哈希值相同（称为哈希碰撞）。</li><li>不可逆性（单向性）：根据哈希值不能轻易逆推出原始输入。</li><li>扩展性弱：微小的输入变化会导致哈希值的巨大差异（雪崩效应）。</li><li><strong>隐藏性（Hiding）</strong>：隐藏性确保了即使知道哈希值，也不能推测出输入值的任何信息</li><li><strong>Puzzle-friendly</strong>：在特定条件下找到一个满足要求的哈希值应当是计算上困难的。这个特性在工作量证明等机制中非常关键。</li></ol><p>常见的哈希算法包括：</p><ul><li>MD5：产生128位的哈希值，曾经广泛用于数据完整性校验，但由于其抗碰撞性较弱，现在逐渐被弃用。</li><li>SHA-1：产生160位的哈希值，也曾经广泛使用，但由于安全漏洞，已经不再推荐使用。</li><li><strong>SHA-256</strong>：属于SHA-2家族，产生256位的哈希值，广泛应用于安全性要求较高的场景，如区块链、数字签名等。</li></ul><p>哈希算法在密码学、数据完整性校验、数字签名和其他计算机安全领域有着广泛的应用。</p><h3 id="_1、collision-resistance-抗碰撞性" tabindex="-1"><a class="header-anchor" href="#_1、collision-resistance-抗碰撞性"><span>1、Collision resistance（抗碰撞性）</span></a></h3><p><strong>Collision resistance（抗碰撞性）</strong> 是哈希算法的重要属性之一。它指的是对于给定的哈希函数，很难找到两个不同的输入，它们的哈希值是相同的。</p><p>换句话说，抗碰撞性意味着虽然理论上可能存在两个不同的输入产生相同的哈希值（这种情况称为“碰撞”），但要找到这两个不同的输入是非常困难的。这种难度使得哈希算法在很多应用场景中非常有用，例如密码学、数据完整性校验和数字签名等。</p><p>为了更好地理解抗碰撞性，可以将其与其他两个相关的概念作比较：</p><ol><li><p><strong>Preimage resistance（抗原像性）</strong>：给定一个哈希值，很难找到一个输入，使得这个输入的哈希值等于给定的哈希值。</p></li><li><p><strong>Second preimage resistance（抗第二原像性）</strong>：给定一个输入及其对应的哈希值，很难找到另一个不同的输入，使得这个不同的输入的哈希值与第一个输入的哈希值相同。</p></li></ol><p>抗碰撞性专注于避免发现任何两个不同的输入产生相同的哈希值，从而保证哈希函数的唯一性和可靠性。如果一个哈希算法不具备抗碰撞性，那么它可能会容易受到攻击者的利用，使得算法的安全性受到威胁。</p><h3 id="_2、hiding-隐藏性" tabindex="-1"><a class="header-anchor" href="#_2、hiding-隐藏性"><span>2、hiding（隐藏性）</span></a></h3><p>在密码学中，<strong>hiding（隐藏性）</strong> 是指哈希函数的一个属性，通常与承诺方案（commitment schemes）相关。隐藏性确保了即使知道哈希值，也不能推测出输入值的任何信息。这种属性对于某些安全协议和密码学应用至关重要。</p><p>具体来说，隐藏性意味着：</p><ol><li><p><strong>信息隐藏</strong>：给定一个哈希值，应该无法推断出可能产生该哈希值的输入是什么。这保证了输入信息的保密性。</p></li><li><p><strong>不可预测性</strong>：即使攻击者知道哈希值和部分信息，也不能轻易猜测出剩余的隐藏信息。例如，在某些承诺方案中，承诺者可以选择在后续阶段公开或隐藏某些信息，而这种隐藏信息在哈希值生成后是不可预测的。</p></li></ol><h4 id="示例-承诺方案中的隐藏性" tabindex="-1"><a class="header-anchor" href="#示例-承诺方案中的隐藏性"><span>示例：承诺方案中的隐藏性</span></a></h4><p>假设你想和别人玩一个游戏，你要选择一个值，但你不想在开始时公开这个值（防止对方作弊）。你可以将这个值通过一个哈希函数生成哈希值，然后公开这个哈希值。当游戏结束时，你再公开原始值，对方可以验证这个值的哈希值是否与之前公开的一致。这个过程依赖于哈希函数的隐藏性属性，因为在公开哈希值时，对方无法从中推断出你选择的原始值。</p><p>隐藏性在密码学应用中确保了数据的隐私性和不可预测性，是实现安全协议的一种关键机制。</p><h3 id="_3、puzzle-friendly" tabindex="-1"><a class="header-anchor" href="#_3、puzzle-friendly"><span>3、Puzzle-friendly</span></a></h3><p><strong>Puzzle-friendly</strong> 是密码学中描述哈希函数特性的一种术语，通常用于讨论在某些加密协议或共识机制中的应用，尤其是在区块链中。具体来说，<strong>puzzle-friendly</strong> 的意思是，给定一个哈希函数，找到一个特定输出（通常具有特定特征，比如以某几个零开头的哈希值）应该是非常困难的，而唯一可行的方法就是通过反复尝试不同的输入来寻找这个特定的输出。</p><h4 id="puzzle-friendly-的特性" tabindex="-1"><a class="header-anchor" href="#puzzle-friendly-的特性"><span>Puzzle-friendly 的特性</span></a></h4><ol><li><p><strong>计算成本高</strong>：要找到满足条件的哈希值，通常需要进行大量的计算。换句话说，这个问题没有捷径，唯一的解决方法是进行暴力搜索，即反复尝试不同的输入，直到找到符合要求的输出。</p></li><li><p><strong>不可预测性</strong>：由于哈希函数的不可逆性和抗碰撞性，在进行计算之前无法预见哪一个输入会生成所需的哈希值。这意味着每一次尝试都是独立的，无法利用前一次的结果来减少下一次的工作量。</p></li><li><p><strong>公平性</strong>：由于每个人在解这个“谜题”时都必须做相似的工作量，所以在分布式系统或区块链中，这样的哈希函数可以帮助保证系统的公平性。</p></li></ol><h4 id="示例-工作量证明-proof-of-work" tabindex="-1"><a class="header-anchor" href="#示例-工作量证明-proof-of-work"><span>示例：工作量证明（Proof of Work）</span></a></h4><p>在区块链系统中，尤其是比特币这样的加密货币中，工作量证明机制依赖于“puzzle-friendly”哈希函数。矿工们必须找到一个区块头的哈希值，使得这个哈希值低于某个目标难度值。由于“puzzle-friendly”特性，矿工们唯一的选择就是反复尝试不同的随机数（称为“nonce”）来进行计算，直到找到一个符合条件的哈希值。</p><p>这个过程确保了添加新区块需要大量计算资源，从而维护了区块链网络的安全性和公平性。</p><h3 id="_4、digital-commitment-数字承诺" tabindex="-1"><a class="header-anchor" href="#_4、digital-commitment-数字承诺"><span>4、Digital commitment（数字承诺）</span></a></h3><p><strong>Digital commitment（数字承诺）</strong> 是密码学中用于保证数据隐私性和完整性的一种协议或机制。它允许一个人（承诺者）在不透露特定信息内容的情况下“承诺”某个值，然后在未来的某个时间点“揭示”该值。数字承诺具有以下两个关键属性：</p><ol><li><p><strong>隐藏性（Hiding）</strong>：在承诺阶段，承诺者发布的承诺值不泄露所承诺的原始信息。这意味着在揭示之前，任何人都无法知道承诺的内容。</p></li><li><p><strong>绑定性（Binding）</strong>：一旦承诺者发布了一个承诺值，他们就无法改变承诺的内容。也就是说，承诺者无法在揭示阶段选择不同的值，这确保了承诺的不可篡改性。</p></li></ol><h4 id="数字承诺的工作过程" tabindex="-1"><a class="header-anchor" href="#数字承诺的工作过程"><span>数字承诺的工作过程</span></a></h4><p>数字承诺通常分为两个阶段：</p><ol><li><p><strong>承诺阶段（Commit Phase）</strong>：承诺者选择一个秘密值，然后通过某种加密方式生成一个承诺值，将这个承诺值发布或发送给验证者。</p></li><li><p><strong>揭示阶段（Reveal Phase）</strong>：在适当的时间点，承诺者揭示最初的秘密值，验证者可以使用之前的承诺值来验证揭示的值是否正确。</p></li></ol><h4 id="示例" tabindex="-1"><a class="header-anchor" href="#示例"><span>示例</span></a></h4><p>想象一下一个投标系统，其中投标者需要在特定时间之前提交投标金额。为了防止其他人知道他们的投标金额并提出更高的投标，投标者可以在提交金额之前生成一个数字承诺。当所有投标者都提交完毕后，他们再揭示各自的投标金额。通过对比揭示的金额与之前的承诺，系统可以验证投标者是否在投标时间内更改了他们的投标。</p><p>数字承诺在多种场景中被广泛应用，如电子投票、零知识证明、在线协议等，确保数据的隐私性和完整性。</p><h2 id="签名" tabindex="-1"><a class="header-anchor" href="#签名"><span>签名</span></a></h2><h3 id="公钥-public-key-与私钥-private-key" tabindex="-1"><a class="header-anchor" href="#公钥-public-key-与私钥-private-key"><span>公钥（public key）与私钥（private key）</span></a></h3><p>它们是密码学中非对称加密的一部分，通常用于保护数据的安全性和隐私性。以下是关于公钥和私钥的详细说明：</p><h4 id="公钥-public-key" tabindex="-1"><a class="header-anchor" href="#公钥-public-key"><span>公钥（Public Key）</span></a></h4><ul><li><strong>定义</strong>：公钥是一个公开的密钥，任何人都可以获取和使用。</li><li><strong>用途</strong>： <ul><li><strong>加密</strong>：在加密通信中，公钥用于加密消息。因为公钥是公开的，任何人都可以使用它加密数据，但只有与之匹配的私钥可以解密这些数据。</li><li><strong>数字签名验证</strong>：<strong>公钥还用于验证数字签名的真实性</strong>。当某人使用其私钥签名一条消息后，其他人可以使用该人的公钥来验证签名是否有效。</li></ul></li><li><strong>公开性</strong>：正如名字所示，公钥是可以自由发布和共享的，不需要保密。</li></ul><h4 id="私钥-private-key" tabindex="-1"><a class="header-anchor" href="#私钥-private-key"><span>私钥（Private Key）</span></a></h4><ul><li><strong>定义</strong>：私钥是一个秘密的密钥，必须妥善保管，不得泄露。</li><li><strong>用途</strong>： <ul><li><strong>解密</strong>：在加密通信中，私钥用于解密由公钥加密的数据。由于只有拥有私钥的人才能解密数据，因此私钥需要保持绝对的秘密性。</li><li><strong>数字签名</strong>：<strong>私钥用于生成数字签名</strong>，以确保信息的真实性和不可否认性。签名后的消息可以通过公钥进行验证，确保它确实由私钥持有者发送。</li></ul></li><li><strong>保密性</strong>：私钥必须严格保密，任何泄露都会导致安全风险，因为拥有私钥的人可以解密信息或者冒充私钥持有者进行数字签名。</li></ul><h4 id="公钥和私钥的关系" tabindex="-1"><a class="header-anchor" href="#公钥和私钥的关系"><span>公钥和私钥的关系</span></a></h4><p>公钥和私钥是一对密钥，它们是通过某种数学算法生成的，具有以下特性：</p><ul><li>公钥和私钥可以互相配合使用。用公钥加密的信息只能用对应的私钥解密，反之亦然。</li><li>公钥和私钥之间的数学关系使得公钥能够验证由私钥生成的数字签名。</li></ul><h4 id="示例-非对称加密和数字签名" tabindex="-1"><a class="header-anchor" href="#示例-非对称加密和数字签名"><span>示例：非对称加密和数字签名</span></a></h4><ol><li><p><strong>非对称加密</strong>：Alice想给Bob发送一条保密消息。她使用Bob的公钥加密这条消息，然后发送给Bob。由于只有Bob拥有与公钥对应的私钥，所以只有Bob可以解密并阅读这条消息。</p></li><li><p><strong>数字签名</strong>：Bob想证明他发送的一条消息的真实性和完整性。他用自己的<strong>私钥对消息进行签名</strong>，然后将消息和签名一起发送给Alice。Alice可以用Bob的<strong>公钥验证签名</strong>，以确认这条消息确实来自Bob，并且在传输过程中没有被篡改。</p></li></ol><p>公钥和私钥的使用是现代数字安全的重要组成部分，广泛应用于SSL/TLS协议、电子邮件加密、区块链技术、数字证书等领域。</p><h2 id="总结" tabindex="-1"><a class="header-anchor" href="#总结"><span>总结</span></a></h2><ul><li><p>哈希的特性以及理解。</p></li><li><p>签名的概念以及原理。</p></li></ul><p>所以BTC包含的密码学原理就是哈希函数以及签名。哈希函数的一些特性以及签名的方式保证了BTC的安全性。</p><h2 id="第三讲-比特币中的数据结构" tabindex="-1"><a class="header-anchor" href="#第三讲-比特币中的数据结构"><span>第三讲：比特币中的数据结构</span></a></h2><h3 id="hash-pointers-哈希指针" tabindex="-1"><a class="header-anchor" href="#hash-pointers-哈希指针"><span>Hash Pointers（哈希指针）</span></a></h3><p><strong>Hash Pointers（哈希指针）</strong>。哈希指针是一种结合了指针和哈希值的数据结构，广泛应用于区块链、密码学和数据完整性验证等领域。</p><figure><img src="'+a+'" alt="img_1.png" tabindex="0" loading="lazy"><figcaption>img_1.png</figcaption></figure><h4 id="hash-pointer-的概念" tabindex="-1"><a class="header-anchor" href="#hash-pointer-的概念"><span>Hash Pointer 的概念</span></a></h4><ul><li><strong>指针部分</strong>：指向某个数据块或数据对象的存储位置，类似于传统的指针。</li><li><strong>哈希值部分</strong>：存储指向的数据块的哈希值。</li></ul><p>这种组合具有两个重要的特性：</p><ol><li><strong>数据定位</strong>：指针部分可以定位到实际的数据位置（通常是内存地址或存储单元）。</li><li><strong>数据完整性验证</strong>：哈希值部分用于验证指针所指向的数据是否被篡改。通过重新计算指向数据的哈希值并与存储的哈希值进行对比，可以检测出任何数据的变化。</li></ol><h4 id="hash-pointer-的应用" tabindex="-1"><a class="header-anchor" href="#hash-pointer-的应用"><span>Hash Pointer 的应用</span></a></h4><h5 id="_1-区块链" tabindex="-1"><a class="header-anchor" href="#_1-区块链"><span>1. 区块链</span></a></h5><p>在区块链中，Hash Pointer 是区块链数据结构的基础。例如，<strong>比特币区块链中，每个区块包含一个指向前一个区块的哈希指针</strong>。这意味着每个区块不仅包含对前一个区块的引用，还包含前一个区块的哈希值，从而确保了区块链的不可篡改性。如果某人试图篡改历史区块中的数据，他们必须修改所有后续区块的哈希值，这几乎是不可能的。</p><h5 id="_2-merkle-树" tabindex="-1"><a class="header-anchor" href="#_2-merkle-树"><span>2. Merkle 树</span></a></h5><p>Merkle 树是一种基于哈希指针的数据结构，常用于验证数据的完整性。Merkle 树的叶节点是数据的哈希值，而每个非叶节点是其子节点哈希值的组合哈希。根节点的哈希值称为 Merkle 根，通过这个哈希值可以验证整个树的完整性。Merkle 树广泛应用于区块链、分布式系统和版本控制系统中。</p><h5 id="_3-数据版本控制" tabindex="-1"><a class="header-anchor" href="#_3-数据版本控制"><span>3. 数据版本控制</span></a></h5><p>在版本控制系统中，Hash Pointer 可以用于跟踪文件或数据对象的历史版本。每个版本的对象通过哈希指针指向其前一个版本，从而构建一个链条，这样可以有效地管理和验证不同版本之间的差异和完整性。</p><h4 id="hash-pointer-的优点" tabindex="-1"><a class="header-anchor" href="#hash-pointer-的优点"><span>Hash Pointer 的优点</span></a></h4><ul><li><strong>安全性</strong>：通过哈希值的验证，可以确保数据的完整性和防篡改性。</li><li><strong>高效性</strong>：在数据存储和版本控制中，Hash Pointer 提供了一种高效的数据引用和验证机制。</li><li><strong>不可篡改性</strong>：一旦数据被记录下来并形成哈希指针链条，任何篡改都会破坏链条的完整性，从而被检测出来。</li></ul><h4 id="总结-1" tabindex="-1"><a class="header-anchor" href="#总结-1"><span>总结</span></a></h4><p>Hash Pointer 通过将数据指针和哈希值结合，提供了一种强大的数据结构，用于数据完整性验证和防篡改。这种结构在区块链、Merkle 树和版本控制系统中有着广泛的应用。</p><h3 id="tamper-evident-log" tabindex="-1"><a class="header-anchor" href="#tamper-evident-log"><span>Tamper-Evident Log</span></a></h3><p>哈希指针的一个主要优点是它提供了一种不可篡改的日志（tamper-evident log）。</p><ul><li><strong>完整性验证</strong>：由于每个区块都包含前一个区块的哈希值，任何对某个区块的篡改都会改变该区块的哈希值，从而导致其后所有区块的哈希值发生变化。这样，篡改行为可以很容易地被检测到。</li><li><strong>防篡改链</strong>：因为每个区块都依赖前一个区块的哈希值，如果某人试图修改一个区块，不仅需要修改该区块，还需要修改其后的所有区块，这几乎是不可能完成的任务。</li></ul><h3 id="merkle-tree" tabindex="-1"><a class="header-anchor" href="#merkle-tree"><span>Merkle Tree</span></a></h3><p>Merkle Tree （Merkle 树）：是一种用于验证数据完整性的树形结构，广泛应用于分布式系统、区块链和文件系统中。它通过哈希函数确保数据的不可篡改性。</p><p>Binary Tree （二叉树）：是一种每个节点最多有两个子节点的数据结构，广泛用于算法设计和计算机科学的各类问题中。二叉树主要用于高效的查找、插入、删除操作。</p><p><strong>Merkle Tree</strong></p><figure><img src="'+r+'" alt="img.png" tabindex="0" loading="lazy"><figcaption>img.png</figcaption></figure><p>在比特币系统中，Merkle Tree（默克尔树）是用于组织和验证交易数据的一种重要结构。它的基本单元是底层的数据块，这些数据块实际上是一笔笔交易。</p><p>每个block有一个默克尔树，树中每个叶子节点是一个交易的hash值（比特币使用双重SHA256哈希）。叶子节点的数量一定是偶数，然后并非每个block都恰好有偶数个交易。当block有奇数个交易时，最后一个交易会被复制一次（复制仅仅发生在默克尔树中而不是block中！）。</p><p>默克尔树自下而上的进行组织，叶子节点成对分组后将两个hash值组合后生成新的hash值，形成上层的树节点，重复整个过程直到只有一个树节点为止，也就是所说的根节点。<strong>根节点的hash值是整个交易集的唯一标识，保存在block头信息中，用于PoW过程。根节点（Root Hash）代表了整个树的哈希值，只要记住这个根哈希值，就可以检测到整个树上的任意修改。</strong></p><figure><img src="'+t+'" alt="img_2.png" tabindex="0" loading="lazy"><figcaption>img_2.png</figcaption></figure><h3 id="merkle-proof" tabindex="-1"><a class="header-anchor" href="#merkle-proof"><span>Merkle Proof</span></a></h3><p>Merkle Tree 的一个重要好处是可以进行 Merkle Proof。Merkle Proof 是一种用于证明某个数据块（交易）存在于一棵给定的 Merkle Tree 中的方法。</p><h4 id="全节点与轻节点" tabindex="-1"><a class="header-anchor" href="#全节点与轻节点"><span>全节点与轻节点</span></a></h4><ul><li>全节点：保存了整个区块链的所有数据，包括所有的交易和块。</li><li>轻节点：仅保存区块头（Block Header），而不保存所有交易数据。</li></ul><h4 id="轻节点的交易验证" tabindex="-1"><a class="header-anchor" href="#轻节点的交易验证"><span>轻节点的交易验证</span></a></h4><p>假设你在手机上运行的是一个轻节点，如果我给你做了一笔转账，你需要验证这笔交易已经存在于区块链中，这时就需要用到 Merkle Proof。</p><p>从下往上验证。</p><figure><img src="'+s+'" alt="img_3.png" tabindex="0" loading="lazy"><figcaption>img_3.png</figcaption></figure><h4 id="验证过程" tabindex="-1"><a class="header-anchor" href="#验证过程"><span>验证过程</span></a></h4><ul><li>接收路径（Merkle Proof）：轻节点从全节点或其他来源接收一个路径，这个路径包括从目标交易到根哈希的所有哈希值。</li><li>验证路径：轻节点使用这个路径验证该分支路径的哈希值与最终的区块头（Block Header）是否一致。如果一致，就证明该交易存在于区块链中。这个过程证明的是<code>Proof of Membership</code>，其复杂度是 <code>O(log⁡n)</code>。</li></ul><h4 id="proof-of-non-membership" tabindex="-1"><a class="header-anchor" href="#proof-of-non-membership"><span>Proof of Non-Membership</span></a></h4><p>如何证明某个交易不在区块链中（Proof of Non-Membership）, 当前没有比较高效的方法，只能一个个查验，其复杂度是 O(n)。</p><h4 id="sorted-merkle-tree" tabindex="-1"><a class="header-anchor" href="#sorted-merkle-tree"><span>Sorted Merkle Tree</span></a></h4><p>如果交易数据是有序的，根据哈希值排序，这种结构被称为 <code>Sorted Merkle Tree</code>。这种结构允许快速查找某个交易是否存在。但比特币并没有用这种结构，它不需要这个功能，排序也是需要额外代价的。</p><h2 id="第四讲-比特币的共识协议" tabindex="-1"><a class="header-anchor" href="#第四讲-比特币的共识协议"><span>第四讲：比特币的共识协议</span></a></h2><h3 id="btc协议" tabindex="-1"><a class="header-anchor" href="#btc协议"><span>BTC协议</span></a></h3><p>比特币协议包括铸币、交易过程和防止双花攻击等机制。</p><figure><img src="'+o+'" alt="img_4.png" tabindex="0" loading="lazy"><figcaption>img_4.png</figcaption></figure><h3 id="铸币和交易过程" tabindex="-1"><a class="header-anchor" href="#铸币和交易过程"><span>铸币和交易过程</span></a></h3><p>每笔交易包含输入和输出部分：</p><ul><li>输入部分：说明币的来源（即之前的交易）和转账人的公钥。转账人的公钥需要与币来源的公钥相匹配，确保合法性。</li><li>输出部分：指明收款人的公钥。这次交易需要有发送人的签名，确保交易是由合法的持币人发起的。</li></ul><p>哈希指针用于指向之前的某个交易，证明这部分钱的来源，防止凭空捏造币。这个机制也防范了双花攻击。</p><h3 id="double-spending-attack-双重支付攻击-双花攻击" tabindex="-1"><a class="header-anchor" href="#double-spending-attack-双重支付攻击-双花攻击"><span>Double Spending Attack 双重支付攻击（双花攻击）</span></a></h3><p>是指在网络上的数字货币系统中，攻击者试图在同一时间内将同一笔货币资产花费两次。这种攻击如果成功，会导致同一笔货币被两个不同的接收者接受，从而造成货币的重复使用。</p><p>双花攻击是指同一笔比特币被花费两次的情况。比特币通过以下机制防止双花攻击：</p><ul><li>区块链共识：每笔交易都需要被矿工打包进区块，并通过共识机制确认。</li><li>交易验证：当一个新的区块被广播时，网络中的所有节点都会验证其中的每笔交易是否合法，检查是否有双花行为。</li><li>最长链规则：比特币网络会选择最长的合法链。如果双花交易发生在不同的区块中，只有包含在最长链中的交易会被认可。</li></ul><h4 id="双花攻击检测示例" tabindex="-1"><a class="header-anchor" href="#双花攻击检测示例"><span>双花攻击检测示例</span></a></h4><p>假设Alice试图将同一笔比特币分别转给Bob和Charlie：</p><ul><li>广播两笔交易：Alice向Bob和Charlie分别发起两笔相同输入的交易，并几乎同时广播到网络中。</li><li>矿工打包：矿工收到这两笔交易，并分别打包进不同的区块中，形成两个分叉。</li><li>分叉传播：网络中的节点会接收到这两个分叉的区块链，暂时分裂为两个分支。</li><li>最长链选择：随着时间推移，矿工继续挖矿并生成新区块。当某个分支被延长，形成新的最长链时，另一个分支的区块将被丢弃，成为孤块。</li><li>交易确认：最终，只有包含在最长链中的交易会被确认和接受。此时，Alice的双花攻击会失败，因为只有一笔交易会被区块链网络接受，另一笔交易会被回滚。</li></ul><p>比特币挖矿每十分钟一个区块，其实也是为了防止分叉攻击，不然时间太短，叉太多，就容易被攻击</p><h3 id="区块结构" tabindex="-1"><a class="header-anchor" href="#区块结构"><span>区块结构</span></a></h3><p>每个区块由区块头（Block Header）和区块体（Block Body）组成。</p><p>区块头包含以下字段：</p><ul><li><strong>版本号（version）</strong>：表明区块的版本。</li><li><strong>前一个区块的哈希值（previous block hash）</strong>：指向前一个区块，确保链条的连续性。</li><li><strong>Merkle根（Merkle root）</strong>：当前区块中所有交易的哈希值经过Merkle树计算得到的根哈希。</li><li><strong>时间戳（timestamp）</strong>：记录区块创建的时间。</li><li><strong>难度目标（nbits）</strong>：当前区块的挖矿难度。</li><li><strong>随机数（nonce）</strong>：用于挖矿的计数器。</li></ul><p><strong>区块体</strong>包含一个交易列表（transaction list），记录所有包含在该区块中的交易。</p><h3 id="分布式共识" tabindex="-1"><a class="header-anchor" href="#分布式共识"><span>分布式共识</span></a></h3><p>谈到共识，我们可能会想到投票，但是任何基于投票的共识协议都有一个投票权的问题，可能会存在女巫攻击，在比特币系统中简单的采用投票来确定共识是不行的。比特币网络通过**工作量证明（Proof of Work, PoW）**来实现分布式共识，确保所有节点就区块链的状态达成一致。其核心思想是通过消耗计算资源来防止女巫攻击和其他恶意行为。具体过程如下：</p><ul><li>挖矿过程：矿工竞争性地进行大量的哈希运算，试图找到一个满足特定条件的哈希值（即目标值以下的哈希）。</li><li>哈希值计算：矿工对区块头进行哈希运算，区块头包括前一个区块的哈希值、当前区块中的交易Merkle根、时间戳、难度目标（nbits）和随机数（nonce）。</li><li>目标值：难度目标（nbits）决定了哈希值必须小于的目标值。随着网络计算能力的变化，难度调整每2016个区块（大约两周）进行一次。确保新区块生成时间约为每10分钟一次。如果区块生成过快，难度会增加；如果生成过慢，难度会降低。</li></ul><blockquote><p>可否各个节点独立完成区块链构建？ 很明显不行，各个节点独立打包交易，形成区块链，必然无法避免区块链内容不一致。从分布式系统角度来说，账本内容需要取得分布式共识，从而保证区块链内容在不同节点上的一致性。</p></blockquote><p>根据FLP不可能结论，在一个异步系统中，网络时延无上限，即使只有一个成员是有问题的，也不可能达成共识。 根据CAP Theorem（Consistency一致性、Availability可靠性、Partition tolerance容错性），任何一个分布式系统中，最多只能满足其中两个性质。 分布式共识中协议Paxos 可以保证Consistency（若达成共识必然一致），但在某些情况下，可能会一直无法达成共识。【在这里附上一个Paxos协议详解：</p><h4 id="比特币共识协议" tabindex="-1"><a class="header-anchor" href="#比特币共识协议"><span>比特币共识协议</span></a></h4><h3 id="区块验证" tabindex="-1"><a class="header-anchor" href="#区块验证"><span>区块验证</span></a></h3><p>其他节点收到新区块后，会进行一系列验证，以确保区块的合法性：</p><ul><li>哈希值验证：检查区块头的哈希值是否小于难度目标。</li><li>前一个区块的哈希：验证前一个区块的哈希值是否与本地链的最后一个区块匹配。</li><li><strong>交易验证：</strong> 验证区块中的每笔交易是否合法，包括： <ul><li>签名有效性：检查交易的签名是否由合法的私钥生成。</li><li>双花检测：确保每笔输入没有在之前的区块中被花费。</li></ul></li><li>Merkle根验证：检查交易列表的Merkle根是否与区块头中的Merkle根一致。 如果区块通过所有验证，它将被添加到本地区块链中，否则将被拒绝。</li></ul>',137)],h={},c=(0,l(66262).A)(h,[["render",function(e,i){return(0,n.uX)(),(0,n.CE)("div",null,p)}]]),d=JSON.parse('{"path":"/web3/one.html","title":"区块链技术与应用","lang":"zh-CN","frontmatter":{"title":"区块链技术与应用","date":"2024-09-02T00:00:00.000Z","category":["web3"],"tag":["web3","区块链"],"description":"提示 北京大学公开课《区块链技术与应用》由肖臻老师讲授,主要讲解区块链的基本概念和实现原理，面向广大对区块链技术和应用感兴趣的同学。通过这门课的学习，能够掌握比特币、以太坊等区块链技术的设计思路并有效解决实际问题。 课程来源：https://www.bilibili.com/video/BV1Vt411X7JF/?vd_source=7138dfc78...","head":[["meta",{"property":"og:url","content":"https://mister-hope.github.io/blog/web3/one.html"}],["meta",{"property":"og:site_name","content":"撄宁的博客"}],["meta",{"property":"og:title","content":"区块链技术与应用"}],["meta",{"property":"og:description","content":"提示 北京大学公开课《区块链技术与应用》由肖臻老师讲授,主要讲解区块链的基本概念和实现原理，面向广大对区块链技术和应用感兴趣的同学。通过这门课的学习，能够掌握比特币、以太坊等区块链技术的设计思路并有效解决实际问题。 课程来源：https://www.bilibili.com/video/BV1Vt411X7JF/?vd_source=7138dfc78..."}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:locale","content":"zh-CN"}],["meta",{"property":"og:updated_time","content":"2024-09-14T08:45:20.000Z"}],["meta",{"property":"article:author","content":"樱宁"}],["meta",{"property":"article:tag","content":"web3"}],["meta",{"property":"article:tag","content":"区块链"}],["meta",{"property":"article:published_time","content":"2024-09-02T00:00:00.000Z"}],["meta",{"property":"article:modified_time","content":"2024-09-14T08:45:20.000Z"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"区块链技术与应用\\",\\"image\\":[\\"\\"],\\"datePublished\\":\\"2024-09-02T00:00:00.000Z\\",\\"dateModified\\":\\"2024-09-14T08:45:20.000Z\\",\\"author\\":[{\\"@type\\":\\"Person\\",\\"name\\":\\"樱宁\\",\\"url\\":\\"https://mister-hope.com\\"}]}"]]},"headers":[{"level":2,"title":"课程大纲","slug":"课程大纲","link":"#课程大纲","children":[]},{"level":2,"title":"第二讲：比特币中的密码学原理","slug":"第二讲-比特币中的密码学原理","link":"#第二讲-比特币中的密码学原理","children":[]},{"level":2,"title":"哈希","slug":"哈希","link":"#哈希","children":[{"level":3,"title":"哈希算法","slug":"哈希算法","link":"#哈希算法","children":[]},{"level":3,"title":"1、Collision resistance（抗碰撞性）","slug":"_1、collision-resistance-抗碰撞性","link":"#_1、collision-resistance-抗碰撞性","children":[]},{"level":3,"title":"2、hiding（隐藏性）","slug":"_2、hiding-隐藏性","link":"#_2、hiding-隐藏性","children":[]},{"level":3,"title":"3、Puzzle-friendly","slug":"_3、puzzle-friendly","link":"#_3、puzzle-friendly","children":[]},{"level":3,"title":"4、Digital commitment（数字承诺）","slug":"_4、digital-commitment-数字承诺","link":"#_4、digital-commitment-数字承诺","children":[]}]},{"level":2,"title":"签名","slug":"签名","link":"#签名","children":[{"level":3,"title":"公钥（public  key）与私钥（private key）","slug":"公钥-public-key-与私钥-private-key","link":"#公钥-public-key-与私钥-private-key","children":[]}]},{"level":2,"title":"总结","slug":"总结","link":"#总结","children":[]},{"level":2,"title":"第三讲：比特币中的数据结构","slug":"第三讲-比特币中的数据结构","link":"#第三讲-比特币中的数据结构","children":[{"level":3,"title":"Hash Pointers（哈希指针）","slug":"hash-pointers-哈希指针","link":"#hash-pointers-哈希指针","children":[]},{"level":3,"title":"Tamper-Evident Log","slug":"tamper-evident-log","link":"#tamper-evident-log","children":[]},{"level":3,"title":"Merkle Tree","slug":"merkle-tree","link":"#merkle-tree","children":[]},{"level":3,"title":"Merkle Proof","slug":"merkle-proof","link":"#merkle-proof","children":[]}]},{"level":2,"title":"第四讲：比特币的共识协议","slug":"第四讲-比特币的共识协议","link":"#第四讲-比特币的共识协议","children":[{"level":3,"title":"BTC协议","slug":"btc协议","link":"#btc协议","children":[]},{"level":3,"title":"铸币和交易过程","slug":"铸币和交易过程","link":"#铸币和交易过程","children":[]},{"level":3,"title":"Double Spending Attack 双重支付攻击（双花攻击）","slug":"double-spending-attack-双重支付攻击-双花攻击","link":"#double-spending-attack-双重支付攻击-双花攻击","children":[]},{"level":3,"title":"区块结构","slug":"区块结构","link":"#区块结构","children":[]},{"level":3,"title":"分布式共识","slug":"分布式共识","link":"#分布式共识","children":[]},{"level":3,"title":"区块验证","slug":"区块验证","link":"#区块验证","children":[]}]}],"git":{"createdTime":1725285690000,"updatedTime":1726303520000,"contributors":[{"name":"jiang","email":"948742327@qq.com","commits":5}]},"readingTime":{"minutes":22.73,"words":6820},"filePathRelative":"web3/one.md","localizedDate":"2024年9月2日","excerpt":"<div class=\\"hint-container tip\\">\\n<p class=\\"hint-container-title\\">提示</p>\\n<p>北京大学公开课《区块链技术与应用》由肖臻老师讲授,主要讲解区块链的基本概念和实现原理，面向广大对区块链技术和应用感兴趣的同学。通过这门课的学习，能够掌握比特币、以太坊等区块链技术的设计思路并有效解决实际问题。</p>\\n<p><a href=\\"https://www.bilibili.com/video/BV1Vt411X7JF/?vd_source=7138dfc78c49f602f8d3ed8cfbf0513d\\" target=\\"_blank\\" rel=\\"noopener noreferrer\\">课程来源：https://www.bilibili.com/video/BV1Vt411X7JF/?vd_source=7138dfc78c49f602f8d3ed8cfbf0513d</a></p>\\n<p><a href=\\"http://zhenxiao.com/blockchain/\\" target=\\"_blank\\" rel=\\"noopener noreferrer\\">博客地址：ttp://zhenxiao.com/blockchain/</a></p>\\n<p>笔记内容主要是根据老师课程来，笔记内容也博采众长，加上自己的理解和总结。</p>\\n</div>","autoDesc":true}')}}]);