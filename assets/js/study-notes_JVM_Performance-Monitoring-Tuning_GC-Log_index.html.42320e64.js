"use strict";(self.webpackChunkblogs2=self.webpackChunkblogs2||[]).push([[9304],{66262:(i,s)=>{s.A=(i,s)=>{const a=i.__vccOpts||i;for(const[i,t]of s)a[i]=t;return a}},26585:(i,s,a)=>{a.r(s),a.d(s,{comp:()=>n,data:()=>h});var t=a(20641);const e=[(0,t.Fv)('<h2 id="_5-1-gc-分类" tabindex="-1"><a class="header-anchor" href="#_5-1-gc-分类"><span>5.1. GC 分类</span></a></h2><p>针对 HotSpot VM 的实现，它里面的 GC 按照回收区域又分为两大种类型：一种是部分收集（Partial GC），一种是整堆收集（Full GC）</p><ul><li><p>部分收集（Partial GC）：不是完整收集整个 Java 堆的垃圾收集。其中又分为：</p><ul><li>新生代收集（Minor GC / Young GC）：只是新生代（Eden / S0, S1）的垃圾收集</li><li>老年代收集（Major GC / Old GC）：只是老年代的垃圾收集。目前，只有 CMS GC 会有单独收集老年代的行为。<code>&lt;mark&gt;</code>注意，很多时候 Major GC 会和 Full GC 混淆使用，需要具体分辨是老年代回收还是整堆回收。<code>&lt;/mark&gt;</code></li></ul></li><li><p>混合收集（Mixed GC）：收集整个新生代以及部分老年代的垃圾收集。目前，只有 G1 GC 会有这种行为</p></li><li><p>整堆收集（Full GC）：收集整个 java 堆和方法区的垃圾收集。</p></li></ul><h2 id="_5-2-gc-日志分类" tabindex="-1"><a class="header-anchor" href="#_5-2-gc-日志分类"><span>5.2. GC 日志分类</span></a></h2><p><strong>MinorGC</strong></p><p>MinorGC（或 young GC 或 YGC）日志：</p><div class="language-java line-numbers-mode" data-highlighter="shiki" data-ext="java" data-title="java" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;">[</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">GC</span><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;"> (</span><span style="--shiki-light:#C18401;--shiki-dark:#E5C07B;">Allocation</span><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;"> Failure) [PSYoungGen</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">:</span><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;"> 31744K</span><span style="--shiki-light:#C18401;--shiki-dark:#C678DD;">-&gt;</span><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;">2192</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">K</span><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;"> (36864K) ] 31744K</span><span style="--shiki-light:#C18401;--shiki-dark:#C678DD;">-&gt;</span><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;">2200</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">K</span><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;"> (121856K)</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">,</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;"> 0.0139308</span><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;"> secs] [Times</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">:</span><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;"> user</span><span style="--shiki-light:#383A42;--shiki-dark:#56B6C2;">=</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;">0.05</span><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;"> sys</span><span style="--shiki-light:#383A42;--shiki-dark:#56B6C2;">=</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;">0.01</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">,</span><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;"> real</span><span style="--shiki-light:#383A42;--shiki-dark:#56B6C2;">=</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;">0.01</span><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;"> secs]</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><figure><img src="https://img-blog.csdnimg.cn/img_convert/df81757685ca21a927d9335273f561c5.png" alt="image-20210506202126562" tabindex="0" loading="lazy"><figcaption>image-20210506202126562</figcaption></figure><figure><img src="https://img-blog.csdnimg.cn/img_convert/b9a7575380bcdb91b54c0556557d8ad9.png" alt="image-20210506202156090" tabindex="0" loading="lazy"><figcaption>image-20210506202156090</figcaption></figure><p><strong>FullGC</strong></p><div class="language-java line-numbers-mode" data-highlighter="shiki" data-ext="java" data-title="java" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;">[</span><span style="--shiki-light:#C18401;--shiki-dark:#E5C07B;">Full</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;"> GC</span><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;"> (</span><span style="--shiki-light:#C18401;--shiki-dark:#E5C07B;">Metadata</span><span style="--shiki-light:#C18401;--shiki-dark:#E5C07B;"> GC</span><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;"> Threshold) [PSYoungGen</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">:</span><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;"> 5104K</span><span style="--shiki-light:#C18401;--shiki-dark:#C678DD;">-&gt;</span><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;">0</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">K</span><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;"> (132096K) ] [Par01dGen</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">:</span><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;"> 416K</span><span style="--shiki-light:#C18401;--shiki-dark:#C678DD;">-&gt;</span><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;">5453</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">K</span><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;"> (50176K) ]5520K</span><span style="--shiki-light:#C18401;--shiki-dark:#C678DD;">-&gt;</span><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;">5453</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">K</span><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;"> (182272K)</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">,</span><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;"> [Metaspace</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">:</span><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;"> 20637K</span><span style="--shiki-light:#C18401;--shiki-dark:#C678DD;">-&gt;</span><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;">20637</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">K</span><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;"> (1067008K) ]</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">,</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;"> 0.0245883</span><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;"> secs] [Times</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">:</span><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;"> user</span><span style="--shiki-light:#383A42;--shiki-dark:#56B6C2;">=</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;">0.06</span><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;"> sys</span><span style="--shiki-light:#383A42;--shiki-dark:#56B6C2;">=</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;">0.00</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">,</span><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;"> real</span><span style="--shiki-light:#383A42;--shiki-dark:#56B6C2;">=</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;">0.02</span><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;"> secs]</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><figure><img src="https://img-blog.csdnimg.cn/img_convert/0dcb239f0928bc374ac1b376b4189295.png" alt="image-20210506202330868" tabindex="0" loading="lazy"><figcaption>image-20210506202330868</figcaption></figure><figure><img src="https://img-blog.csdnimg.cn/img_convert/7817f28a52c836d5ed08a4b992823f64.png" alt="image-20210506202349072" tabindex="0" loading="lazy"><figcaption>image-20210506202349072</figcaption></figure><h2 id="_5-3-gc-日志结构剖析" tabindex="-1"><a class="header-anchor" href="#_5-3-gc-日志结构剖析"><span>5.3. GC 日志结构剖析</span></a></h2><p><strong>透过日志看垃圾收集器</strong></p><ul><li><p>Serial 收集器：新生代显示 &quot;[DefNew&quot;，即 Default New Generation</p></li><li><p>ParNew 收集器：新生代显示 &quot;[ParNew&quot;，即 Parallel New Generation</p></li><li><p>Parallel Scavenge 收集器：新生代显示&quot;[PSYoungGen&quot;，JDK1.7 使用的即 PSYoungGen</p></li><li><p>Parallel Old 收集器：老年代显示&quot;[ParoldGen&quot;</p></li><li><p>G1 收集器：显示”garbage-first heap“</p></li></ul><p><strong>透过日志看 GC 原因</strong></p><ul><li>Allocation Failure：表明本次引起 GC 的原因是因为新生代中没有足够的区域存放需要分配的数据</li><li>Metadata GCThreshold：Metaspace 区不够用了</li><li>FErgonomics：JVM 自适应调整导致的 GC</li><li>System：调用了 System.gc()方法</li></ul><p><strong>透过日志看 GC 前后情况</strong></p><p>通过图示，我们可以发现 GC 日志格式的规律一般都是：GC 前内存占用-＞ GC 后内存占用（该区域内存总大小）</p><div class="language-java line-numbers-mode" data-highlighter="shiki" data-ext="java" data-title="java" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;">[PSYoungGen</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">:</span><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;"> 5986K</span><span style="--shiki-light:#C18401;--shiki-dark:#C678DD;">-&gt;</span><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;">696</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">K</span><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;"> (8704K) ] 5986K</span><span style="--shiki-light:#C18401;--shiki-dark:#C678DD;">-&gt;</span><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;">704</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">K</span><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;"> (9216K)</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><ul><li><p>中括号内：GC 回收前年轻代堆大小，回收后大小，（年轻代堆总大小）</p></li><li><p>括号外：GC 回收前年轻代和老年代大小，回收后大小，（年轻代和老年代总大小）</p></li></ul><p><code>&lt;mark&gt;</code>注意<code>&lt;/mark&gt;</code>：Minor GC 堆内存总容量 = 9/10 年轻代 + 老年代。原因是 Survivor 区只计算 from 部分，而 JVM 默认年轻代中 Eden 区和 Survivor 区的比例关系，Eden:S0:S1=8:1:1。</p><p><strong>透过日志看 GC 时间</strong></p><p>GC 日志中有三个时间：user，sys 和 real</p><ul><li>user：进程执行用户态代码（核心之外）所使用的时间。这是执行此进程所使用的实际 CPU 时间，其他进程和此进程阻塞的时间并不包括在内。在垃圾收集的情况下，表示 GC 线程执行所使用的 CPU 总时间。</li><li>sys：进程在内核态消耗的 CPU 时间，即在内核执行系统调用或等待系统事件所使用的 CPU 时间</li><li>real：程序从开始到结束所用的时钟时间。这个时间包括其他进程使用的时间片和进程阻塞的时间（比如等待 I/O 完成）。对于并行 gc，这个数字应该接近（用户时间＋系统时间）除以垃圾收集器使用的线程数。</li></ul><p>由于多核的原因，一般的 GC 事件中，real time 是小于 sys time ＋ user time 的，因为一般是多个线程并发的去做 GC，所以 real time 是要小于 sys ＋ user time 的。如果 real ＞ sys ＋ user 的话，则你的应用可能存在下列问题：IO 负载非常重或 CPU 不够用。</p><h2 id="_5-4-gc-日志分析工具" tabindex="-1"><a class="header-anchor" href="#_5-4-gc-日志分析工具"><span>5.4. GC 日志分析工具</span></a></h2><p><strong>GCEasy</strong></p><p>GCEasy 是一款在线的 GC 日志分析器，可以通过 GC 日志分析进行内存泄露检测、GC 暂停原因分析、JVM 配置建议优化等功能，大多数功能是免费的。</p><p>官网地址：<a href="https://gceasy.io/" target="_blank" rel="noopener noreferrer">https://gceasy.io/</a></p><p><strong>GCViewer</strong></p><p>GCViewer 是一款离线的 GC 日志分析器，用于可视化 Java VM 选项 -verbose:gc 和 .NET 生成的数据 -Xloggc:&lt;file&gt;。还可以计算与垃圾回收相关的性能指标（吞吐量、累积的暂停、最长的暂停等）。当通过更改世代大小或设置初始堆大小来调整特定应用程序的垃圾回收时，此功能非常有用。</p><p>源码下载：<a href="https://github.com/chewiebug/GCViewer" target="_blank" rel="noopener noreferrer">https://github.com/chewiebug/GCViewer</a></p><p>运行版本下载：<a href="https://github.com/chewiebug/GCViewer/wiki/Changelog" target="_blank" rel="noopener noreferrer">https://github.com/chewiebug/GCViewer/wiki/Changelog</a></p><p><strong>GChisto</strong></p><ul><li>官网上没有下载的地方，需要自己从 SVN 上拉下来编译</li><li>不过这个工具似乎没怎么维护了，存在不少 bug</li></ul><p><strong>HPjmeter</strong></p><ul><li>工具很强大，但是只能打开由以下参数生成的 GC log，-verbose:gc -Xloggc:gc.log。添加其他参数生成的 gc.log 无法打开</li><li>HPjmeter 集成了以前的 HPjtune 功能，可以分析在 HP 机器上产生的垃圾回收日志文件</li></ul>',39)],l={},n=(0,a(66262).A)(l,[["render",function(i,s){return(0,t.uX)(),(0,t.CE)("div",null,e)}]]),h=JSON.parse('{"path":"/study-notes/JVM/Performance-Monitoring-Tuning/GC-Log/","title":"分析 GC 日志","lang":"zh-CN","frontmatter":{"title":"分析 GC 日志","date":"2023-03-18T00:00:00.000Z","tags":["JVM"],"description":"5.1. GC 分类 针对 HotSpot VM 的实现，它里面的 GC 按照回收区域又分为两大种类型：一种是部分收集（Partial GC），一种是整堆收集（Full GC） 部分收集（Partial GC）：不是完整收集整个 Java 堆的垃圾收集。其中又分为： 新生代收集（Minor GC / Young GC）：只是新生代（Eden / S0,...","head":[["meta",{"property":"og:url","content":"https://mister-hope.github.io/blog/study-notes/JVM/Performance-Monitoring-Tuning/GC-Log/"}],["meta",{"property":"og:site_name","content":"撄宁的博客"}],["meta",{"property":"og:title","content":"分析 GC 日志"}],["meta",{"property":"og:description","content":"5.1. GC 分类 针对 HotSpot VM 的实现，它里面的 GC 按照回收区域又分为两大种类型：一种是部分收集（Partial GC），一种是整堆收集（Full GC） 部分收集（Partial GC）：不是完整收集整个 Java 堆的垃圾收集。其中又分为： 新生代收集（Minor GC / Young GC）：只是新生代（Eden / S0,..."}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:image","content":"https://img-blog.csdnimg.cn/img_convert/df81757685ca21a927d9335273f561c5.png"}],["meta",{"property":"og:locale","content":"zh-CN"}],["meta",{"property":"og:updated_time","content":"2024-08-11T14:10:10.000Z"}],["meta",{"property":"article:author","content":"樱宁"}],["meta",{"property":"article:tag","content":"JVM"}],["meta",{"property":"article:published_time","content":"2023-03-18T00:00:00.000Z"}],["meta",{"property":"article:modified_time","content":"2024-08-11T14:10:10.000Z"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"分析 GC 日志\\",\\"image\\":[\\"https://img-blog.csdnimg.cn/img_convert/df81757685ca21a927d9335273f561c5.png\\",\\"https://img-blog.csdnimg.cn/img_convert/b9a7575380bcdb91b54c0556557d8ad9.png\\",\\"https://img-blog.csdnimg.cn/img_convert/0dcb239f0928bc374ac1b376b4189295.png\\",\\"https://img-blog.csdnimg.cn/img_convert/7817f28a52c836d5ed08a4b992823f64.png\\"],\\"datePublished\\":\\"2023-03-18T00:00:00.000Z\\",\\"dateModified\\":\\"2024-08-11T14:10:10.000Z\\",\\"author\\":[{\\"@type\\":\\"Person\\",\\"name\\":\\"樱宁\\",\\"url\\":\\"https://mister-hope.com\\"}]}"]]},"headers":[{"level":2,"title":"5.1. GC 分类","slug":"_5-1-gc-分类","link":"#_5-1-gc-分类","children":[]},{"level":2,"title":"5.2. GC 日志分类","slug":"_5-2-gc-日志分类","link":"#_5-2-gc-日志分类","children":[]},{"level":2,"title":"5.3. GC 日志结构剖析","slug":"_5-3-gc-日志结构剖析","link":"#_5-3-gc-日志结构剖析","children":[]},{"level":2,"title":"5.4. GC 日志分析工具","slug":"_5-4-gc-日志分析工具","link":"#_5-4-gc-日志分析工具","children":[]}],"git":{"createdTime":1723381883000,"updatedTime":1723385410000,"contributors":[{"name":"jiang","email":"948742327@qq.com","commits":1}]},"readingTime":{"minutes":4.21,"words":1262},"filePathRelative":"study-notes/JVM/Performance-Monitoring-Tuning/GC-Log/README.md","localizedDate":"2023年3月18日","excerpt":"<h2>5.1. GC 分类</h2>\\n<p>针对 HotSpot VM 的实现，它里面的 GC 按照回收区域又分为两大种类型：一种是部分收集（Partial GC），一种是整堆收集（Full GC）</p>\\n<ul>\\n<li>\\n<p>部分收集（Partial GC）：不是完整收集整个 Java 堆的垃圾收集。其中又分为：</p>\\n<ul>\\n<li>新生代收集（Minor GC / Young GC）：只是新生代（Eden / S0, S1）的垃圾收集</li>\\n<li>老年代收集（Major GC / Old GC）：只是老年代的垃圾收集。目前，只有 CMS GC 会有单独收集老年代的行为。<code>&lt;mark&gt;</code>注意，很多时候 Major GC 会和 Full GC 混淆使用，需要具体分辨是老年代回收还是整堆回收。<code>&lt;/mark&gt;</code></li>\\n</ul>\\n</li>\\n<li>\\n<p>混合收集（Mixed GC）：收集整个新生代以及部分老年代的垃圾收集。目前，只有 G1 GC 会有这种行为</p>\\n</li>\\n<li>\\n<p>整堆收集（Full GC）：收集整个 java 堆和方法区的垃圾收集。</p>\\n</li>\\n</ul>","autoDesc":true}')}}]);