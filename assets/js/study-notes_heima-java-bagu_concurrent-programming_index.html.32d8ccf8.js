"use strict";(self.webpackChunkblogs2=self.webpackChunkblogs2||[]).push([[7052],{66262:(i,s)=>{s.A=(i,s)=>{const a=i.__vccOpts||i;for(const[i,n]of s)a[i]=n;return a}},37248:(i,s,a)=>{a.r(s),a.d(s,{comp:()=>is,data:()=>ss});var n=a(20641);const l=a.p+"assets/img/img.fbc5234d.png",e=a.p+"assets/img/img_1.5c5a199f.png",t=a.p+"assets/img/img_2.d309287d.png",h=a.p+"assets/img/img_3.17fb35b9.png",r=a.p+"assets/img/img_4.1eb54567.png",p=a.p+"assets/img/img_5.d25c1291.png",k=a.p+"assets/img/img_6.4eb42af7.png",d=a.p+"assets/img/img_7.dcbb6096.png",o=a.p+"assets/img/img_8.f11ab63e.png",g=a.p+"assets/img/img_9.a4d596b2.png",c=a.p+"assets/img/img_10.e6b87d5a.png",A=a.p+"assets/img/img_11.cfa1c821.png",y=a.p+"assets/img/img_12.5b372d2b.png",B=a.p+"assets/img/img_13.2f21975a.png",m=a.p+"assets/img/img_14.0f08e657.png",u=a.p+"assets/img/img_15.38581b19.png",v=a.p+"assets/img/img_16.2a10ef7f.png",b=a.p+"assets/img/img_17.31e2d140.png",F=a.p+"assets/img/img_18.edbb6722.png",E=a.p+"assets/img/img_19.f9dfea4d.png",C=a.p+"assets/img/img_20.2fce76d9.png",j=a.p+"assets/img/img_21.ceebcdf7.png",f=a.p+"assets/img/img_22.a2041609.png",D=a.p+"assets/img/img_23.c9491a78.png",x=a.p+"assets/img/img_24.ae5790d5.png",_=a.p+"assets/img/img_25.a7b6f2ac.png",U=a.p+"assets/img/img_26.38b60042.png",w=a.p+"assets/img/img_27.741e675e.png",L=(0,n.Fv)('<div class="hint-container tip"><p class="hint-container-title">提示</p><p><a href="https://www.bilibili.com/video/BV1yT411H7YK?p=86&amp;spm_id_from=pageDriver&amp;vd_source=7138dfc78c49f602f8d3ed8cfbf0513d" target="_blank" rel="noopener noreferrer">多线程相关面试题视频</a></p><p><a href="https://pan.baidu.com/disk/main?from=homeFlow&amp;login_type=weixin&amp;_at_=1697339186893#/index?category=all&amp;path=%2F%E9%BB%91%E9%A9%AC%E9%9D%A2%E8%AF%952023%2F08-%E5%B9%B6%E5%8F%91%E7%BC%96%E7%A8%8B%E7%AF%87%2F%E4%BB%A3%E7%A0%81" target="_blank" rel="noopener noreferrer">代码资源</a></p><p><a href="https://gitee.com/cuckoocry/heima-demo" target="_blank" rel="noopener noreferrer">代码地址【经过整理组合】</a></p></div><h2 id="总览" tabindex="-1"><a class="header-anchor" href="#总览"><span>总览</span></a></h2><figure><img src="'+l+'" alt="img.png" tabindex="0" loading="lazy"><figcaption>img.png</figcaption></figure><h2 id="线程的基础知识" tabindex="-1"><a class="header-anchor" href="#线程的基础知识"><span>线程的基础知识</span></a></h2><h3 id="_1、线程和进程的区别" tabindex="-1"><a class="header-anchor" href="#_1、线程和进程的区别"><span>1、线程和进程的区别？</span></a></h3><p>二者对比</p><ul><li>进程是正在运行程序的实例，进程中包含了线程，每个线程执行不同的任务</li><li>不同的进程使用不同的内存空间，在当前进程下的所有线程可以共享内存空间</li><li>线程更轻量，线程上下文切换成本一般上要比进程上下文切换低 ( 上下文切换指的是从一个线程切换到另一个线程 )</li></ul><h3 id="_2、并行与并发有什么区别" tabindex="-1"><a class="header-anchor" href="#_2、并行与并发有什么区别"><span>2、并行与并发有什么区别？</span></a></h3><p><strong>并发</strong>：两个及两个以上的作业在同一 <strong>时间段</strong> 内执行。 <strong>并行</strong>：两个及两个以上的作业在同一 <strong>时刻</strong> 执行。</p><p>最关键的点是：是否是<strong>同时</strong>执行</p><p>另一种说法： 现在都是多核 CPU ，在多核 CPU 下</p><ul><li>并发是同一时间应对多件事情的能力，多个线程轮流使用一个或多个 CPU</li><li>并行是同一时间动手做多件事情的能力， 4 核 CPU 同时执行 4 个线程</li></ul><h3 id="_3、创建线程的方式有哪些" tabindex="-1"><a class="header-anchor" href="#_3、创建线程的方式有哪些"><span>3、<strong>创建线程的方式有哪些</strong>？</span></a></h3><p>共有四种方式可以创建线程，分别是：</p><ul><li>继承 Thread 类</li><li>实现 Runnable 接口</li><li>实现 Callable 接口</li><li>线程池创建线程</li></ul><ol><li>继承Thread类，重写run()方法，调用start()方法启动线程</li></ol><div class="language-java line-numbers-mode" data-highlighter="shiki" data-ext="java" data-title="java" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">public</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;"> class</span><span style="--shiki-light:#C18401;--shiki-dark:#E5C07B;"> MyThread</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;"> extends</span><span style="--shiki-light:#C18401;--shiki-dark:#E5C07B;"> Thread</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> {</span></span>\n<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">    @</span><span style="--shiki-light:#A626A4;--shiki-dark:#E5C07B;">Override</span></span>\n<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">    public</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;"> void</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;"> run</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">()</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> {</span></span>\n<span class="line"><span style="--shiki-light:#E45649;--shiki-dark:#E5C07B;">        System</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#E45649;--shiki-dark:#E5C07B;">out</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">println</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">&quot;MyThread...run...&quot;</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">);</span></span>\n<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">    }</span></span>\n<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">    public</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;"> static</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;"> void</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;"> main</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(</span><span style="--shiki-light:#C18401;--shiki-dark:#E5C07B;">String</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">[] </span><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;--shiki-light-font-style:inherit;--shiki-dark-font-style:italic;">args</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">)</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> {</span></span>\n<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-dark:#7F848E;--shiki-light-font-style:italic;--shiki-dark-font-style:italic;">        // 创建 MyThread 对象</span></span>\n<span class="line"><span style="--shiki-light:#C18401;--shiki-dark:#E5C07B;">        MyThread</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;"> t1</span><span style="--shiki-light:#383A42;--shiki-dark:#56B6C2;"> =</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;"> new</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;"> MyThread</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">() ;</span></span>\n<span class="line"><span style="--shiki-light:#C18401;--shiki-dark:#E5C07B;">        MyThread</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;"> t2</span><span style="--shiki-light:#383A42;--shiki-dark:#56B6C2;"> =</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;"> new</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;"> MyThread</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">() ;</span></span>\n<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-dark:#7F848E;--shiki-light-font-style:italic;--shiki-dark-font-style:italic;">        // 调用 start 方法启动线程</span></span>\n<span class="line"><span style="--shiki-light:#E45649;--shiki-dark:#E5C07B;">        t1</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">start</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">();</span></span>\n<span class="line"><span style="--shiki-light:#E45649;--shiki-dark:#E5C07B;">        t2</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">start</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">();</span></span>\n<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">    }</span></span>\n<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">}</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ol start="2"><li>实现 Runnable 接口，重写run()方法，调用start()方法启动线程</li></ol><div class="language-java line-numbers-mode" data-highlighter="shiki" data-ext="java" data-title="java" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">public</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;"> class</span><span style="--shiki-light:#C18401;--shiki-dark:#E5C07B;"> RunnableTask</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;"> implements</span><span style="--shiki-light:#C18401;--shiki-dark:#E5C07B;"> Runnable</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> {</span></span>\n<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;">    </span></span>\n<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">   @</span><span style="--shiki-light:#A626A4;--shiki-dark:#E5C07B;">Override</span></span>\n<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">   public</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;"> void</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;"> run</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">()</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> {</span></span>\n<span class="line"><span style="--shiki-light:#E45649;--shiki-dark:#E5C07B;">      System</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#E45649;--shiki-dark:#E5C07B;">out</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">println</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">&quot;Runnable!&quot;</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">);</span></span>\n<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">   }</span></span>\n<span class="line"></span>\n<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">   public</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;"> static</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;"> void</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;"> main</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(</span><span style="--shiki-light:#C18401;--shiki-dark:#E5C07B;">String</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">[] </span><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;--shiki-light-font-style:inherit;--shiki-dark-font-style:italic;">args</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">)</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> {</span></span>\n<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-dark:#7F848E;--shiki-light-font-style:italic;--shiki-dark-font-style:italic;">       // 创建RunnableTask对象</span></span>\n<span class="line"><span style="--shiki-light:#C18401;--shiki-dark:#E5C07B;">      RunnableTask</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;"> task</span><span style="--shiki-light:#383A42;--shiki-dark:#56B6C2;"> =</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;"> new</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;"> RunnableTask</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">();</span></span>\n<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">      </span></span>\n<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-dark:#7F848E;--shiki-light-font-style:italic;--shiki-dark-font-style:italic;">      // 创建Thread对象</span></span>\n<span class="line"><span style="--shiki-light:#C18401;--shiki-dark:#E5C07B;">      Thread</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;"> thread</span><span style="--shiki-light:#383A42;--shiki-dark:#56B6C2;"> =</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;"> new</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;"> Thread</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(task);</span></span>\n<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">      </span></span>\n<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-dark:#7F848E;--shiki-light-font-style:italic;--shiki-dark-font-style:italic;">      // 启动调用</span></span>\n<span class="line"><span style="--shiki-light:#E45649;--shiki-dark:#E5C07B;">      thread</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">start</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">();</span></span>\n<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">   }</span></span>\n<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">}</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ol start="3"><li>实现Callable接口，重写<code>call()</code>方法，这种方式可以通过<code>FutureTask</code>获取任务执行的返回值。需要使用ExecutorService来提交Callable任务。</li></ol><div class="language-java line-numbers-mode" data-highlighter="shiki" data-ext="java" data-title="java" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">public</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;"> class</span><span style="--shiki-light:#C18401;--shiki-dark:#E5C07B;"> CallerTask</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;"> implements</span><span style="--shiki-light:#C18401;--shiki-dark:#E5C07B;"> Callable</span><span style="--shiki-light:#C18401;--shiki-dark:#ABB2BF;">&lt;</span><span style="--shiki-light:#C18401;--shiki-dark:#E5C07B;">String</span><span style="--shiki-light:#C18401;--shiki-dark:#ABB2BF;">&gt;</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> {</span></span>\n<span class="line"></span>\n<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">   @</span><span style="--shiki-light:#A626A4;--shiki-dark:#E5C07B;">Override</span></span>\n<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">   public</span><span style="--shiki-light:#C18401;--shiki-dark:#E5C07B;"> String</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;"> call</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">()</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;"> throws</span><span style="--shiki-light:#C18401;--shiki-dark:#E5C07B;"> Exception</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> {</span></span>\n<span class="line"><span style="--shiki-light:#E45649;--shiki-dark:#E5C07B;">      System</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#E45649;--shiki-dark:#E5C07B;">out</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">println</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(</span><span style="--shiki-light:#E45649;--shiki-dark:#E5C07B;">Thread</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">currentThread</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">().</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">getName</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">());</span></span>\n<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">      return</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> &quot;Hello,i am running!&quot;</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">;</span></span>\n<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">   }</span></span>\n<span class="line"></span>\n<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">   public</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;"> static</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;"> void</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;"> main</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(</span><span style="--shiki-light:#C18401;--shiki-dark:#E5C07B;">String</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">[] </span><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;--shiki-light-font-style:inherit;--shiki-dark-font-style:italic;">args</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">)</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> {</span></span>\n<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-dark:#7F848E;--shiki-light-font-style:italic;--shiki-dark-font-style:italic;">       // 创建 CallerTask 对象</span></span>\n<span class="line"><span style="--shiki-light:#C18401;--shiki-dark:#E5C07B;">       CallerTask</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;"> callerTask</span><span style="--shiki-light:#383A42;--shiki-dark:#56B6C2;"> =</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">  new</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;"> CallerTask</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">()</span></span>\n<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-dark:#7F848E;--shiki-light-font-style:italic;--shiki-dark-font-style:italic;">       //创建异步任务 FutureTask</span></span>\n<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">       FutureTask&lt;String&gt; task </span><span style="--shiki-light:#383A42;--shiki-dark:#56B6C2;">=</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;"> new</span><span style="--shiki-light:#C18401;--shiki-dark:#E5C07B;"> FutureTask</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">&lt;&gt;(callerTask);</span></span>\n<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-dark:#7F848E;--shiki-light-font-style:italic;--shiki-dark-font-style:italic;">       // 创建Thread对象</span></span>\n<span class="line"><span style="--shiki-light:#C18401;--shiki-dark:#E5C07B;">       Thread</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;"> thread</span><span style="--shiki-light:#383A42;--shiki-dark:#56B6C2;"> =</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;"> new</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;"> Thread</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(task);</span></span>\n<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">       </span></span>\n<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-dark:#7F848E;--shiki-light-font-style:italic;--shiki-dark-font-style:italic;">       // 调用 start 方法启动线程</span></span>\n<span class="line"><span style="--shiki-light:#E45649;--shiki-dark:#E5C07B;">       thread</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">start</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">();</span></span>\n<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">       </span></span>\n<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">      try</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> {</span></span>\n<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-dark:#7F848E;--shiki-light-font-style:italic;--shiki-dark-font-style:italic;">         // 等待执行完成，并获取返回结果</span></span>\n<span class="line"><span style="--shiki-light:#C18401;--shiki-dark:#E5C07B;">         String</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;"> result</span><span style="--shiki-light:#383A42;--shiki-dark:#56B6C2;"> =</span><span style="--shiki-light:#E45649;--shiki-dark:#E5C07B;"> task</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">get</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">();</span></span>\n<span class="line"><span style="--shiki-light:#E45649;--shiki-dark:#E5C07B;">         System</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#E45649;--shiki-dark:#E5C07B;">out</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">println</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(result);</span></span>\n<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">      } </span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">catch</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> (</span><span style="--shiki-light:#C18401;--shiki-dark:#E5C07B;">InterruptedException</span><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;--shiki-light-font-style:inherit;--shiki-dark-font-style:italic;"> e</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">) {</span></span>\n<span class="line"><span style="--shiki-light:#E45649;--shiki-dark:#E5C07B;">         e</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">printStackTrace</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">();</span></span>\n<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">      } </span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">catch</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> (</span><span style="--shiki-light:#C18401;--shiki-dark:#E5C07B;">ExecutionException</span><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;--shiki-light-font-style:inherit;--shiki-dark-font-style:italic;"> e</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">) {</span></span>\n<span class="line"><span style="--shiki-light:#E45649;--shiki-dark:#E5C07B;">         e</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">printStackTrace</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">();</span></span>\n<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">      }</span></span>\n<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">   }</span></span>\n<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">}</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ol start="4"><li>线程池 (http://localhost:8099/xiaofeipeng/study-notes/%E5%A4%A7%E5%8E%82%E9%9D%A2%E8%AF%95%E7%AC%AC%E4%BA%8C%E5%AD%A3/10_%E7%BA%BF%E7%A8%8B%E6%B1%A0/)</li></ol><div class="language-java line-numbers-mode" data-highlighter="shiki" data-ext="java" data-title="java" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">public</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;"> class</span><span style="--shiki-light:#C18401;--shiki-dark:#E5C07B;"> Main</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> {</span></span>\n<span class="line"></span>\n<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">    public</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;"> static</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;"> void</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;"> main</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(</span><span style="--shiki-light:#C18401;--shiki-dark:#E5C07B;">String</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">[] </span><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;--shiki-light-font-style:inherit;--shiki-dark-font-style:italic;">args</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">)</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> {</span></span>\n<span class="line"></span>\n<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-dark:#7F848E;--shiki-light-font-style:italic;--shiki-dark-font-style:italic;">        // 手写线程池</span></span>\n<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">        final</span><span style="--shiki-light:#C18401;--shiki-dark:#E5C07B;"> Integer</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;"> corePoolSize</span><span style="--shiki-light:#383A42;--shiki-dark:#56B6C2;"> =</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;"> 2</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">;</span></span>\n<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">        final</span><span style="--shiki-light:#C18401;--shiki-dark:#E5C07B;"> Integer</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;"> maximumPoolSize</span><span style="--shiki-light:#383A42;--shiki-dark:#56B6C2;"> =</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;"> 5</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">;</span></span>\n<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">        final</span><span style="--shiki-light:#C18401;--shiki-dark:#E5C07B;"> Long</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;"> keepAliveTime</span><span style="--shiki-light:#383A42;--shiki-dark:#56B6C2;"> =</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;"> 1L</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">;</span></span>\n<span class="line"></span>\n<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-dark:#7F848E;--shiki-light-font-style:italic;--shiki-dark-font-style:italic;">        // 自定义线程池，只改变了LinkBlockingQueue的队列大小</span></span>\n<span class="line"><span style="--shiki-light:#C18401;--shiki-dark:#E5C07B;">        ExecutorService</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;"> executorService</span><span style="--shiki-light:#383A42;--shiki-dark:#56B6C2;"> =</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;"> new</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;"> ThreadPoolExecutor</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(</span></span>\n<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">                corePoolSize,</span></span>\n<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">                maximumPoolSize,</span></span>\n<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">                keepAliveTime,</span></span>\n<span class="line"><span style="--shiki-light:#E45649;--shiki-dark:#E5C07B;">                TimeUnit</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#E45649;--shiki-dark:#E5C07B;">SECONDS</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">,</span></span>\n<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">                new</span><span style="--shiki-light:#C18401;--shiki-dark:#E5C07B;"> LinkedBlockingQueue</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">&lt;&gt;(</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;">3</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">),</span></span>\n<span class="line"><span style="--shiki-light:#E45649;--shiki-dark:#E5C07B;">                Executors</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">defaultThreadFactory</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(),</span></span>\n<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">                new</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> ThreadPoolExecutor.</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">AbortPolicy</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">());</span></span>\n<span class="line"></span>\n<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">        try</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> {</span></span>\n<span class="line"></span>\n<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-dark:#7F848E;--shiki-light-font-style:italic;--shiki-dark-font-style:italic;">            // 循环十次，模拟业务办理，让5个线程处理这10个请求</span></span>\n<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">            for</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> (</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">int</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;"> i</span><span style="--shiki-light:#383A42;--shiki-dark:#56B6C2;"> =</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;"> 0</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">; i </span><span style="--shiki-light:#383A42;--shiki-dark:#56B6C2;">&lt;</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;"> 10</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">; i++) {</span></span>\n<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">                final</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;"> int</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;"> tempInt</span><span style="--shiki-light:#383A42;--shiki-dark:#56B6C2;"> =</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> i;</span></span>\n<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-dark:#7F848E;--shiki-light-font-style:italic;--shiki-dark-font-style:italic;">                //executorService.submit(() -&gt; Thread.currentThread().getName());</span></span>\n<span class="line"></span>\n<span class="line"><span style="--shiki-light:#E45649;--shiki-dark:#E5C07B;">                executorService</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">execute</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(() </span><span style="--shiki-light:#C18401;--shiki-dark:#C678DD;">-&gt;</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> {</span></span>\n<span class="line"><span style="--shiki-light:#E45649;--shiki-dark:#E5C07B;">                    System</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#E45649;--shiki-dark:#E5C07B;">out</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">println</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(</span><span style="--shiki-light:#E45649;--shiki-dark:#E5C07B;">Thread</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">currentThread</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">().</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">getName</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">() </span><span style="--shiki-light:#383A42;--shiki-dark:#56B6C2;">+</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> &quot;</span><span style="--shiki-light:#0184BC;--shiki-dark:#56B6C2;">\\t</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> 给用户:&quot;</span><span style="--shiki-light:#383A42;--shiki-dark:#56B6C2;"> +</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> tempInt </span><span style="--shiki-light:#383A42;--shiki-dark:#56B6C2;">+</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> &quot; 办理业务&quot;</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">);</span></span>\n<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">                });</span></span>\n<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">            }</span></span>\n<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">        } </span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">catch</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> (</span><span style="--shiki-light:#C18401;--shiki-dark:#E5C07B;">Exception</span><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;--shiki-light-font-style:inherit;--shiki-dark-font-style:italic;"> e</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">) {</span></span>\n<span class="line"><span style="--shiki-light:#E45649;--shiki-dark:#E5C07B;">            e</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">printStackTrace</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">();</span></span>\n<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">        } </span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">finally</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> {</span></span>\n<span class="line"><span style="--shiki-light:#E45649;--shiki-dark:#E5C07B;">            executorService</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">shutdown</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">();</span></span>\n<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">        }</span></span>\n<span class="line"></span>\n<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">    }</span></span>\n<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">}</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="runnable-和-callable-有什么区别" tabindex="-1"><a class="header-anchor" href="#runnable-和-callable-有什么区别"><span>Runnable 和 Callable 有什么区别？</span></a></h4><ol><li>Runnable 接口 run 方法没有返回值</li><li>Callable 接口 call 方法有返回值，是个泛型，和 Future 、 FutureTask 配合可以用来获取异步执行的结果</li><li>Callable 接口的 <code>call()</code> 方法允许抛出异常；而 Runnable 接口的 run() 方法的异常只能在内部消化，不能继续上抛</li></ol><h4 id="线程的-run-和-start-有什么区别" tabindex="-1"><a class="header-anchor" href="#线程的-run-和-start-有什么区别"><span>线程的 run() 和 start() 有什么区别？</span></a></h4><p>start(): 用来启动线程，通过该线程调用 run 方法执行 run 方法中所定义的逻辑代码。 start 方法只能被调用一次。 run(): 封装了要被线程执行的代码，可以被调用多次。</p><h4 id="总结" tabindex="-1"><a class="header-anchor" href="#总结"><span>总结</span></a></h4><ol><li>创建线程的方式有哪些？</li></ol><ul><li>继承 Thread 类</li><li>实现 runnable 接口</li><li>实现 Callable 接口</li><li>线程池创建线程 ( 项目中使用方式 )</li></ul><ol start="2"><li>runnable 和 callable 有什么区别</li></ol><ul><li>Runnable 接口 run 方法没有返回值</li><li>Callable 接口 call 方法有返回值，需要 FutureTask 获取结果</li><li>Callable 接口的 call() 方法允许抛出异常；而 Runnable 接口的 run() 方法的异常只能在内部消化，不能继续上抛</li></ul><ol start="3"><li>run() 和 start() 有什么区别？</li></ol><ul><li>start(): 用来启动线程，通过该线程调用 run 方法执行 run 方法中所定义的逻辑代码。 start 方法只能被调用一次。</li><li>run(): 封装了要被线程执行的代码，可以被调用多次。</li></ul><h3 id="_4、线程包括哪些状态-状态之间是如何变化的" tabindex="-1"><a class="header-anchor" href="#_4、线程包括哪些状态-状态之间是如何变化的"><span>4、线程包括哪些状态，状态之间是如何变化的</span></a></h3><p>参考:<a href="https://javaguide.cn/java/concurrent/java-concurrent-questions-01.html#%E8%AF%B4%E8%AF%B4%E7%BA%BF%E7%A8%8B%E7%9A%84%E7%94%9F%E5%91%BD%E5%91%A8%E6%9C%9F%E5%92%8C%E7%8A%B6%E6%80%81" target="_blank" rel="noopener noreferrer">线程的生命周期</a></p><p>线程的状态可以参考 JDK 中的 Thread 类中的枚举 State 。</p><div class="language-java line-numbers-mode" data-highlighter="shiki" data-ext="java" data-title="java" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">public</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;"> enum</span><span style="--shiki-light:#C18401;--shiki-dark:#E5C07B;"> State</span><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;"> {</span></span>\n<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-dark:#7F848E;--shiki-light-font-style:italic;--shiki-dark-font-style:italic;">    // 尚未启动的线程的线程状态</span></span>\n<span class="line"><span style="--shiki-light:#986801;--shiki-dark:#D19A66;">    NEW</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">,</span></span>\n<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-dark:#7F848E;--shiki-light-font-style:italic;--shiki-dark-font-style:italic;">    // 可运行线程的线程状态。</span></span>\n<span class="line"><span style="--shiki-light:#986801;--shiki-dark:#D19A66;">    RUNNABLE</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">,</span></span>\n<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-dark:#7F848E;--shiki-light-font-style:italic;--shiki-dark-font-style:italic;">    // 线程阻塞等待监视器锁的线程状态。</span></span>\n<span class="line"><span style="--shiki-light:#986801;--shiki-dark:#D19A66;">    BLOCKED</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">,</span></span>\n<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-dark:#7F848E;--shiki-light-font-style:italic;--shiki-dark-font-style:italic;">    // 等待线程的线程状态</span></span>\n<span class="line"><span style="--shiki-light:#986801;--shiki-dark:#D19A66;">    WAITING</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">,</span></span>\n<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-dark:#7F848E;--shiki-light-font-style:italic;--shiki-dark-font-style:italic;">    // 具有指定等待时间的等待线程的线程状态</span></span>\n<span class="line"><span style="--shiki-light:#986801;--shiki-dark:#D19A66;">    TIMED_WAITING</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">,</span><span style="--shiki-light:#A0A1A7;--shiki-dark:#7F848E;--shiki-light-font-style:italic;--shiki-dark-font-style:italic;">// 已终止线程的线程状态。线程已完成执行</span></span>\n<span class="line"><span style="--shiki-light:#986801;--shiki-dark:#D19A66;">    TERMINATED</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">;</span></span>\n<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;">}</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><figure><img src="'+e+'" alt="img_1.png" tabindex="0" loading="lazy"><figcaption>img_1.png</figcaption></figure><h4 id="总结-1" tabindex="-1"><a class="header-anchor" href="#总结-1"><span>总结</span></a></h4><ol><li>线程包括哪些状态</li></ol><p>新建（ NEW ） 可运行（ RUNNABLE ） 阻塞（ BLOCKED ） 等待 （ WAITING ） 时间等待（ TIMED_WALTING ） 终止（ TERMINATED ）</p><ol start="2"><li>线程状态之间是如何变化的</li></ol><ul><li>创建线程对象是新建状态</li><li>调用了 start() 方法转变为可执行状态</li><li>线程获取到了 CPU 的执行权，执行结束是终止状态</li><li>在可执行状态的过程中，如果没有获取 CPU 的执行权，可能会切换其他状态 <ul><li>如果没有获取锁（ synchronized 或 lock ）进入阻塞状态，获得锁再切换为可执行状态</li><li>如果线程调用了 wait() 方法进入等待状态，其他线程调用 notify() 唤醒后可切换为可执行状态</li><li>如果线程调用了 sleep(50) 方法，进入计时等待状态，到时间后可切换为可执行状态</li></ul></li></ul><h3 id="_5、新建-t1-、-t2-、-t3-三个线程-如何保证它们按顺序执行" tabindex="-1"><a class="header-anchor" href="#_5、新建-t1-、-t2-、-t3-三个线程-如何保证它们按顺序执行"><span>5、新建 T1 、 T2 、 T3 三个线程，如何保证它们按顺序执行？</span></a></h3><p>可以使用线程中的 join 方法解决。</p><div class="language- line-numbers-mode" data-highlighter="shiki" data-ext="" data-title="" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span>join() 等待线程运行结束。</span></span>\n<span class="line"><span></span></span>\n<span class="line"><span>小例子：</span></span>\n<span class="line"><span>t.join()</span></span>\n<span class="line"><span>阻塞调用此方法的线程进入 timed_waiting</span></span>\n<span class="line"><span>直到线程 t 执行完成后，此线程再继续执行</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><div class="language-java line-numbers-mode" data-highlighter="shiki" data-ext="java" data-title="java" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">public</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;"> class</span><span style="--shiki-light:#C18401;--shiki-dark:#E5C07B;"> Test</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> {</span></span>\n<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">    public</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;"> static</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;"> void</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;"> main</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(</span><span style="--shiki-light:#C18401;--shiki-dark:#E5C07B;">String</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">[] </span><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;--shiki-light-font-style:inherit;--shiki-dark-font-style:italic;">args</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">)</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> {</span></span>\n<span class="line"></span>\n<span class="line"><span style="--shiki-light:#C18401;--shiki-dark:#E5C07B;">        Thread</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;"> t1</span><span style="--shiki-light:#383A42;--shiki-dark:#56B6C2;"> =</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;"> new</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;"> Thread</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(()</span><span style="--shiki-light:#C18401;--shiki-dark:#C678DD;">-&gt;</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">{</span></span>\n<span class="line"><span style="--shiki-light:#E45649;--shiki-dark:#E5C07B;">            System</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#E45649;--shiki-dark:#E5C07B;">out</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">println</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">&quot;t1&quot;</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">);</span></span>\n<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">        });</span></span>\n<span class="line"></span>\n<span class="line"><span style="--shiki-light:#C18401;--shiki-dark:#E5C07B;">        Thread</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;"> t2</span><span style="--shiki-light:#383A42;--shiki-dark:#56B6C2;"> =</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;"> new</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;"> Thread</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(()</span><span style="--shiki-light:#C18401;--shiki-dark:#C678DD;">-&gt;</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">{</span></span>\n<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">            try</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> {</span></span>\n<span class="line"><span style="--shiki-light:#E45649;--shiki-dark:#E5C07B;">                t1</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">join</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">();</span></span>\n<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">            } </span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">catch</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> (</span><span style="--shiki-light:#C18401;--shiki-dark:#E5C07B;">InterruptedException</span><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;--shiki-light-font-style:inherit;--shiki-dark-font-style:italic;"> e</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">) {</span></span>\n<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">                throw</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;"> new</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;"> RuntimeException</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(e);</span></span>\n<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">            }</span></span>\n<span class="line"><span style="--shiki-light:#E45649;--shiki-dark:#E5C07B;">            System</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#E45649;--shiki-dark:#E5C07B;">out</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">println</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">&quot;t2&quot;</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">);</span></span>\n<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">        });</span></span>\n<span class="line"></span>\n<span class="line"><span style="--shiki-light:#C18401;--shiki-dark:#E5C07B;">        Thread</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;"> t3</span><span style="--shiki-light:#383A42;--shiki-dark:#56B6C2;"> =</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;"> new</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;"> Thread</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(()</span><span style="--shiki-light:#C18401;--shiki-dark:#C678DD;">-&gt;</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">{</span></span>\n<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">            try</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> {</span></span>\n<span class="line"><span style="--shiki-light:#E45649;--shiki-dark:#E5C07B;">                t2</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">join</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">();</span></span>\n<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">            } </span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">catch</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> (</span><span style="--shiki-light:#C18401;--shiki-dark:#E5C07B;">InterruptedException</span><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;--shiki-light-font-style:inherit;--shiki-dark-font-style:italic;"> e</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">) {</span></span>\n<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">                throw</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;"> new</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;"> RuntimeException</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(e);</span></span>\n<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">            }</span></span>\n<span class="line"><span style="--shiki-light:#E45649;--shiki-dark:#E5C07B;">            System</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#E45649;--shiki-dark:#E5C07B;">out</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">println</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">&quot;t3&quot;</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">);</span></span>\n<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">        });</span></span>\n<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-dark:#7F848E;--shiki-light-font-style:italic;--shiki-dark-font-style:italic;">        // 虽然先启动t3，但是 必须先等t2完成，她t2必须先等t1完成</span></span>\n<span class="line"><span style="--shiki-light:#E45649;--shiki-dark:#E5C07B;">        t3</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">start</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">();</span></span>\n<span class="line"><span style="--shiki-light:#E45649;--shiki-dark:#E5C07B;">        t2</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">start</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">();</span></span>\n<span class="line"><span style="--shiki-light:#E45649;--shiki-dark:#E5C07B;">        t1</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">start</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">();</span></span>\n<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">    }</span></span>\n<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">}</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>结果：</p><div class="language-shell line-numbers-mode" data-highlighter="shiki" data-ext="shell" data-title="shell" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">C:\\myJava2\\Java\\jdk1.8.0_201\\bin\\java.exe &quot;-javaagent:C:\\Program Files\\JetBrains\\IntelliJ IDEA 2022.3.2\\lib\\idea_rt.jar=13847:C:\\Program Files\\JetBrains\\IntelliJ IDEA 2022.3.2\\bin&quot; -Dfile.encoding=UTF-8 -classpath C:\\myJava2\\Java\\jdk1.8.0_201\\jre\\lib\\charsets.jar;C:\\myJava2\\Java\\jdk1.8.0_201\\jre\\lib\\deploy.jar;C:\\myJava2\\Java\\jdk1.8.0_201\\jre\\lib\\ext\\access-bridge-64.jar;C:\\myJava2\\Java\\jdk1.8.0_201\\jre\\lib\\ext\\cldrdata.jar;C:\\myJava2\\Java\\jdk1.8.0_201\\jre\\lib\\ext\\dnsns.jar;C:\\myJava2\\Java\\jdk1.8.0_201\\jre\\lib\\ext\\jaccess.jar;C:\\myJava2\\Java\\jdk1.8.0_201\\jre\\lib\\ext\\jfxrt.jar;C:\\myJava2\\Java\\jdk1.8.0_201\\jre\\lib\\ext\\localedata.jar;C:\\myJava2\\Java\\jdk1.8.0_201\\jre\\lib\\ext\\nashorn.jar;C:\\myJava2\\Java\\jdk1.8.0_201\\jre\\lib\\ext\\sunec.jar;C:\\myJava2\\Java\\jdk1.8.0_201\\jre\\lib\\ext\\sunjce_provider.jar;C:\\myJava2\\Java\\jdk1.8.0_201\\jre\\lib\\ext\\sunmscapi.jar;C:\\myJava2\\Java\\jdk1.8.0_201\\jre\\lib\\ext\\sunpkcs11.jar;C:\\myJava2\\Java\\jdk1.8.0_201\\jre\\lib\\ext\\zipfs.jar;C:\\myJava2\\Java\\jdk1.8.0_201\\jre\\lib\\javaws.jar;C:\\myJava2\\Java\\jdk1.8.0_201\\jre\\lib\\jce.jar;C:\\myJava2\\Java\\jdk1.8.0_201\\jre\\lib\\jfr.jar;C:\\myJava2\\Java\\jdk1.8.0_201\\jre\\lib\\jfxswt.jar;C:\\myJava2\\Java\\jdk1.8.0_201\\jre\\lib\\jsse.jar;C:\\myJava2\\Java\\jdk1.8.0_201\\jre\\lib\\management-agent.jar;C:\\myJava2\\Java\\jdk1.8.0_201\\jre\\lib\\plugin.jar;C:\\myJava2\\Java\\jdk1.8.0_201\\jre\\lib\\resources.jar;C:\\myJava2\\Java\\jdk1.8.0_201\\jre\\lib\\rt.jar;C:\\IdeaProjectMyself\\RuoYi-Vue-Jiang\\ruoyi-admin\\target\\classes;C:\\Users\\jiang\\.m2\\repository\\org\\springframework\\boot\\spring-boot-devtools\\2.5.14\\spring-boot-devtools-2.5.14.jar;C:\\Users\\jiang\\.m2\\repository\\org\\springframework\\boot\\spring-boot\\2.5.14\\spring-boot-2.5.14.jar;C:\\Users\\jiang\\.m2\\repository\\org\\springframework\\spring-core\\5.3.20\\spring-core-5.3.20.jar;C:\\Users\\jiang\\.m2\\repository\\org\\springframework\\spring-jcl\\5.3.20\\spring-jcl-5.3.20.jar;C:\\Users\\jiang\\.m2\\repository\\org\\springframework\\spring-context\\5.3.20\\spring-context-5.3.20.jar;C:\\Users\\jiang\\.m2\\repository\\org\\springframework\\spring-beans\\5.3.20\\spring-beans-5.3.20.jar;C:\\Users\\jiang\\.m2\\repository\\org\\springframework\\spring-expression\\5.3.20\\spring-expression-5.3.20.jar;C:\\Users\\jiang\\.m2\\repository\\org\\springframework\\boot\\spring-boot-autoconfigure\\2.5.14\\spring-boot-autoconfigure-2.5.14.jar;C:\\Users\\jiang\\.m2\\repository\\com\\github\\xiaoymin\\knife4j-spring-boot-starter\\3.0.3\\knife4j-spring-boot-starter-3.0.3.jar;C:\\Users\\jiang\\.m2\\repository\\com\\github\\xiaoymin\\knife4j-spring-boot-autoconfigure\\3.0.3\\knife4j-spring-boot-autoconfigure-3.0.3.jar;C:\\Users\\jiang\\.m2\\repository\\com\\github\\xiaoymin\\knife4j-spring\\3.0.3\\knife4j-spring-3.0.3.jar;C:\\Users\\jiang\\.m2\\repository\\com\\github\\xiaoymin\\knife4j-annotations\\3.0.3\\knife4j-annotations-3.0.3.jar;C:\\Users\\jiang\\.m2\\repository\\io\\swagger\\swagger-annotations\\1.5.22\\swagger-annotations-1.5.22.jar;C:\\Users\\jiang\\.m2\\repository\\io\\swagger\\core\\v3\\swagger-annotations\\2.1.2\\swagger-annotations-2.1.2.jar;C:\\Users\\jiang\\.m2\\repository\\com\\github\\xiaoymin\\knife4j-core\\3.0.3\\knife4j-core-3.0.3.jar;C:\\Users\\jiang\\.m2\\repository\\org\\javassist\\javassist\\3.25.0-GA\\javassist-3.25.0-GA.jar;C:\\Users\\jiang\\.m2\\repository\\io\\springfox\\springfox-swagger2\\3.0.0\\springfox-swagger2-3.0.0.jar;C:\\Users\\jiang\\.m2\\repository\\io\\springfox\\springfox-spi\\3.0.0\\springfox-spi-3.0.0.jar;C:\\Users\\jiang\\.m2\\repository\\io\\springfox\\springfox-schema\\3.0.0\\springfox-schema-3.0.0.jar;C:\\Users\\jiang\\.m2\\repository\\io\\springfox\\springfox-swagger-common\\3.0.0\\springfox-swagger-common-3.0.0.jar;C:\\Users\\jiang\\.m2\\repository\\io\\springfox\\springfox-spring-web\\3.0.0\\springfox-spring-web-3.0.0.jar;C:\\Users\\jiang\\.m2\\repository\\io\\github\\classgraph\\classgraph\\4.8.83\\classgraph-4.8.83.jar;C:\\Users\\jiang\\.m2\\repository\\io\\springfox\\springfox-spring-webflux\\3.0.0\\springfox-spring-webflux-3.0.0.jar;C:\\Users\\jiang\\.m2\\repository\\org\\mapstruct\\mapstruct\\1.3.1.Final\\mapstruct-1.3.1.Final.jar;C:\\Users\\jiang\\.m2\\repository\\io\\springfox\\springfox-spring-webmvc\\3.0.0\\springfox-spring-webmvc-3.0.0.jar;C:\\Users\\jiang\\.m2\\repository\\io\\springfox\\springfox-core\\3.0.0\\springfox-core-3.0.0.jar;C:\\Users\\jiang\\.m2\\repository\\net\\bytebuddy\\byte-buddy\\1.10.22\\byte-buddy-1.10.22.jar;C:\\Users\\jiang\\.m2\\repository\\io\\springfox\\springfox-oas\\3.0.0\\springfox-oas-3.0.0.jar;C:\\Users\\jiang\\.m2\\repository\\io\\swagger\\core\\v3\\swagger-models\\2.1.2\\swagger-models-2.1.2.jar;C:\\Users\\jiang\\.m2\\repository\\io\\springfox\\springfox-bean-validators\\3.0.0\\springfox-bean-validators-3.0.0.jar;C:\\Users\\jiang\\.m2\\repository\\io\\swagger\\swagger-models\\1.5.22\\swagger-models-1.5.22.jar;C:\\Users\\jiang\\.m2\\repository\\io\\swagger\\swagger-core\\1.5.22\\swagger-core-1.5.22.jar;C:\\Users\\jiang\\.m2\\repository\\com\\fasterxml\\jackson\\dataformat\\jackson-dataformat-yaml\\2.12.6\\jackson-dataformat-yaml-2.12.6.jar;C:\\Users\\jiang\\.m2\\repository\\javax\\validation\\validation-api\\2.0.1.Final\\validation-api-2.0.1.Final.jar;C:\\Users\\jiang\\.m2\\repository\\io\\springfox\\springfox-boot-starter\\3.0.0\\springfox-boot-starter-3.0.0.jar;C:\\Users\\jiang\\.m2\\repository\\io\\springfox\\springfox-data-rest\\3.0.0\\springfox-data-rest-3.0.0.jar;C:\\Users\\jiang\\.m2\\repository\\com\\fasterxml\\classmate\\1.5.1\\classmate-1.5.1.jar;C:\\Users\\jiang\\.m2\\repository\\org\\springframework\\plugin\\spring-plugin-core\\2.0.0.RELEASE\\spring-plugin-core-2.0.0.RELEASE.jar;C:\\Users\\jiang\\.m2\\repository\\org\\springframework\\plugin\\spring-plugin-metadata\\2.0.0.RELEASE\\spring-plugin-metadata-2.0.0.RELEASE.jar;C:\\Users\\jiang\\.m2\\repository\\com\\github\\xiaoymin\\knife4j-spring-ui\\3.0.3\\knife4j-spring-ui-3.0.3.jar;C:\\Users\\jiang\\.m2\\repository\\mysql\\mysql-connector-java\\8.0.29\\mysql-connector-java-8.0.29.jar;C:\\IdeaProjectMyself\\RuoYi-Vue-Jiang\\ruoyi-framework\\target\\classes;C:\\Users\\jiang\\.m2\\repository\\org\\springframework\\boot\\spring-boot-starter-web\\2.5.14\\spring-boot-starter-web-2.5.14.jar;C:\\Users\\jiang\\.m2\\repository\\org\\springframework\\boot\\spring-boot-starter\\2.5.14\\spring-boot-starter-2.5.14.jar;C:\\Users\\jiang\\.m2\\repository\\org\\springframework\\boot\\spring-boot-starter-logging\\2.5.14\\spring-boot-starter-logging-2.5.14.jar;C:\\Users\\jiang\\.m2\\repository\\ch\\qos\\logback\\logback-classic\\1.2.11\\logback-classic-1.2.11.jar;C:\\Users\\jiang\\.m2\\repository\\ch\\qos\\logback\\logback-core\\1.2.11\\logback-core-1.2.11.jar;C:\\Users\\jiang\\.m2\\repository\\org\\apache\\logging\\log4j\\log4j-to-slf4j\\2.17.2\\log4j-to-slf4j-2.17.2.jar;C:\\Users\\jiang\\.m2\\repository\\org\\apache\\logging\\log4j\\log4j-api\\2.17.2\\log4j-api-2.17.2.jar;C:\\Users\\jiang\\.m2\\repository\\org\\slf4j\\jul-to-slf4j\\1.7.36\\jul-to-slf4j-1.7.36.jar;C:\\Users\\jiang\\.m2\\repository\\jakarta\\annotation\\jakarta.annotation-api\\1.3.5\\jakarta.annotation-api-1.3.5.jar;C:\\Users\\jiang\\.m2\\repository\\org\\springframework\\boot\\spring-boot-starter-json\\2.5.14\\spring-boot-starter-json-2.5.14.jar;C:\\Users\\jiang\\.m2\\repository\\com\\fasterxml\\jackson\\datatype\\jackson-datatype-jdk8\\2.12.6\\jackson-datatype-jdk8-2.12.6.jar;C:\\Users\\jiang\\.m2\\repository\\com\\fasterxml\\jackson\\datatype\\jackson-datatype-jsr310\\2.12.6\\jackson-datatype-jsr310-2.12.6.jar;C:\\Users\\jiang\\.m2\\repository\\com\\fasterxml\\jackson\\module\\jackson-module-parameter-names\\2.12.6\\jackson-module-parameter-names-2.12.6.jar;C:\\Users\\jiang\\.m2\\repository\\org\\springframework\\spring-web\\5.3.20\\spring-web-5.3.20.jar;C:\\Users\\jiang\\.m2\\repository\\org\\springframework\\spring-webmvc\\5.3.20\\spring-webmvc-5.3.20.jar;C:\\Users\\jiang\\.m2\\repository\\org\\springframework\\boot\\spring-boot-starter-jetty\\2.5.14\\spring-boot-starter-jetty-2.5.14.jar;C:\\Users\\jiang\\.m2\\repository\\jakarta\\servlet\\jakarta.servlet-api\\4.0.4\\jakarta.servlet-api-4.0.4.jar;C:\\Users\\jiang\\.m2\\repository\\jakarta\\websocket\\jakarta.websocket-api\\1.1.2\\jakarta.websocket-api-1.1.2.jar;C:\\Users\\jiang\\.m2\\repository\\org\\apache\\tomcat\\embed\\tomcat-embed-el\\9.0.63\\tomcat-embed-el-9.0.63.jar;C:\\Users\\jiang\\.m2\\repository\\org\\eclipse\\jetty\\jetty-servlets\\9.4.46.v20220331\\jetty-servlets-9.4.46.v20220331.jar;C:\\Users\\jiang\\.m2\\repository\\org\\eclipse\\jetty\\jetty-continuation\\9.4.46.v20220331\\jetty-continuation-9.4.46.v20220331.jar;C:\\Users\\jiang\\.m2\\repository\\org\\eclipse\\jetty\\jetty-http\\9.4.46.v20220331\\jetty-http-9.4.46.v20220331.jar;C:\\Users\\jiang\\.m2\\repository\\org\\eclipse\\jetty\\jetty-util\\9.4.46.v20220331\\jetty-util-9.4.46.v20220331.jar;C:\\Users\\jiang\\.m2\\repository\\org\\eclipse\\jetty\\jetty-io\\9.4.46.v20220331\\jetty-io-9.4.46.v20220331.jar;C:\\Users\\jiang\\.m2\\repository\\org\\eclipse\\jetty\\jetty-webapp\\9.4.46.v20220331\\jetty-webapp-9.4.46.v20220331.jar;C:\\Users\\jiang\\.m2\\repository\\org\\eclipse\\jetty\\jetty-xml\\9.4.46.v20220331\\jetty-xml-9.4.46.v20220331.jar;C:\\Users\\jiang\\.m2\\repository\\org\\eclipse\\jetty\\jetty-servlet\\9.4.46.v20220331\\jetty-servlet-9.4.46.v20220331.jar;C:\\Users\\jiang\\.m2\\repository\\org\\eclipse\\jetty\\jetty-security\\9.4.46.v20220331\\jetty-security-9.4.46.v20220331.jar;C:\\Users\\jiang\\.m2\\repository\\org\\eclipse\\jetty\\jetty-server\\9.4.46.v20220331\\jetty-server-9.4.46.v20220331.jar;C:\\Users\\jiang\\.m2\\repository\\org\\eclipse\\jetty\\jetty-util-ajax\\9.4.46.v20220331\\jetty-util-ajax-9.4.46.v20220331.jar;C:\\Users\\jiang\\.m2\\repository\\org\\eclipse\\jetty\\websocket\\websocket-server\\9.4.46.v20220331\\websocket-server-9.4.46.v20220331.jar;C:\\Users\\jiang\\.m2\\repository\\org\\eclipse\\jetty\\websocket\\websocket-common\\9.4.46.v20220331\\websocket-common-9.4.46.v20220331.jar;C:\\Users\\jiang\\.m2\\repository\\org\\eclipse\\jetty\\websocket\\websocket-api\\9.4.46.v20220331\\websocket-api-9.4.46.v20220331.jar;C:\\Users\\jiang\\.m2\\repository\\org\\eclipse\\jetty\\websocket\\websocket-client\\9.4.46.v20220331\\websocket-client-9.4.46.v20220331.jar;C:\\Users\\jiang\\.m2\\repository\\org\\eclipse\\jetty\\jetty-client\\9.4.46.v20220331\\jetty-client-9.4.46.v20220331.jar;C:\\Users\\jiang\\.m2\\repository\\org\\eclipse\\jetty\\websocket\\websocket-servlet\\9.4.46.v20220331\\websocket-servlet-9.4.46.v20220331.jar;C:\\Users\\jiang\\.m2\\repository\\org\\eclipse\\jetty\\websocket\\javax-websocket-server-impl\\9.4.46.v20220331\\javax-websocket-server-impl-9.4.46.v20220331.jar;C:\\Users\\jiang\\.m2\\repository\\org\\eclipse\\jetty\\jetty-annotations\\9.4.46.v20220331\\jetty-annotations-9.4.46.v20220331.jar;C:\\Users\\jiang\\.m2\\repository\\org\\eclipse\\jetty\\jetty-plus\\9.4.46.v20220331\\jetty-plus-9.4.46.v20220331.jar;C:\\Users\\jiang\\.m2\\repository\\org\\ow2\\asm\\asm\\9.2\\asm-9.2.jar;C:\\Users\\jiang\\.m2\\repository\\org\\ow2\\asm\\asm-commons\\9.2\\asm-commons-9.2.jar;C:\\Users\\jiang\\.m2\\repository\\org\\ow2\\asm\\asm-tree\\9.2\\asm-tree-9.2.jar;C:\\Users\\jiang\\.m2\\repository\\org\\ow2\\asm\\asm-analysis\\9.2\\asm-analysis-9.2.jar;C:\\Users\\jiang\\.m2\\repository\\org\\eclipse\\jetty\\websocket\\javax-websocket-client-impl\\9.4.46.v20220331\\javax-websocket-client-impl-9.4.46.v20220331.jar;C:\\Users\\jiang\\.m2\\repository\\org\\springframework\\boot\\spring-boot-starter-aop\\2.5.14\\spring-boot-starter-aop-2.5.14.jar;C:\\Users\\jiang\\.m2\\repository\\org\\springframework\\spring-aop\\5.3.20\\spring-aop-5.3.20.jar;C:\\Users\\jiang\\.m2\\repository\\org\\aspectj\\aspectjweaver\\1.9.7\\aspectjweaver-1.9.7.jar;C:\\Users\\jiang\\.m2\\repository\\com\\alibaba\\druid-spring-boot-starter\\1.2.16\\druid-spring-boot-starter-1.2.16.jar;C:\\Users\\jiang\\.m2\\repository\\com\\alibaba\\druid\\1.2.16\\druid-1.2.16.jar;C:\\Users\\jiang\\.m2\\repository\\org\\slf4j\\slf4j-api\\1.7.36\\slf4j-api-1.7.36.jar;C:\\Users\\jiang\\.m2\\repository\\pro\\fessional\\kaptcha\\2.3.3\\kaptcha-2.3.3.jar;C:\\Users\\jiang\\.m2\\repository\\com\\jhlabs\\filters\\2.0.235-1\\filters-2.0.235-1.jar;C:\\Users\\jiang\\.m2\\repository\\javax\\servlet\\servlet-api\\2.5\\servlet-api-2.5.jar;C:\\Users\\jiang\\.m2\\repository\\com\\github\\oshi\\oshi-core\\6.4.0\\oshi-core-6.4.0.jar;C:\\Users\\jiang\\.m2\\repository\\net\\java\\dev\\jna\\jna\\5.12.1\\jna-5.12.1.jar;C:\\Users\\jiang\\.m2\\repository\\net\\java\\dev\\jna\\jna-platform\\5.12.1\\jna-platform-5.12.1.jar;C:\\IdeaProjectMyself\\RuoYi-Vue-Jiang\\ruoyi-system\\target\\classes;C:\\IdeaProjectMyself\\RuoYi-Vue-Jiang\\ruoyi-quartz\\target\\classes;C:\\Users\\jiang\\.m2\\repository\\org\\quartz-scheduler\\quartz\\2.3.2\\quartz-2.3.2.jar;C:\\Users\\jiang\\.m2\\repository\\com\\mchange\\mchange-commons-java\\0.2.15\\mchange-commons-java-0.2.15.jar;C:\\IdeaProjectMyself\\RuoYi-Vue-Jiang\\ruoyi-common\\target\\classes;C:\\Users\\jiang\\.m2\\repository\\org\\projectlombok\\lombok\\1.18.24\\lombok-1.18.24.jar;C:\\Users\\jiang\\.m2\\repository\\io\\minio\\minio\\8.2.1\\minio-8.2.1.jar;C:\\Users\\jiang\\.m2\\repository\\com\\carrotsearch\\thirdparty\\simple-xml-safe\\2.7.1\\simple-xml-safe-2.7.1.jar;C:\\Users\\jiang\\.m2\\repository\\com\\google\\guava\\guava\\29.0-jre\\guava-29.0-jre.jar;C:\\Users\\jiang\\.m2\\repository\\com\\google\\guava\\failureaccess\\1.0.1\\failureaccess-1.0.1.jar;C:\\Users\\jiang\\.m2\\repository\\com\\google\\guava\\listenablefuture\\9999.0-empty-to-avoid-conflict-with-guava\\listenablefuture-9999.0-empty-to-avoid-conflict-with-guava.jar;C:\\Users\\jiang\\.m2\\repository\\com\\google\\code\\findbugs\\jsr305\\3.0.2\\jsr305-3.0.2.jar;C:\\Users\\jiang\\.m2\\repository\\org\\checkerframework\\checker-qual\\2.11.1\\checker-qual-2.11.1.jar;C:\\Users\\jiang\\.m2\\repository\\com\\google\\errorprone\\error_prone_annotations\\2.3.4\\error_prone_annotations-2.3.4.jar;C:\\Users\\jiang\\.m2\\repository\\com\\google\\j2objc\\j2objc-annotations\\1.3\\j2objc-annotations-1.3.jar;C:\\Users\\jiang\\.m2\\repository\\com\\squareup\\okhttp3\\okhttp\\3.14.9\\okhttp-3.14.9.jar;C:\\Users\\jiang\\.m2\\repository\\com\\squareup\\okio\\okio\\1.17.2\\okio-1.17.2.jar;C:\\Users\\jiang\\.m2\\repository\\com\\fasterxml\\jackson\\core\\jackson-annotations\\2.12.6\\jackson-annotations-2.12.6.jar;C:\\Users\\jiang\\.m2\\repository\\com\\fasterxml\\jackson\\core\\jackson-core\\2.12.6\\jackson-core-2.12.6.jar;C:\\Users\\jiang\\.m2\\repository\\org\\springframework\\spring-context-support\\5.3.20\\spring-context-support-5.3.20.jar;C:\\Users\\jiang\\.m2\\repository\\org\\springframework\\boot\\spring-boot-starter-security\\2.5.14\\spring-boot-starter-security-2.5.14.jar;C:\\Users\\jiang\\.m2\\repository\\org\\springframework\\security\\spring-security-config\\5.5.8\\spring-security-config-5.5.8.jar;C:\\Users\\jiang\\.m2\\repository\\org\\springframework\\security\\spring-security-core\\5.5.8\\spring-security-core-5.5.8.jar;C:\\Users\\jiang\\.m2\\repository\\org\\springframework\\security\\spring-security-crypto\\5.5.8\\spring-security-crypto-5.5.8.jar;C:\\Users\\jiang\\.m2\\repository\\org\\springframework\\security\\spring-security-web\\5.5.8\\spring-security-web-5.5.8.jar;C:\\Users\\jiang\\.m2\\repository\\com\\github\\pagehelper\\pagehelper-spring-boot-starter\\1.4.6\\pagehelper-spring-boot-starter-1.4.6.jar;C:\\Users\\jiang\\.m2\\repository\\org\\mybatis\\spring\\boot\\mybatis-spring-boot-starter\\2.2.2\\mybatis-spring-boot-starter-2.2.2.jar;C:\\Users\\jiang\\.m2\\repository\\org\\mybatis\\spring\\boot\\mybatis-spring-boot-autoconfigure\\2.2.2\\mybatis-spring-boot-autoconfigure-2.2.2.jar;C:\\Users\\jiang\\.m2\\repository\\org\\mybatis\\mybatis\\3.5.9\\mybatis-3.5.9.jar;C:\\Users\\jiang\\.m2\\repository\\org\\mybatis\\mybatis-spring\\2.0.7\\mybatis-spring-2.0.7.jar;C:\\Users\\jiang\\.m2\\repository\\com\\github\\pagehelper\\pagehelper-spring-boot-autoconfigure\\1.4.6\\pagehelper-spring-boot-autoconfigure-1.4.6.jar;C:\\Users\\jiang\\.m2\\repository\\com\\github\\pagehelper\\pagehelper\\5.3.2\\pagehelper-5.3.2.jar;C:\\Users\\jiang\\.m2\\repository\\com\\github\\jsqlparser\\jsqlparser\\4.5\\jsqlparser-4.5.jar;C:\\Users\\jiang\\.m2\\repository\\org\\springframework\\boot\\spring-boot-starter-validation\\2.5.14\\spring-boot-starter-validation-2.5.14.jar;C:\\Users\\jiang\\.m2\\repository\\org\\hibernate\\validator\\hibernate-validator\\6.2.3.Final\\hibernate-validator-6.2.3.Final.jar;C:\\Users\\jiang\\.m2\\repository\\jakarta\\validation\\jakarta.validation-api\\2.0.2\\jakarta.validation-api-2.0.2.jar;C:\\Users\\jiang\\.m2\\repository\\org\\jboss\\logging\\jboss-logging\\3.4.3.Final\\jboss-logging-3.4.3.Final.jar;C:\\Users\\jiang\\.m2\\repository\\org\\apache\\commons\\commons-lang3\\3.12.0\\commons-lang3-3.12.0.jar;C:\\Users\\jiang\\.m2\\repository\\com\\fasterxml\\jackson\\core\\jackson-databind\\2.12.6.1\\jackson-databind-2.12.6.1.jar;C:\\Users\\jiang\\.m2\\repository\\com\\baomidou\\dynamic-datasource-spring-boot-starter\\3.5.2\\dynamic-datasource-spring-boot-starter-3.5.2.jar;C:\\Users\\jiang\\.m2\\repository\\org\\springframework\\boot\\spring-boot-starter-jdbc\\2.5.14\\spring-boot-starter-jdbc-2.5.14.jar;C:\\Users\\jiang\\.m2\\repository\\com\\zaxxer\\HikariCP\\4.0.3\\HikariCP-4.0.3.jar;C:\\Users\\jiang\\.m2\\repository\\org\\springframework\\spring-jdbc\\5.3.20\\spring-jdbc-5.3.20.jar;C:\\Users\\jiang\\.m2\\repository\\com\\alibaba\\fastjson2\\fastjson2\\2.0.25\\fastjson2-2.0.25.jar;C:\\Users\\jiang\\.m2\\repository\\commons-io\\commons-io\\2.11.0\\commons-io-2.11.0.jar;C:\\Users\\jiang\\.m2\\repository\\org\\yaml\\snakeyaml\\1.28\\snakeyaml-1.28.jar;C:\\Users\\jiang\\.m2\\repository\\io\\jsonwebtoken\\jjwt\\0.9.1\\jjwt-0.9.1.jar;C:\\Users\\jiang\\.m2\\repository\\javax\\xml\\bind\\jaxb-api\\2.3.1\\jaxb-api-2.3.1.jar;C:\\Users\\jiang\\.m2\\repository\\javax\\activation\\javax.activation-api\\1.2.0\\javax.activation-api-1.2.0.jar;C:\\Users\\jiang\\.m2\\repository\\org\\springframework\\boot\\spring-boot-starter-data-redis\\2.5.14\\spring-boot-starter-data-redis-2.5.14.jar;C:\\Users\\jiang\\.m2\\repository\\org\\springframework\\data\\spring-data-redis\\2.5.11\\spring-data-redis-2.5.11.jar;C:\\Users\\jiang\\.m2\\repository\\org\\springframework\\data\\spring-data-keyvalue\\2.5.11\\spring-data-keyvalue-2.5.11.jar;C:\\Users\\jiang\\.m2\\repository\\org\\springframework\\data\\spring-data-commons\\2.5.11\\spring-data-commons-2.5.11.jar;C:\\Users\\jiang\\.m2\\repository\\org\\springframework\\spring-tx\\5.3.20\\spring-tx-5.3.20.jar;C:\\Users\\jiang\\.m2\\repository\\org\\springframework\\spring-oxm\\5.3.20\\spring-oxm-5.3.20.jar;C:\\Users\\jiang\\.m2\\repository\\io\\lettuce\\lettuce-core\\6.1.8.RELEASE\\lettuce-core-6.1.8.RELEASE.jar;C:\\Users\\jiang\\.m2\\repository\\io\\netty\\netty-common\\4.1.77.Final\\netty-common-4.1.77.Final.jar;C:\\Users\\jiang\\.m2\\repository\\io\\netty\\netty-handler\\4.1.77.Final\\netty-handler-4.1.77.Final.jar;C:\\Users\\jiang\\.m2\\repository\\io\\netty\\netty-resolver\\4.1.77.Final\\netty-resolver-4.1.77.Final.jar;C:\\Users\\jiang\\.m2\\repository\\io\\netty\\netty-buffer\\4.1.77.Final\\netty-buffer-4.1.77.Final.jar;C:\\Users\\jiang\\.m2\\repository\\io\\netty\\netty-codec\\4.1.77.Final\\netty-codec-4.1.77.Final.jar;C:\\Users\\jiang\\.m2\\repository\\io\\netty\\netty-transport\\4.1.77.Final\\netty-transport-4.1.77.Final.jar;C:\\Users\\jiang\\.m2\\repository\\io\\projectreactor\\reactor-core\\3.4.18\\reactor-core-3.4.18.jar;C:\\Users\\jiang\\.m2\\repository\\org\\reactivestreams\\reactive-streams\\1.0.3\\reactive-streams-1.0.3.jar;C:\\Users\\jiang\\.m2\\repository\\org\\apache\\commons\\commons-pool2\\2.9.0\\commons-pool2-2.9.0.jar;C:\\Users\\jiang\\.m2\\repository\\eu\\bitwalker\\UserAgentUtils\\1.21\\UserAgentUtils-1.21.jar;C:\\Users\\jiang\\.m2\\repository\\javax\\servlet\\javax.servlet-api\\4.0.1\\javax.servlet-api-4.0.1.jar;C:\\IdeaProjectMyself\\RuoYi-Vue-Jiang\\ruoyi-generator\\target\\classes;C:\\Users\\jiang\\.m2\\repository\\org\\apache\\velocity\\velocity-engine-core\\2.3\\velocity-engine-core-2.3.jar;C:\\Users\\jiang\\.m2\\repository\\commons-collections\\commons-collections\\3.2.2\\commons-collections-3.2.2.jar;C:\\IdeaProjectMyself\\RuoYi-Vue-Jiang\\ruoyi-dishes\\target\\classes;C:\\IdeaProjectMyself\\RuoYi-Vue-Jiang\\ruoyi-paperwork\\target\\classes;C:\\Users\\jiang\\.m2\\repository\\com\\deepoove\\poi-tl\\1.12.1\\poi-tl-1.12.1.jar;C:\\Users\\jiang\\.m2\\repository\\org\\apache\\xmlgraphics\\batik-transcoder\\1.14\\batik-transcoder-1.14.jar;C:\\Users\\jiang\\.m2\\repository\\org\\apache\\xmlgraphics\\batik-anim\\1.14\\batik-anim-1.14.jar;C:\\Users\\jiang\\.m2\\repository\\org\\apache\\xmlgraphics\\batik-css\\1.14\\batik-css-1.14.jar;C:\\Users\\jiang\\.m2\\repository\\org\\apache\\xmlgraphics\\batik-ext\\1.14\\batik-ext-1.14.jar;C:\\Users\\jiang\\.m2\\repository\\org\\apache\\xmlgraphics\\batik-parser\\1.14\\batik-parser-1.14.jar;C:\\Users\\jiang\\.m2\\repository\\org\\apache\\xmlgraphics\\batik-svg-dom\\1.14\\batik-svg-dom-1.14.jar;C:\\Users\\jiang\\.m2\\repository\\org\\apache\\xmlgraphics\\batik-awt-util\\1.14\\batik-awt-util-1.14.jar;C:\\Users\\jiang\\.m2\\repository\\org\\apache\\xmlgraphics\\xmlgraphics-commons\\2.6\\xmlgraphics-commons-2.6.jar;C:\\Users\\jiang\\.m2\\repository\\org\\apache\\xmlgraphics\\batik-bridge\\1.14\\batik-bridge-1.14.jar;C:\\Users\\jiang\\.m2\\repository\\org\\apache\\xmlgraphics\\batik-script\\1.14\\batik-script-1.14.jar;C:\\Users\\jiang\\.m2\\repository\\org\\apache\\xmlgraphics\\batik-dom\\1.14\\batik-dom-1.14.jar;C:\\Users\\jiang\\.m2\\repository\\xml-apis\\xml-apis\\1.4.01\\xml-apis-1.4.01.jar;C:\\Users\\jiang\\.m2\\repository\\org\\apache\\xmlgraphics\\batik-gvt\\1.14\\batik-gvt-1.14.jar;C:\\Users\\jiang\\.m2\\repository\\org\\apache\\xmlgraphics\\batik-shared-resources\\1.14\\batik-shared-resources-1.14.jar;C:\\Users\\jiang\\.m2\\repository\\org\\apache\\xmlgraphics\\batik-svggen\\1.14\\batik-svggen-1.14.jar;C:\\Users\\jiang\\.m2\\repository\\org\\apache\\xmlgraphics\\batik-util\\1.14\\batik-util-1.14.jar;C:\\Users\\jiang\\.m2\\repository\\org\\apache\\xmlgraphics\\batik-constants\\1.14\\batik-constants-1.14.jar;C:\\Users\\jiang\\.m2\\repository\\org\\apache\\xmlgraphics\\batik-i18n\\1.14\\batik-i18n-1.14.jar;C:\\Users\\jiang\\.m2\\repository\\org\\apache\\xmlgraphics\\batik-xml\\1.14\\batik-xml-1.14.jar;C:\\Users\\jiang\\.m2\\repository\\xml-apis\\xml-apis-ext\\1.3.04\\xml-apis-ext-1.3.04.jar;C:\\Users\\jiang\\.m2\\repository\\org\\apache\\xmlgraphics\\batik-codec\\1.14\\batik-codec-1.14.jar;C:\\Users\\jiang\\.m2\\repository\\org\\apache\\poi\\poi-ooxml\\4.1.2\\poi-ooxml-4.1.2.jar;C:\\Users\\jiang\\.m2\\repository\\org\\apache\\poi\\poi\\4.1.2\\poi-4.1.2.jar;C:\\Users\\jiang\\.m2\\repository\\commons-codec\\commons-codec\\1.15\\commons-codec-1.15.jar;C:\\Users\\jiang\\.m2\\repository\\org\\apache\\commons\\commons-collections4\\4.4\\commons-collections4-4.4.jar;C:\\Users\\jiang\\.m2\\repository\\org\\apache\\commons\\commons-math3\\3.6.1\\commons-math3-3.6.1.jar;C:\\Users\\jiang\\.m2\\repository\\com\\zaxxer\\SparseBitSet\\1.2\\SparseBitSet-1.2.jar;C:\\Users\\jiang\\.m2\\repository\\org\\apache\\poi\\poi-ooxml-schemas\\4.1.2\\poi-ooxml-schemas-4.1.2.jar;C:\\Users\\jiang\\.m2\\repository\\org\\apache\\xmlbeans\\xmlbeans\\3.1.0\\xmlbeans-3.1.0.jar;C:\\Users\\jiang\\.m2\\repository\\org\\apache\\commons\\commons-compress\\1.19\\commons-compress-1.19.jar;C:\\Users\\jiang\\.m2\\repository\\com\\github\\virtuald\\curvesapi\\1.06\\curvesapi-1.06.jar;C:\\Users\\jiang\\.m2\\repository\\com\\itextpdf\\itextpdf\\5.5.13.2\\itextpdf-5.5.13.2.jar;C:\\Users\\jiang\\.m2\\repository\\org\\im4java\\im4java\\1.4.0\\im4java-1.4.0.jar;C:\\Users\\jiang\\.m2\\repository\\com\\github\\sarxos\\webcam-capture\\0.3.12\\webcam-capture-0.3.12.jar;C:\\Users\\jiang\\.m2\\repository\\com\\nativelibs4java\\bridj\\0.7.0\\bridj-0.7.0.jar;C:\\Users\\jiang\\.m2\\repository\\org\\apache\\pdfbox\\pdfbox\\2.0.24\\pdfbox-2.0.24.jar;C:\\Users\\jiang\\.m2\\repository\\org\\apache\\pdfbox\\fontbox\\2.0.24\\fontbox-2.0.24.jar;C:\\Users\\jiang\\.m2\\repository\\commons-logging\\commons-logging\\1.2\\commons-logging-1.2.jar;C:\\Users\\jiang\\.m2\\repository\\com\\github\\jai-imageio\\jai-imageio-core\\1.4.0\\jai-imageio-core-1.4.0.jar com.ruoyi.web.controller.tool.Test</span></span>\n<span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">t1</span></span>\n<span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">t2</span></span>\n<span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">t3</span></span>\n<span class="line"></span>\n<span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">Process</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> finished</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> with</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> exit</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> code</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;"> 0</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="_6、notify-和-notifyall-有什么区别" tabindex="-1"><a class="header-anchor" href="#_6、notify-和-notifyall-有什么区别"><span>6、notify() 和 notifyAll() 有什么区别？</span></a></h3><ul><li>notifyAll ：唤醒所有 wait 的线程</li><li>notify ：只随机唤醒一个 wait 线程</li></ul><h3 id="_7、java-中-wait-和-sleep-方法的不同" tabindex="-1"><a class="header-anchor" href="#_7、java-中-wait-和-sleep-方法的不同"><span>7、java 中 wait 和 sleep 方法的不同？</span></a></h3><blockquote><p><strong>更多参考</strong>：<a href="https://javaguide.cn/java/concurrent/java-concurrent-questions-01.html#sleep-%E6%96%B9%E6%B3%95%E5%92%8C-wait-%E6%96%B9%E6%B3%95%E5%AF%B9%E6%AF%94" target="_blank" rel="noopener noreferrer">sleep() 方法和 wait() 方法对比</a></p></blockquote><p><strong>共同点</strong> wait() ， wait(long) 和 sleep(long) 的效果都是让当前线程暂时放弃 CPU 的使用权，进入阻塞状态。</p><p><strong>不同点</strong></p><ol><li>方法归属不同</li></ol><ul><li>sleep(long) 是 Thread 的静态方法</li><li>而 wait() ， wait(long) 都是 Object 的成员方法，每个对象都有</li></ul><ol start="2"><li>醒来时机不同</li></ol><ul><li>执行 sleep(long) 和 wait(long) 的线程都会在等待相应毫秒后醒来</li><li>wait(long) 和 wait() 还可以被 notify 唤醒， wait() 如果不唤醒就一直等下去</li><li>它们都可以被打断唤醒</li></ul><ol start="3"><li><strong>锁特性不同（重点）</strong></li></ol>',61),T=(0,n.Lk)("li",null,"wait 方法的调用必须先获取 wait 对象的锁，而 sleep 则无此限制",-1),S=(0,n.Fv)('<h3 id="_8、如何停止一个正在运行的线程" tabindex="-1"><a class="header-anchor" href="#_8、如何停止一个正在运行的线程"><span>8、如何停止一个正在运行的线程？</span></a></h3><p><a href="http://localhost:8099/xiaofeipeng/interview-related/video-one/#java%E4%B8%AD%E5%A6%82%E4%BD%95%E5%81%9C%E6%AD%A2%E7%BA%BF%E7%A8%8B" target="_blank" rel="noopener noreferrer">更多参考：Java中如何停止线程</a></p><p>有三种方式可以停止线程</p><ul><li>使用退出标志，使线程正常退出，也就是当 run 方法完成后线程终止</li></ul><div class="language-java line-numbers-mode" data-highlighter="shiki" data-ext="java" data-title="java" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">public</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;"> class</span><span style="--shiki-light:#C18401;--shiki-dark:#E5C07B;"> MyInterrupt1</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;"> extends</span><span style="--shiki-light:#C18401;--shiki-dark:#E5C07B;"> Thread</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> {</span></span>\n<span class="line"></span>\n<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-dark:#7F848E;--shiki-light-font-style:italic;--shiki-dark-font-style:italic;">    // 线程执行的退出标记</span></span>\n<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">    volatile</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;"> boolean</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;"> flag </span><span style="--shiki-light:#383A42;--shiki-dark:#56B6C2;">=</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;"> false</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> ;</span></span>\n<span class="line"></span>\n<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">    @</span><span style="--shiki-light:#A626A4;--shiki-dark:#E5C07B;">Override</span></span>\n<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">    public</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;"> void</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;"> run</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">()</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> {</span></span>\n<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">        while</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(</span><span style="--shiki-light:#383A42;--shiki-dark:#56B6C2;">!</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">flag) {</span></span>\n<span class="line"><span style="--shiki-light:#E45649;--shiki-dark:#E5C07B;">            System</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#E45649;--shiki-dark:#E5C07B;">out</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">println</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">&quot;MyThread...run...&quot;</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">);</span></span>\n<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">            try</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> {</span></span>\n<span class="line"><span style="--shiki-light:#E45649;--shiki-dark:#E5C07B;">                Thread</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">sleep</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;">3000</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">);</span></span>\n<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">            } </span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">catch</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> (</span><span style="--shiki-light:#C18401;--shiki-dark:#E5C07B;">InterruptedException</span><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;--shiki-light-font-style:inherit;--shiki-dark-font-style:italic;"> e</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">) {</span></span>\n<span class="line"><span style="--shiki-light:#E45649;--shiki-dark:#E5C07B;">                e</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">printStackTrace</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">();</span></span>\n<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">            }</span></span>\n<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">        }</span></span>\n<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">    }</span></span>\n<span class="line"></span>\n<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">    public</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;"> static</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;"> void</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;"> main</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(</span><span style="--shiki-light:#C18401;--shiki-dark:#E5C07B;">String</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">[] </span><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;--shiki-light-font-style:inherit;--shiki-dark-font-style:italic;">args</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">)</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;"> throws</span><span style="--shiki-light:#C18401;--shiki-dark:#E5C07B;"> InterruptedException</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> {</span></span>\n<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-dark:#7F848E;--shiki-light-font-style:italic;--shiki-dark-font-style:italic;">        // 创建MyThread对象</span></span>\n<span class="line"><span style="--shiki-light:#C18401;--shiki-dark:#E5C07B;">        MyInterrupt1</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;"> t1</span><span style="--shiki-light:#383A42;--shiki-dark:#56B6C2;"> =</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;"> new</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;"> MyInterrupt1</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">() ;</span></span>\n<span class="line"><span style="--shiki-light:#E45649;--shiki-dark:#E5C07B;">        t1</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">start</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">();</span></span>\n<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-dark:#7F848E;--shiki-light-font-style:italic;--shiki-dark-font-style:italic;">        // 主线程休眠6秒</span></span>\n<span class="line"><span style="--shiki-light:#E45649;--shiki-dark:#E5C07B;">        Thread</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">sleep</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;">6000</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">);</span></span>\n<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-dark:#7F848E;--shiki-light-font-style:italic;--shiki-dark-font-style:italic;">        // 更改标记为true</span></span>\n<span class="line"><span style="--shiki-light:#E45649;--shiki-dark:#E5C07B;">        t1</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#E45649;--shiki-dark:#E5C07B;">flag</span><span style="--shiki-light:#383A42;--shiki-dark:#56B6C2;"> =</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;"> true</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> ;</span></span>\n<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">    }</span></span>\n<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">}</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ul><li><p>使用 stop 方法强行终止（不推荐，方法已作废）</p></li><li><p>使用 interrupt 方法中断线程</p><ul><li>打断阻塞的线程（ sleep ， wait ， join ）的线程，线程会抛出 InterruptedException 异常</li><li>打断正常的线程，可以根据打断状态来标记是否退出线程</li></ul></li></ul><div class="language-java line-numbers-mode" data-highlighter="shiki" data-ext="java" data-title="java" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">public</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;"> class</span><span style="--shiki-light:#C18401;--shiki-dark:#E5C07B;"> MyInterrupt3</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> {</span></span>\n<span class="line"></span>\n<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">    public</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;"> static</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;"> void</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;"> main</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(</span><span style="--shiki-light:#C18401;--shiki-dark:#E5C07B;">String</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">[] </span><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;--shiki-light-font-style:inherit;--shiki-dark-font-style:italic;">args</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">)</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;"> throws</span><span style="--shiki-light:#C18401;--shiki-dark:#E5C07B;"> InterruptedException</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> {</span></span>\n<span class="line"></span>\n<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-dark:#7F848E;--shiki-light-font-style:italic;--shiki-dark-font-style:italic;">        //1.打断阻塞的线程</span></span>\n<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-dark:#7F848E;--shiki-light-font-style:italic;--shiki-dark-font-style:italic;">/*        Thread t1 = new Thread(()-&gt;{</span></span>\n<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-dark:#7F848E;--shiki-light-font-style:italic;--shiki-dark-font-style:italic;">            System.out.println(&quot;t1 正在运行...&quot;);</span></span>\n<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-dark:#7F848E;--shiki-light-font-style:italic;--shiki-dark-font-style:italic;">            try {</span></span>\n<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-dark:#7F848E;--shiki-light-font-style:italic;--shiki-dark-font-style:italic;">                Thread.sleep(5000);</span></span>\n<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-dark:#7F848E;--shiki-light-font-style:italic;--shiki-dark-font-style:italic;">            } catch (InterruptedException e) {</span></span>\n<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-dark:#7F848E;--shiki-light-font-style:italic;--shiki-dark-font-style:italic;">                e.printStackTrace();</span></span>\n<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-dark:#7F848E;--shiki-light-font-style:italic;--shiki-dark-font-style:italic;">            }</span></span>\n<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-dark:#7F848E;--shiki-light-font-style:italic;--shiki-dark-font-style:italic;">        }, &quot;t1&quot;);</span></span>\n<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-dark:#7F848E;--shiki-light-font-style:italic;--shiki-dark-font-style:italic;">        t1.start();</span></span>\n<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-dark:#7F848E;--shiki-light-font-style:italic;--shiki-dark-font-style:italic;">        Thread.sleep(500);</span></span>\n<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-dark:#7F848E;--shiki-light-font-style:italic;--shiki-dark-font-style:italic;">        t1.interrupt();</span></span>\n<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-dark:#7F848E;--shiki-light-font-style:italic;--shiki-dark-font-style:italic;">        System.out.println(t1.isInterrupted());*/</span></span>\n<span class="line"></span>\n<span class="line"></span>\n<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-dark:#7F848E;--shiki-light-font-style:italic;--shiki-dark-font-style:italic;">        //2.打断正常的线程</span></span>\n<span class="line"><span style="--shiki-light:#C18401;--shiki-dark:#E5C07B;">        Thread</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;"> t2</span><span style="--shiki-light:#383A42;--shiki-dark:#56B6C2;"> =</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;"> new</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;"> Thread</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(()</span><span style="--shiki-light:#C18401;--shiki-dark:#C678DD;">-&gt;</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">{</span></span>\n<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">            while</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;">true</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">) {</span></span>\n<span class="line"><span style="--shiki-light:#C18401;--shiki-dark:#E5C07B;">                Thread</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;"> current</span><span style="--shiki-light:#383A42;--shiki-dark:#56B6C2;"> =</span><span style="--shiki-light:#E45649;--shiki-dark:#E5C07B;"> Thread</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">currentThread</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">();</span></span>\n<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">                boolean</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;"> interrupted</span><span style="--shiki-light:#383A42;--shiki-dark:#56B6C2;"> =</span><span style="--shiki-light:#E45649;--shiki-dark:#E5C07B;"> current</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">isInterrupted</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">();</span></span>\n<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">                if</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(interrupted) {</span></span>\n<span class="line"><span style="--shiki-light:#E45649;--shiki-dark:#E5C07B;">                    System</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#E45649;--shiki-dark:#E5C07B;">out</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">println</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">&quot;打断状态：&quot;</span><span style="--shiki-light:#383A42;--shiki-dark:#56B6C2;">+</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">interrupted);</span></span>\n<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">                    break</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">;</span></span>\n<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">                }</span></span>\n<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">            }</span></span>\n<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">        }, </span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">&quot;t2&quot;</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">);</span></span>\n<span class="line"><span style="--shiki-light:#E45649;--shiki-dark:#E5C07B;">        t2</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">start</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">();</span></span>\n<span class="line"><span style="--shiki-light:#E45649;--shiki-dark:#E5C07B;">        Thread</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">sleep</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;">500</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">);</span></span>\n<span class="line"><span style="--shiki-light:#E45649;--shiki-dark:#E5C07B;">        t2</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">interrupt</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">();</span></span>\n<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">    }</span></span>\n<span class="line"></span>\n<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">}</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="总结-2" tabindex="-1"><a class="header-anchor" href="#总结-2"><span>总结</span></a></h4><p>有三种方式可以停止线程</p><ol><li>使用退出标志，使线程正常退出，也就是当 run 方法完成后线程终止</li><li>使用 stop 方法强行终止（不推荐，方法已作废）</li><li>使用 interrupt 方法中断线程</li></ol><ul><li>打断阻塞的线程（ sleep ， wait ， join ）的线程，线程会抛出 InterruptedException 异常。</li><li>打断正常的线程，可以根据打断状态来标记是否退出线程。</li></ul><h2 id="线程中并发安全" tabindex="-1"><a class="header-anchor" href="#线程中并发安全"><span>线程中并发安全</span></a></h2><h3 id="_1、synchronized-关键字的底层原理" tabindex="-1"><a class="header-anchor" href="#_1、synchronized-关键字的底层原理"><span>1、synchronized 关键字的底层原理</span></a></h3>',13),J={class:"hint-container tip"},M=(0,n.Lk)("p",{class:"hint-container-title"},"提示",-1),q=(0,n.Lk)("a",{href:"https://javabetter.cn/sidebar/sanfene/javathread.html#_25-synchronized%E7%9A%84%E5%AE%9E%E7%8E%B0%E5%8E%9F%E7%90%86",target:"_blank",rel:"noopener noreferrer"},[(0,n.Lk)("strong",null,"二哥的Java进阶之路")],-1),z=(0,n.Lk)("a",{href:"https://javaguide.cn/java/concurrent/java-concurrent-questions-02.html#synchronized-%E5%85%B3%E9%94%AE%E5%AD%97",target:"_blank",rel:"noopener noreferrer"},"JavaGuide",-1),W=(0,n.Fv)('<p><code>synchronized</code> 是 <code>Java</code> 中的一个关键字，翻译成中文是同步的意思，主要解决的是多个线程之间访问资源的同步性，可以保证被它修饰的方法或者代码块在任意时刻只能有一个线程执行。</p><h4 id="monitor" tabindex="-1"><a class="header-anchor" href="#monitor"><span>Monitor</span></a></h4><blockquote><p><a href="https://javaguide.cn/java/concurrent/java-concurrent-questions-02.html#synchronized-%E5%BA%95%E5%B1%82%E5%8E%9F%E7%90%86%E4%BA%86%E8%A7%A3%E5%90%97" target="_blank" rel="noopener noreferrer">synchronized 底层原理</a></p></blockquote><p>通过 JDK 自带的 javap 命令查看类的相关字节码信息:</p><div class="language-shell line-numbers-mode" data-highlighter="shiki" data-ext="shell" data-title="shell" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">javap</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;"> -v</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> xxx.class</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><figure><img src="'+t+'" alt="img_2.png" tabindex="0" loading="lazy"><figcaption>img_2.png</figcaption></figure><h4 id="总结-3" tabindex="-1"><a class="header-anchor" href="#总结-3"><span>总结</span></a></h4><p><strong>synchronized 关键字的底层原理</strong></p><ul><li>Synchronized 【对象锁】采用互斥的方式让同一时刻至多只有一个线 程能持有【对象锁】</li><li>它的底层由 ·monitor· 实现的， ·monitor· 是 jvm 级别的对象（ C++ 实 现），线程获得锁需要使用对象（锁）关联 monitor</li><li>在 monitor 内部有三个属性，分别是 owner 、 entrylist 、 waitset</li><li>其中 owner 是关联的获得锁的线程，并且只能关联一个线程；entrylist 关联的是处于阻塞状态的线程； waitset 关联的是处于Waiting 状态的线程</li></ul><h4 id="synchronized-关键字的底层原理-进阶" tabindex="-1"><a class="header-anchor" href="#synchronized-关键字的底层原理-进阶"><span>synchronized 关键字的底层原理 - 进阶</span></a></h4><p>Monitor 实现的锁属于重量级锁，你了解过锁升级吗？</p>',11),I=(0,n.Lk)("li",null,"Monitor 实现的锁属于重量级锁，里面涉及到了用户态和内核态的切换、进程的上下文切换，成本较高，性能比较低",-1),R=(0,n.Fv)('<h4 id="monitor-重量级锁" tabindex="-1"><a class="header-anchor" href="#monitor-重量级锁"><span>Monitor 重量级锁</span></a></h4><h5 id="对象的内存结构" tabindex="-1"><a class="header-anchor" href="#对象的内存结构"><span>对象的内存结构</span></a></h5><figure><img src="'+h+'" alt="img_3.png" tabindex="0" loading="lazy"><figcaption>img_3.png</figcaption></figure><h5 id="markword" tabindex="-1"><a class="header-anchor" href="#markword"><span>MarkWord</span></a></h5><figure><img src="'+r+'" alt="img_4.png" tabindex="0" loading="lazy"><figcaption>img_4.png</figcaption></figure><p>对象是怎样关联上Monitor的呢？</p><p>每个 Java 对象都可以关联一个 Monitor 对象，如果使用 synchronized 给对象上锁（重量级）之后，该对象头的 Mark Word 中就被设置指向 Monitor 对象的指针</p><h4 id="轻量级锁" tabindex="-1"><a class="header-anchor" href="#轻量级锁"><span>轻量级锁</span></a></h4><p>在很多的情况下，在 Java 程序运行时，同步块中的代码都是不存在竞争的，不同的线程交替的执行同步块中的代码。这种情况下，用重量级锁是没必要的。因此 JVM 引入了轻量级锁的概念。</p><p>重入的时候，不存在竞争关系。</p><div class="language-java line-numbers-mode" data-highlighter="shiki" data-ext="java" data-title="java" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">static</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;"> final</span><span style="--shiki-light:#C18401;--shiki-dark:#E5C07B;"> Object</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;"> obj </span><span style="--shiki-light:#383A42;--shiki-dark:#56B6C2;">=</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;"> new</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;"> Object</span><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;">()</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">;</span></span>\n<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">public</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;"> static</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;"> void</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;"> method1</span><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;">() {</span></span>\n<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">    synchronized</span><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;">( obj ) {</span></span>\n<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-dark:#7F848E;--shiki-light-font-style:italic;--shiki-dark-font-style:italic;">      // 同步块 A</span></span>\n<span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">      method2</span><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;">()</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">;</span></span>\n<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;">    }</span></span>\n<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;">}</span></span>\n<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">public</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;"> static</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;"> void</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;"> method2</span><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;">() {</span></span>\n<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">  synchronized</span><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;">( obj ) {</span></span>\n<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-dark:#7F848E;--shiki-light-font-style:italic;--shiki-dark-font-style:italic;">    // 同步块 B</span></span>\n<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;">  }</span></span>\n<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;">}</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h5 id="加锁流程" tabindex="-1"><a class="header-anchor" href="#加锁流程"><span>加锁流程</span></a></h5><ol><li>在线程栈中创建一个 Lock Record ，将其 obi字段指向锁对象。</li><li>通过 CAS 指令将Lock Record 的地址存储在对象头的 mark word 中，如果对象处于无锁状态则修改成功，代表该线程获得了轻量级锁。</li><li>如果是当前线程已经持有该锁了，代表这是一次锁重入。设置 Lock Record 第一部分为 null ，起到了一个重入计数器的作用。</li><li>如果 CAS 修改失败，说明发生了竞争，需要膨胀为重量级锁。</li></ol><h5 id="解锁过程" tabindex="-1"><a class="header-anchor" href="#解锁过程"><span>解锁过程</span></a></h5><ol><li>遍历线程栈 , 找到所有 obj 字段等于当前锁对象的 Lock Record 。</li><li>如果 Lock Record 的 Mark Word 为 null ，代表这是一次重入，将 obj 设置为 null 后 continue 。</li><li>如果 Lock Record 的 Mark Word 不为 null ，则利用 CAS 指令将对象头的 mark word 恢复成为无锁状态。如果失败则膨胀为重量级锁。</li></ol><h4 id="偏向锁" tabindex="-1"><a class="header-anchor" href="#偏向锁"><span>偏向锁</span></a></h4><p>轻量级锁在没有竞争时（就自己这个线程），每次重入仍然需要执行 CAS 操作。 Java 6 中引入了偏向锁来做进一步优化：只有第一次使用 CAS 将线程 ID 设置到对象的 Mark Word 头，之后发现这个线程 ID 是自己的就表示没有竞争，不用重新 CAS 。以后只要不发生竞争，这个对象就归该线程所有</p><div class="language-java line-numbers-mode" data-highlighter="shiki" data-ext="java" data-title="java" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">static</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;"> final</span><span style="--shiki-light:#C18401;--shiki-dark:#E5C07B;"> Object</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;"> obj </span><span style="--shiki-light:#383A42;--shiki-dark:#56B6C2;">=</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;"> new</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;"> Object</span><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;">()</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">;</span></span>\n<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">public</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;"> static</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;"> void</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;"> m1</span><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;"> () {</span></span>\n<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">  synchronized</span><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;"> (obj) {</span></span>\n<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-dark:#7F848E;--shiki-light-font-style:italic;--shiki-dark-font-style:italic;">    // 同步块 A</span></span>\n<span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">    m2</span><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;">()</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">;</span></span>\n<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;">  }</span></span>\n<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;">}</span></span>\n<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">public</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;"> static</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;"> void</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;"> m2</span><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;"> () {</span></span>\n<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">  synchronized</span><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;"> (obj) {</span></span>\n<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-dark:#7F848E;--shiki-light-font-style:italic;--shiki-dark-font-style:italic;">    // 同步块 B</span></span>\n<span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">    m3</span><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;">()</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">;</span></span>\n<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;">  }</span></span>\n<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;">}</span></span>\n<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">public</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;"> static</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;"> void</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;"> m3</span><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;"> () {</span></span>\n<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">  synchronized</span><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;"> (obj) {</span></span>\n<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;">  }</span></span>\n<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;">}</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="总结-4" tabindex="-1"><a class="header-anchor" href="#总结-4"><span>总结</span></a></h4><figure><img src="'+p+'" alt="img_5.png" tabindex="0" loading="lazy"><figcaption>img_5.png</figcaption></figure><h3 id="_2、谈谈jmm-java内存模型" tabindex="-1"><a class="header-anchor" href="#_2、谈谈jmm-java内存模型"><span>2、谈谈JMM（Java内存模型）</span></a></h3>',21),P={class:"hint-container tip"},Q=(0,n.Lk)("p",{class:"hint-container-title"},"提示",-1),O=(0,n.Lk)("a",{href:"https://javaguide.cn/java/concurrent/java-concurrent-questions-02.html#jmm-java-%E5%86%85%E5%AD%98%E6%A8%A1%E5%9E%8B",target:"_blank",rel:"noopener noreferrer"},"JavaGuide-JMM(Java 内存模型)",-1),V=(0,n.Lk)("a",{href:"https://tobebetterjavaer.com/sidebar/sanfene/javathread.html#java%E5%86%85%E5%AD%98%E6%A8%A1%E5%9E%8B",target:"_blank",rel:"noopener noreferrer"},"二哥的Java进阶之路 - JMM(Java 内存模型)",-1),N=(0,n.Fv)('<p>JMM(Java Memory Model)Java 内存模型，定义了<strong>共享内存</strong>中<strong>多线程程序读写操作</strong>的行为<strong>规范</strong>，通过这些规则来规范对内存的读写操作从而保证指令的正确性。</p><h4 id="总结-5" tabindex="-1"><a class="header-anchor" href="#总结-5"><span>总结</span></a></h4><ul><li>JMM(Java Memory Model)Java 内存模型，定义了共享内存中多线程程序读写操作的行为规范，通过这些规则来规范对内存的读写操作从而保证指令的正确性</li><li>JMM 把内存分为两块，一块是私有线程的工作区域（工作内存），一块是所有线程的共享区域（主内存）</li><li>线程跟线程之间是相互隔离，线程跟线程交互需要通过主内存</li></ul><h3 id="_3、cas-你知道吗" tabindex="-1"><a class="header-anchor" href="#_3、cas-你知道吗"><span>3、CAS 你知道吗？</span></a></h3>',4),G={class:"hint-container tip"},X=(0,n.Lk)("p",{class:"hint-container-title"},"提示",-1),H=(0,n.Lk)("a",{href:"https://javaguide.cn/java/concurrent/java-concurrent-questions-02.html#%E5%A6%82%E4%BD%95%E5%AE%9E%E7%8E%B0%E4%B9%90%E8%A7%82%E9%94%81",target:"_blank",rel:"noopener noreferrer"},"JavaGuide- CAS",-1),K=(0,n.Lk)("a",{href:"https://tobebetterjavaer.com/sidebar/sanfene/javathread.html#_32-cas%E5%91%A2-cas%E4%BA%86%E8%A7%A3%E5%A4%9A%E5%B0%91",target:"_blank",rel:"noopener noreferrer"},"二哥的Java进阶之路 - CAS",-1),Y=(0,n.Fv)('<p>CAS 的全称是： Compare And Swap( 比较再交换 ) ，它体现的一种乐观锁的思想，在无锁情况下保证线程操作共享数据的原子性。</p><p>在 JUC （ java.util.concurrent ）包下实现的很多类都用到了 CAS 操作</p><ul><li>AbstractQueuedSynchronizer （ AQS 框架）</li><li>AtomicXXX 类</li></ul><figure><img src="'+k+'" alt="img_6.png" tabindex="0" loading="lazy"><figcaption>img_6.png</figcaption></figure><ul><li>因为没有加锁，所以线程不会陷入阻塞，效率较高</li><li>如果竞争激烈，重试频繁发生，效率会受影响</li></ul><h4 id="底层实现" tabindex="-1"><a class="header-anchor" href="#底层实现"><span>底层实现</span></a></h4><figure><img src="'+d+'" alt="img_7.png" tabindex="0" loading="lazy"><figcaption>img_7.png</figcaption></figure><h4 id="总结-6" tabindex="-1"><a class="header-anchor" href="#总结-6"><span>总结</span></a></h4><h5 id="cas-你知道吗" tabindex="-1"><a class="header-anchor" href="#cas-你知道吗"><span>CAS 你知道吗？</span></a></h5><ul><li>CAS 的全称是： Compare And Swap( 比较再交换 ); 它体现的一种乐观锁的思想，在无锁状态下保证线程操作数据的原子性。</li><li>CAS 使用到的地方很多： AQS 框架、 AtomicXXX 类</li><li>在操作共享变量的时候使用的自旋锁，效率上更高一些</li><li>CAS 的底层是调用的 Unsafe 类中的方法，都是操作系统提供的，其他语言实现</li></ul><h5 id="乐观锁和悲观锁的区别" tabindex="-1"><a class="header-anchor" href="#乐观锁和悲观锁的区别"><span>乐观锁和悲观锁的区别</span></a></h5><ul><li>CAS 是基于乐观锁的思想：最乐观的估计，不怕别的线程来修改共享变量，就算改了也没关系，我吃亏点再重试呗。</li><li>synchronized 是基于悲观锁的思想：最悲观的估计，得防着其它线程来修改共享变量，我上了锁你们都别想改，我改完了解开锁，你们才有机会。</li></ul><h3 id="_4、请谈谈你对-volatile-的理解" tabindex="-1"><a class="header-anchor" href="#_4、请谈谈你对-volatile-的理解"><span>4、请谈谈你对 volatile 的理解</span></a></h3>',13),Z={class:"hint-container tip"},$=(0,n.Lk)("p",{class:"hint-container-title"},"提示",-1),ii=(0,n.Lk)("a",{href:"https://javaguide.cn/java/concurrent/java-concurrent-questions-02.html#volatile-%E5%85%B3%E9%94%AE%E5%AD%97",target:"_blank",rel:"noopener noreferrer"},"JavaGuide- volatile",-1),si=(0,n.Lk)("a",{href:"https://javabetter.cn/sidebar/sanfene/javathread.html#_23-volatile%E5%AE%9E%E7%8E%B0%E5%8E%9F%E7%90%86%E4%BA%86%E8%A7%A3%E5%90%97",target:"_blank",rel:"noopener noreferrer"},"二哥的Java进阶之路 - volatile",-1),ai=(0,n.Lk)("p",null,"一旦一个共享变量（类的成员变量、类的静态成员变量）被 volatile 修饰之后，那么就具备了两层语义：",-1),ni=(0,n.Fv)('<h4 id="保证线程间的可见性" tabindex="-1"><a class="header-anchor" href="#保证线程间的可见性"><span>保证线程间的可见性</span></a></h4><p>用 volatile 修饰共享变量，能够防止编译器等优化发生，让一个线程对共享变量的修改对另一个线程可见。</p><p>com.itheima.lock.ForeverLoop</p><p>不加 volatile 也可见。</p><div class="language-java line-numbers-mode" data-highlighter="shiki" data-ext="java" data-title="java" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">public</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;"> class</span><span style="--shiki-light:#C18401;--shiki-dark:#E5C07B;"> ForeverLoop</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> {</span></span>\n<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-dark:#7F848E;--shiki-light-font-style:italic;--shiki-dark-font-style:italic;">    //static volatile boolean stop = false;</span></span>\n<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">    static</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;"> boolean</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;"> stop </span><span style="--shiki-light:#383A42;--shiki-dark:#56B6C2;">=</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;"> false</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">;</span></span>\n<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">    public</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;"> static</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;"> void</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;"> main</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(</span><span style="--shiki-light:#C18401;--shiki-dark:#E5C07B;">String</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">[] </span><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;--shiki-light-font-style:inherit;--shiki-dark-font-style:italic;">args</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">)</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> {</span></span>\n<span class="line"></span>\n<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-dark:#7F848E;--shiki-light-font-style:italic;--shiki-dark-font-style:italic;">        // static boolean stop = false;  时，也是可见的</span></span>\n<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">        new</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;"> Thread</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(() </span><span style="--shiki-light:#C18401;--shiki-dark:#C678DD;">-&gt;</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> {</span></span>\n<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">            try</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> {</span></span>\n<span class="line"><span style="--shiki-light:#E45649;--shiki-dark:#E5C07B;">                Thread</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">sleep</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;">100</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">);</span></span>\n<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">            } </span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">catch</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> (</span><span style="--shiki-light:#C18401;--shiki-dark:#E5C07B;">InterruptedException</span><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;--shiki-light-font-style:inherit;--shiki-dark-font-style:italic;"> e</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">) {</span></span>\n<span class="line"><span style="--shiki-light:#E45649;--shiki-dark:#E5C07B;">                e</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">printStackTrace</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">();</span></span>\n<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">            }</span></span>\n<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">            stop </span><span style="--shiki-light:#383A42;--shiki-dark:#56B6C2;">=</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;"> true</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">;</span></span>\n<span class="line"><span style="--shiki-light:#E45649;--shiki-dark:#E5C07B;">            System</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#E45649;--shiki-dark:#E5C07B;">out</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">println</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(</span><span style="--shiki-light:#E45649;--shiki-dark:#E5C07B;">Thread</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">currentThread</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">().</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">getName</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">()</span><span style="--shiki-light:#383A42;--shiki-dark:#56B6C2;">+</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">&quot;：modify stop to true...&quot;</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">);</span></span>\n<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">        },</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">&quot;t1&quot;</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">).</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">start</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">();</span></span>\n<span class="line"></span>\n<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">        new</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;"> Thread</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(() </span><span style="--shiki-light:#C18401;--shiki-dark:#C678DD;">-&gt;</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> {</span></span>\n<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">            try</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> {</span></span>\n<span class="line"><span style="--shiki-light:#E45649;--shiki-dark:#E5C07B;">                Thread</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">sleep</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;">200</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">);</span></span>\n<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">            } </span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">catch</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> (</span><span style="--shiki-light:#C18401;--shiki-dark:#E5C07B;">InterruptedException</span><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;--shiki-light-font-style:inherit;--shiki-dark-font-style:italic;"> e</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">) {</span></span>\n<span class="line"><span style="--shiki-light:#E45649;--shiki-dark:#E5C07B;">                e</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">printStackTrace</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">();</span></span>\n<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">            }</span></span>\n<span class="line"><span style="--shiki-light:#E45649;--shiki-dark:#E5C07B;">            System</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#E45649;--shiki-dark:#E5C07B;">out</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">println</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(</span><span style="--shiki-light:#E45649;--shiki-dark:#E5C07B;">Thread</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">currentThread</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">().</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">getName</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">()</span><span style="--shiki-light:#383A42;--shiki-dark:#56B6C2;">+</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">&quot;：&quot;</span><span style="--shiki-light:#383A42;--shiki-dark:#56B6C2;">+</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">stop);</span></span>\n<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">        },</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">&quot;t2&quot;</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">).</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">start</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">();</span></span>\n<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">        </span></span>\n<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">        new</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;"> Thread</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(() </span><span style="--shiki-light:#C18401;--shiki-dark:#C678DD;">-&gt;</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> {</span></span>\n<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">            int</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;"> i</span><span style="--shiki-light:#383A42;--shiki-dark:#56B6C2;"> =</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;"> 0</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">;</span></span>\n<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">            while</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> (</span><span style="--shiki-light:#383A42;--shiki-dark:#56B6C2;">!</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">stop) {</span></span>\n<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">                i++;</span></span>\n<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">            }</span></span>\n<span class="line"><span style="--shiki-light:#E45649;--shiki-dark:#E5C07B;">            System</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#E45649;--shiki-dark:#E5C07B;">out</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">println</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">&quot;stopped... c:&quot;</span><span style="--shiki-light:#383A42;--shiki-dark:#56B6C2;">+</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> i);</span></span>\n<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">        },</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">&quot;t3&quot;</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">).</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">start</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">();</span></span>\n<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">    }</span></span>\n<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">}</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>现象：定义<code>static boolean stop = false;</code>本身线程是可见的，但是t3确实死循环，为什么？</p><p>问题分析：主要是因为在 JVM 虚拟机中有一个 JIT （即时编译器）给代码做了优化。</p><figure><img src="'+o+'" alt="img_8.png" tabindex="0" loading="lazy"><figcaption>img_8.png</figcaption></figure>',8),li=(0,n.Lk)("code",null,"-Xint ",-1),ei=(0,n.Lk)("code",null,"stop",-1),ti=(0,n.Lk)("code",null,"volatile",-1),hi=(0,n.Lk)("code",null,"jit",-1),ri=(0,n.Lk)("code",null,"volatile",-1),pi=(0,n.Fv)('<h4 id="禁止进行指令重排序" tabindex="-1"><a class="header-anchor" href="#禁止进行指令重排序"><span>禁止进行指令重排序</span></a></h4><p>用<code>volatile</code>修饰共享变量会在读、写共享变量时加入不同的屏障，阻止其他读写操作越过屏障，从而达到阻止重排序的效果。</p><figure><img src="'+g+'" alt="img_9.png" tabindex="0" loading="lazy"><figcaption>img_9.png</figcaption></figure><p>测试代码：ReorderTest</p><figure><img src="'+c+'" alt="img_10.png" tabindex="0" loading="lazy"><figcaption>img_10.png</figcaption></figure><p>加在 X 上却不行。 <img src="'+A+'" alt="img_11.png" loading="lazy"></p><h4 id="总结-7" tabindex="-1"><a class="header-anchor" href="#总结-7"><span>总结</span></a></h4>',7),ki=(0,n.Lk)("code",null,"volatile",-1),di=(0,n.Lk)("code",null," ·",-1),oi={id:"_5、什么是-aqs",tabindex:"-1"},gi={class:"header-anchor",href:"#_5、什么是-aqs"},ci={class:"hint-container tip"},Ai=(0,n.Lk)("p",{class:"hint-container-title"},"提示",-1),yi=(0,n.Lk)("a",{href:"https://javaguide.cn/java/concurrent/java-concurrent-questions-03.html#aqs",target:"_blank",rel:"noopener noreferrer"},"JavaGuide- AQS",-1),Bi=(0,n.Lk)("a",{href:"https://tobebetterjavaer.com/sidebar/sanfene/javathread.html#_29-aqs%E4%BA%86%E8%A7%A3%E5%A4%9A%E5%B0%91",target:"_blank",rel:"noopener noreferrer"},"二哥的Java进阶之路 - AQS",-1),mi=(0,n.Fv)('<h4 id="总结-8" tabindex="-1"><a class="header-anchor" href="#总结-8"><span>总结</span></a></h4><p>什么是 AQS ？</p><ul><li>是多线程中的队列同步器。是一种锁机制，它是做为一个基础框架使用的，像 ReentrantLock 、 Semaphore 都是基于 AQS 实现的</li><li>AQS 内部维护了一个先进先出的双向队列，队列中存储的排队的线程</li><li>在 AQS 内部还有一个属性 state ，这个 state 就相当于是一个资源，默认是 0 （无锁状态），如果队列中的有一个线程修改成功了 state 为 1 ，则</li><li>当前线程就相等于获取了资源</li><li>在对 state 修改的时候使用的 cas 操作，保证多个线程修改的情况下原子性</li></ul><h3 id="_6、reentrantlock-的实现原理" tabindex="-1"><a class="header-anchor" href="#_6、reentrantlock-的实现原理"><span>6、ReentrantLock 的实现原理</span></a></h3>',4),ui={class:"hint-container tip"},vi=(0,n.Lk)("p",{class:"hint-container-title"},"提示",-1),bi=(0,n.Lk)("a",{href:"https://javaguide.cn/java/concurrent/java-concurrent-questions-02.html#reentrantlock",target:"_blank",rel:"noopener noreferrer"},"JavaGuide- ReentrantLock",-1),Fi=(0,n.Lk)("a",{href:"https://javabetter.cn/sidebar/sanfene/javathread.html#_30-reentrantlock%E5%AE%9E%E7%8E%B0%E5%8E%9F%E7%90%86",target:"_blank",rel:"noopener noreferrer"},"二哥的Java进阶之路 - ReentrantLock",-1),Ei=(0,n.Fv)('<p>ReentrantLock 翻译过来是可重入锁，相对于 synchronized 它具备以下特点：</p><ul><li>可中断</li><li>可以设置超时时间</li><li>可以设置公平锁</li><li>支持多个条件变量</li><li>与 synchronized 一样，都支持重入</li></ul><div class="language-java line-numbers-mode" data-highlighter="shiki" data-ext="java" data-title="java" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#A0A1A7;--shiki-dark:#7F848E;--shiki-light-font-style:italic;--shiki-dark-font-style:italic;">// 创建非公平锁</span></span>\n<span class="line"><span style="--shiki-light:#C18401;--shiki-dark:#E5C07B;">ReentrantLock</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;"> lock </span><span style="--shiki-light:#383A42;--shiki-dark:#56B6C2;">=</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;"> new</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;"> ReentrantLock</span><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;">()</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">;</span></span>\n<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-dark:#7F848E;--shiki-light-font-style:italic;--shiki-dark-font-style:italic;">// 获取锁操作</span></span>\n<span class="line"><span style="--shiki-light:#E45649;--shiki-dark:#E5C07B;">lock</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">lock</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">();</span></span>\n<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">try</span><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;"> {</span></span>\n<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-dark:#7F848E;--shiki-light-font-style:italic;--shiki-dark-font-style:italic;">        // 执行代码逻辑</span></span>\n<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;">} </span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">catch</span><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;"> (</span><span style="--shiki-light:#C18401;--shiki-dark:#E5C07B;">Exception</span><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;--shiki-light-font-style:inherit;--shiki-dark-font-style:italic;"> ex</span><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;">) {</span></span>\n<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-dark:#7F848E;--shiki-light-font-style:italic;--shiki-dark-font-style:italic;">   // ...</span></span>\n<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;">} </span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">finally</span><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;"> {</span></span>\n<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-dark:#7F848E;--shiki-light-font-style:italic;--shiki-dark-font-style:italic;">   // 解锁操作</span></span>\n<span class="line"><span style="--shiki-light:#E45649;--shiki-dark:#E5C07B;">   lock</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">unlock</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">();</span><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;"> </span></span>\n<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;">}</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>',3),Ci=(0,n.Lk)("figure",null,[(0,n.Lk)("img",{src:y,alt:"img_12.png",tabindex:"0",loading:"lazy"}),(0,n.Lk)("figcaption",null,"img_12.png")],-1),ji=(0,n.Lk)("h4",{id:"总结-9",tabindex:"-1"},[(0,n.Lk)("a",{class:"header-anchor",href:"#总结-9"},[(0,n.Lk)("span",null,"总结")])],-1),fi=(0,n.Lk)("p",null,"ReentrantLock 的实现原理",-1),Di=(0,n.Lk)("li",null,"ReentrantLock 表示支持重新进入的锁，调用 lock 方 法获取了锁之后，再次调用 lock ，是不会再阻塞",-1),xi=(0,n.Lk)("li",null,"支持公平锁和非公平锁，在提供的构造器的中无参默认是非公平锁，也可以传参设置为公平锁",-1),_i=(0,n.Lk)("h3",{id:"_7、synchronized-和-lock-有什么区别",tabindex:"-1"},[(0,n.Lk)("a",{class:"header-anchor",href:"#_7、synchronized-和-lock-有什么区别"},[(0,n.Lk)("span",null,"7、synchronized 和 Lock 有什么区别?")])],-1),Ui={class:"hint-container tip"},wi=(0,n.Lk)("p",{class:"hint-container-title"},"提示",-1),Li=(0,n.Lk)("a",{href:"https://javaguide.cn/java/concurrent/java-concurrent-questions-02.html#synchronized-%E5%92%8C-reentrantlock-%E6%9C%89%E4%BB%80%E4%B9%88%E5%8C%BA%E5%88%AB",target:"_blank",rel:"noopener noreferrer"},"JavaGuide- synchronized 和 Lock 有什么区别",-1),Ti=(0,n.Lk)("a",{href:"https://javabetter.cn/sidebar/sanfene/javathread.html#_28-%E8%AF%B4%E8%AF%B4synchronized%E5%92%8Creentrantlock%E7%9A%84%E5%8C%BA%E5%88%AB",target:"_blank",rel:"noopener noreferrer"},"二哥的Java进阶之路 - synchronized 和 Lock 有什么区别",-1),Si=(0,n.Fv)('<ol><li><p>语法层面 synchronized 是关键字，源码在 jvm 中，用 c++ 语言实现 Lock 是接口，源码由 jdk 提供，用 java 语言实现</p></li><li><p><strong>功能层面</strong></p></li></ol><p>二者均属于悲观锁、都具备基本的互斥、同步、锁重入功能 Lock 提供了许多 synchronized 不具备的功能，例如公平锁、可打断、可超时、多条件变量 Lock 有适合不同场景的实现，如 ReentrantLock ， ReentrantReadWriteLock( 读写锁 )</p><ol start="3"><li>性能层面 在没有竞争时， synchronized 做了很多优化，如偏向锁、轻量级锁，性能不赖 在竞争激烈时， Lock 的实现通常会提供更好的性能</li></ol><h3 id="_8、死锁产生的条件是什么" tabindex="-1"><a class="header-anchor" href="#_8、死锁产生的条件是什么"><span>8、死锁产生的条件是什么？</span></a></h3><div class="hint-container tip"><p class="hint-container-title">提示</p><p><a href="https://javaguide.cn/java/concurrent/java-concurrent-questions-01.html#%E4%BB%80%E4%B9%88%E6%98%AF%E7%BA%BF%E7%A8%8B%E6%AD%BB%E9%94%81-%E5%A6%82%E4%BD%95%E9%81%BF%E5%85%8D%E6%AD%BB%E9%94%81" target="_blank" rel="noopener noreferrer">JavaGuide- 死锁</a> ☀️ <a href="https://javabetter.cn/sidebar/sanfene/javathread.html#_37-%E7%BA%BF%E7%A8%8B%E6%AD%BB%E9%94%81%E4%BA%86%E8%A7%A3%E5%90%97-%E8%AF%A5%E5%A6%82%E4%BD%95%E9%81%BF%E5%85%8D" target="_blank" rel="noopener noreferrer">二哥的Java进阶之路 - 死锁</a></p></div><figure><img src="'+B+'" alt="img_13.png" tabindex="0" loading="lazy"><figcaption>img_13.png</figcaption></figure><h4 id="如何进行死锁诊断" tabindex="-1"><a class="header-anchor" href="#如何进行死锁诊断"><span>如何进行死锁诊断？</span></a></h4><p>当程序出现了死锁现象，我们可以使用 jdk 自带的工具： jps 和 jstack</p><ul><li>jps ：输出 JVM 中运行的进程状态信息</li><li>jstack ：查看 java 进程内线程的堆栈信息</li></ul><figure><img src="'+m+'" alt="img_14.png" tabindex="0" loading="lazy"><figcaption>img_14.png</figcaption></figure><p>其他解决工具，可视化工具</p><ul><li>jconsole 用于对 jvm 的内存，线程，类 的监控，是一个基于 jmx 的 GUI 性能监控工具 打开方式： java 安装目录 bin 目录下 直接启动 jconsole.exe 就行</li></ul><figure><img src="'+u+'" alt="img_15.png" tabindex="0" loading="lazy"><figcaption>img_15.png</figcaption></figure><ul><li>VisualVM ：故障处理工具 能够监控线程，内存情况，查看方法的 CPU 时间和内存中的对 象，已被 GC 的对象，反向查看分配的堆栈 打开方式： java 安装目录 bin 目录下 直接启动 jvisualvm.exe 就行</li></ul><h4 id="总结-10" tabindex="-1"><a class="header-anchor" href="#总结-10"><span>总结</span></a></h4><ol><li>死锁产生的条件是什么？</li></ol><p>一个线程需要同时获取多把锁，这时就容易发生死锁</p><ol start="2"><li>如何进行死锁诊断？</li></ol><ul><li>当程序出现了死锁现象，我们可以使用 jdk 自带的工具： jps 和 jstack</li><li>jps ：输出 JVM 中运行的进程状态信息</li><li>jstack ：查看 java 进程内线程的堆栈信息，查看日志，检查是否有死锁。如果有死锁现象，需要查看具体代码分析后，可修复</li><li>可视化工具 jconsole 、 VisualVM 也可以检查死锁问题</li></ul><h3 id="_8、聊一下-concurrenthashmap" tabindex="-1"><a class="header-anchor" href="#_8、聊一下-concurrenthashmap"><span>8、<strong>聊一下 ConcurrentHashMap</strong></span></a></h3><div class="hint-container tip"><p class="hint-container-title">提示</p><p><a href="https://javaguide.cn/java/collection/java-collection-questions-02.html#concurrenthashmap-%E7%BA%BF%E7%A8%8B%E5%AE%89%E5%85%A8%E7%9A%84%E5%85%B7%E4%BD%93%E5%AE%9E%E7%8E%B0%E6%96%B9%E5%BC%8F-%E5%BA%95%E5%B1%82%E5%85%B7%E4%BD%93%E5%AE%9E%E7%8E%B0" target="_blank" rel="noopener noreferrer">JavaGuide- ConcurrentHashMap</a> ☀️ <a href="https://javabetter.cn/sidebar/sanfene/collection.html#_26-%E8%83%BD%E5%85%B7%E4%BD%93%E8%AF%B4%E4%B8%80%E4%B8%8Bconcurrenthashmap%E7%9A%84%E5%AE%9E%E7%8E%B0%E5%90%97" target="_blank" rel="noopener noreferrer">二哥的Java进阶之路 - ConcurrentHashMap</a></p></div><p>ConcurrentHashMap 是一种线程安全的高效 Map 集合 底层数据结构：</p><ul><li>JDK1.7 底层采用分段的数组 + 链表实现</li><li>JDK1.8 采用的数据结构跟 HashMap1.8 的结构一样，数组 + 链表 / 红黑二叉树。</li></ul><figure><img src="'+v+'" alt="img_16.png" tabindex="0" loading="lazy"><figcaption>img_16.png</figcaption></figure><h4 id="jdk1-8-的concurrenthashmap" tabindex="-1"><a class="header-anchor" href="#jdk1-8-的concurrenthashmap"><span>JDK1.8 的ConcurrentHashMap</span></a></h4><p>在JDK1.8 中，放弃了 Segment 肿的设计，数据结构跟 HashMap 的数据结构是一样的: 数组 +红黑树 +链表采用 CAS + Synchronized 来保证并发安全进行实现</p><ul><li>CAS 控制数组节点的添加</li><li>synchronized 只锁定当前链表或红黑二又树的首节点，只要 hash 不冲突，就不会产生并发的问题 ，效率得到提升</li></ul><figure><img src="'+b+'" alt="img_17.png" tabindex="0" loading="lazy"><figcaption>img_17.png</figcaption></figure><h4 id="总结-聊一下-concurrenthashmap" tabindex="-1"><a class="header-anchor" href="#总结-聊一下-concurrenthashmap"><span>总结： 聊一下 ConcurrentHashMap</span></a></h4><ol><li>底层数据结构：</li></ol><ul><li>JDK1.7 底层采用分段的数组 + 链表实现</li><li>JDK1.8 采用的数据结构跟 HashMap1.8 的结构一样，数组 + 链表 / 红黑二叉树</li></ul><ol start="2"><li>加锁的方式</li></ol><ul><li>DK1.7 采用 Segment 分段锁，底层使用的是 ReentrantLock</li><li>JDK1.8 采用 CAS 添加新节点，采用 synchronized 锁定链表或红黑二叉树的首节点，相对 Segment 分段锁粒度更细，性能更好</li></ul><h3 id="_9、导致并发程序出现问题的根本原因是什么-java-程序中怎么保证多线程的执行安全" tabindex="-1"><a class="header-anchor" href="#_9、导致并发程序出现问题的根本原因是什么-java-程序中怎么保证多线程的执行安全"><span>9、导致并发程序出现问题的根本原因是什么？(Java 程序中怎么保证多线程的执行安全 )</span></a></h3>',34),Ji={class:"hint-container tip"},Mi=(0,n.Lk)("p",{class:"hint-container-title"},"提示",-1),qi=(0,n.Lk)("a",{href:"https://javaguide.cn/java/concurrent/java-concurrent-questions-02.html#jmm-java-%E5%86%85%E5%AD%98%E6%A8%A1%E5%9E%8B",target:"_blank",rel:"noopener noreferrer"},"JavaGuide- JMM",-1),zi=(0,n.Lk)("a",{href:"https://javabetter.cn/sidebar/sanfene/javathread.html#java%E5%86%85%E5%AD%98%E6%A8%A1%E5%9E%8B",target:"_blank",rel:"noopener noreferrer"},"二哥的Java进阶之路 - JMM",-1),Wi=(0,n.Lk)("ol",null,[(0,n.Lk)("li",null,"原子性 synchronized 、 lock"),(0,n.Lk)("li",null,"内存可见性 volatile 、 synchronized 、 lock"),(0,n.Lk)("li",null,"有序性 volatile")],-1),Ii=(0,n.Lk)("h2",{id:"线程池",tabindex:"-1"},[(0,n.Lk)("a",{class:"header-anchor",href:"#线程池"},[(0,n.Lk)("span",null,"线程池")])],-1),Ri={class:"hint-container tip"},Pi=(0,n.Lk)("p",{class:"hint-container-title"},"提示",-1),Qi=(0,n.Lk)("p",null,"更多:",-1),Oi=(0,n.Lk)("a",{href:"https://javaguide.cn/java/concurrent/java-concurrent-questions-03.html#%E7%BA%BF%E7%A8%8B%E6%B1%A0",target:"_blank",rel:"noopener noreferrer"},"JavaGuide- 线程池",-1),Vi=(0,n.Lk)("a",{href:"https://javabetter.cn/sidebar/sanfene/javathread.html#%E7%BA%BF%E7%A8%8B%E6%B1%A0",target:"_blank",rel:"noopener noreferrer"},"二哥的Java进阶之路 - 线程池",-1),Ni=(0,n.Fv)('<h3 id="_1、说一下线程池的核心参数-线程池的执行原理知道吗" tabindex="-1"><a class="header-anchor" href="#_1、说一下线程池的核心参数-线程池的执行原理知道吗"><span>1、说一下线程池的核心参数？线程池的执行原理知道吗？</span></a></h3><div class="language-java line-numbers-mode" data-highlighter="shiki" data-ext="java" data-title="java" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">public</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;"> ThreadPoolExecutor</span><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;">(</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">int</span><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;"> corePoolSize</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">,</span></span>\n<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">                int</span><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;"> maximumPoolSize</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">,</span></span>\n<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">                long</span><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;"> keepAliveTime</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">,</span></span>\n<span class="line"><span style="--shiki-light:#C18401;--shiki-dark:#E5C07B;">                TimeUnit</span><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;"> unit</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">,</span></span>\n<span class="line"><span style="--shiki-light:#C18401;--shiki-dark:#E5C07B;">                BlockingQueue</span><span style="--shiki-light:#383A42;--shiki-dark:#56B6C2;">&lt;</span><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;">Runnable</span><span style="--shiki-light:#383A42;--shiki-dark:#56B6C2;">&gt;</span><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;"> workQueue</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">,</span></span>\n<span class="line"><span style="--shiki-light:#C18401;--shiki-dark:#E5C07B;">                ThreadFactory</span><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;"> threadFactory</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">,</span></span>\n<span class="line"><span style="--shiki-light:#C18401;--shiki-dark:#E5C07B;">                RejectedExecutionHandler</span><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;"> handler)</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ul><li>corePoolSize 核心线程数目</li><li>maximumPoolSize 最大线程数目 = ( 核心线程 + 救急线程的最大数目 )</li><li>keepAliveTime 生存时间 - 救急线程的生存时间，生存时间内没有新任务，此线程资源会释放</li><li>unit 时间单位 - 救急线程的生存时间单位，如秒、毫秒等</li><li>workQueue - 当没有空闲核心线程时，新来任务会加入到此队列排队，队列满会创建救急线程执行任务</li><li>threadFactory 线程工厂 - 可以定制线程对象的创建，例如设置线程名字、是否是守护线程等</li><li>handler 拒绝策略 - 当所有线程都在繁忙， workQueue 也放满时，会触发拒绝策略</li></ul><h4 id="线程池的执行原理" tabindex="-1"><a class="header-anchor" href="#线程池的执行原理"><span>线程池的执行原理</span></a></h4><figure><img src="'+F+'" alt="img_18.png" tabindex="0" loading="lazy"><figcaption>img_18.png</figcaption></figure><p>流程测试代码：https://gitee.com/cuckoocry/heima-demo/blob/master/juc-basic/src/main/java/com/itheima/threadpool/TestThreadPoolExecutor.java</p><h3 id="_2、线程池中有哪些常见的阻塞队列" tabindex="-1"><a class="header-anchor" href="#_2、线程池中有哪些常见的阻塞队列"><span>2、线程池中有哪些常见的阻塞队列</span></a></h3><p>workQueue - 当没有空闲核心线程时，新来任务会加入到此队列排队，队列满会创建救急线程执行任务</p>',8),Gi=(0,n.Lk)("li",null,"DelayedWorkQueue ：是一个优先级队列，它可以保证每次出队的任务都是当前队列中执行时间最靠前的",-1),Xi=(0,n.Lk)("li",null,"SynchronousQueue ：不存储元素的阻塞队列，每个插入操作都必须等待一个移出操作。",-1),Hi=(0,n.Fv)('<figure><img src="'+E+'" alt="img_19.png" tabindex="0" loading="lazy"><figcaption>img_19.png</figcaption></figure><h3 id="_3、如何确定核心线程数" tabindex="-1"><a class="header-anchor" href="#_3、如何确定核心线程数"><span>3、如何确定核心线程数</span></a></h3><ul><li>IO 密集型任务 一般来说：文件读写、 DB 读写、网络请求等</li></ul><div class="language- line-numbers-mode" data-highlighter="shiki" data-ext="" data-title="" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span>核心线程数大小设置为 2N+1</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><ul><li>CPU 密集型任务 一般来说：计算型代码、 Bitmap 转换、 Gson 转换等</li></ul><div class="language- line-numbers-mode" data-highlighter="shiki" data-ext="" data-title="" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span>核心线程数大小设置为 N+1</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><p>查看机器的 CPU 核数:</p><div class="language-java line-numbers-mode" data-highlighter="shiki" data-ext="java" data-title="java" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">public</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;"> static</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;"> void</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;"> main</span><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;">(</span><span style="--shiki-light:#C18401;--shiki-dark:#E5C07B;">String</span><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;">[] args) {</span></span>\n<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-dark:#7F848E;--shiki-light-font-style:italic;--shiki-dark-font-style:italic;">    // 查看机器的 CPU 核数</span></span>\n<span class="line"><span style="--shiki-light:#E45649;--shiki-dark:#E5C07B;">    System</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#E45649;--shiki-dark:#E5C07B;">out</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">println</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(Runtime.</span></span>\n<span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">    getRuntime</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">().</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">availableProcessors</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">());</span></span>\n<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;">}</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="如何确定核心线程数" tabindex="-1"><a class="header-anchor" href="#如何确定核心线程数"><span>如何确定核心线程数</span></a></h4><p>参考回答：</p><p>① 高并发、任务执行时间短 （ CPU 核数 +1 ），减少线程上下文的切换</p><p>② 并发不高、任务执行时间长</p><ul><li>IO 密集型的任务  (CPU 核数 * 2 + 1)</li><li>计算密集型任务 （ CPU 核数 +1 ）</li></ul><p>③ 并发高、业务执行时间长，解决这种类型任务的关键不在于线程池而在于整体架构的设计，看看这些业务里面某些数据是否能做缓存是第一步，增加服务器是第二步，至于线程池的设置，设置参考（ 2 ）</p><h3 id="_4、线程池的种类有哪些" tabindex="-1"><a class="header-anchor" href="#_4、线程池的种类有哪些"><span>4、线程池的种类有哪些？</span></a></h3><p>在 java.util.concurrent.Executors 类中提供了大量创建连接池的静态方法，常见就有四种</p><ol><li>创建使用固定线程数的线程池</li></ol><div class="language-java line-numbers-mode" data-highlighter="shiki" data-ext="java" data-title="java" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">    public</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;"> static</span><span style="--shiki-light:#C18401;--shiki-dark:#E5C07B;"> ExecutorService</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;"> newFixedThreadPool</span><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;">(</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">int</span><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;"> nThreads) {</span></span>\n<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">        return</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;"> new</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;"> ThreadPoolExecutor</span><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;">(nThreads</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">,</span><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;"> nThreads</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">,</span></span>\n<span class="line"><span style="--shiki-light:#986801;--shiki-dark:#D19A66;">                                      0L</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">,</span><span style="--shiki-light:#E45649;--shiki-dark:#E5C07B;"> TimeUnit</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#E45649;--shiki-dark:#E5C07B;">MILLISECONDS</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">,</span></span>\n<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">                                      new</span><span style="--shiki-light:#C18401;--shiki-dark:#E5C07B;"> LinkedBlockingQueue</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">&lt;</span><span style="--shiki-light:#C18401;--shiki-dark:#E5C07B;">Runnable</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">&gt;</span><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;">())</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">;</span></span>\n<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;">    }</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ul><li>核心线程数与最大线程数一样，没有救急线程</li><li>阻塞队列是 LinkedBlockingQueue ，最大容量为 Integer.MAX_VALUE</li></ul>',19),Ki=(0,n.Fv)('<p>测试code:https://gitee.com/cuckoocry/heima-demo/blob/master/juc-basic/src/main/java/com/itheima/threadpool/FixedThreadPoolCase.java</p><ol start="2"><li>单线程化的线程池，它只会用唯一的工作线程来执行任 务，保证所有任务按照指定顺序 (FIFO) 执行</li></ol><div class="language-java line-numbers-mode" data-highlighter="shiki" data-ext="java" data-title="java" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">    public</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;"> static</span><span style="--shiki-light:#C18401;--shiki-dark:#E5C07B;"> ExecutorService</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;"> newSingleThreadExecutor</span><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;">() {</span></span>\n<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">        return</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;"> new</span><span style="--shiki-light:#C18401;--shiki-dark:#E5C07B;"> FinalizableDelegatedExecutorService</span></span>\n<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;">            (</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">new</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;"> ThreadPoolExecutor</span><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;">(</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;">1</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">,</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;"> 1</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">,</span></span>\n<span class="line"><span style="--shiki-light:#986801;--shiki-dark:#D19A66;">                                    0L</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">,</span><span style="--shiki-light:#E45649;--shiki-dark:#E5C07B;"> TimeUnit</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#E45649;--shiki-dark:#E5C07B;">MILLISECONDS</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">,</span></span>\n<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">                                    new</span><span style="--shiki-light:#C18401;--shiki-dark:#E5C07B;"> LinkedBlockingQueue</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">&lt;</span><span style="--shiki-light:#C18401;--shiki-dark:#E5C07B;">Runnable</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">&gt;</span><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;">()))</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">;</span></span>\n<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;">    }</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ul><li>核心线程数和最大线程数都是 1</li><li>阻塞队列是 LinkedBlockingQueue ，最大容量为 Integer.MAX_VALUE</li></ul>',4),Yi=(0,n.Fv)('<ol start="3"><li>可缓存线程池</li></ol><div class="language-java line-numbers-mode" data-highlighter="shiki" data-ext="java" data-title="java" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">    public</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;"> static</span><span style="--shiki-light:#C18401;--shiki-dark:#E5C07B;"> ExecutorService</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;"> newCachedThreadPool</span><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;">() {</span></span>\n<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">        return</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;"> new</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;"> ThreadPoolExecutor</span><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;">(</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;">0</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">,</span><span style="--shiki-light:#E45649;--shiki-dark:#E5C07B;"> Integer</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#E45649;--shiki-dark:#E5C07B;">MAX_VALUE</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">,</span></span>\n<span class="line"><span style="--shiki-light:#986801;--shiki-dark:#D19A66;">                                      60L</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">,</span><span style="--shiki-light:#E45649;--shiki-dark:#E5C07B;"> TimeUnit</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#E45649;--shiki-dark:#E5C07B;">SECONDS</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">,</span></span>\n<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">                                      new</span><span style="--shiki-light:#C18401;--shiki-dark:#E5C07B;"> SynchronousQueue</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">&lt;</span><span style="--shiki-light:#C18401;--shiki-dark:#E5C07B;">Runnable</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">&gt;</span><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;">())</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">;</span></span>\n<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;">    }</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ul><li>核心线程数为 0</li><li>最大线程数是 Integer.MAX_VALUE</li><li>阻塞队列为 SynchronousQueue: 不存储元素的阻塞队列，每个插入操作都必须等待一个移出操作。</li></ul>',3),Zi=(0,n.Fv)('<p>code:https://gitee.com/cuckoocry/heima-demo/blob/master/juc-basic/src/main/java/com/itheima/threadpool/CachedThreadPoolCase.java</p><ol start="4"><li>提供了“延迟”和“周期执行”功能的 ThreadPoolExecutor 。</li></ol><div class="language-java line-numbers-mode" data-highlighter="shiki" data-ext="java" data-title="java" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">    public</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;"> ScheduledThreadPoolExecutor</span><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;">(</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">int</span><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;"> corePoolSize</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">,</span></span>\n<span class="line"><span style="--shiki-light:#C18401;--shiki-dark:#E5C07B;">                                       ThreadFactory</span><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;"> threadFactory) {</span></span>\n<span class="line"><span style="--shiki-light:#E45649;--shiki-dark:#E5C07B;">        super</span><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;">(corePoolSize</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">,</span><span style="--shiki-light:#E45649;--shiki-dark:#E5C07B;"> Integer</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#E45649;--shiki-dark:#E5C07B;">MAX_VALUE</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">,</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;"> 0</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">,</span><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;"> NANOSECONDS</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">,</span></span>\n<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">              new</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;"> DelayedWorkQueue</span><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;">()</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">,</span><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;"> threadFactory)</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">;</span></span>\n<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;">    }</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="线程池的种类有哪些" tabindex="-1"><a class="header-anchor" href="#线程池的种类有哪些"><span>线程池的种类有哪些</span></a></h4><p>① newFixedThreadPool ：创建一个定长线程池，可控制线程最大并发数，超出的线程会在队列中等待</p><p>② newSingleThreadExecutor ：创建一个单线程化的线程池，它只会用唯一的工作线程来执行任 务，保证所有任务按照指定顺序 (FIFO) 执行</p><p>③ newCachedThreadPool ：创建一个可缓存线程池，如果线程池长度超过处理需要，可灵活回收空闲线程，若无可回收，则新建线程</p><p>④ newScheduledThreadPool ：可以执行延迟任务的线程池，支持定时及周期性任务执行</p><h3 id="_5、为什么不建议用-executors-创建线程池" tabindex="-1"><a class="header-anchor" href="#_5、为什么不建议用-executors-创建线程池"><span>5、为什么不建议用 Executors 创建线程池</span></a></h3><p>《阿里巴巴 Java 开发手册》中强制线程池不允许使用 Executors 去创建，而是通过 ThreadPoolExecutor 构造函数的方式，这样的处理方式让写的同学更加明确线程池的运行规则，规避资源耗尽的风险</p><p>Executors 返回线程池对象的弊端如下(后文会详细介绍到)：</p><ul><li><strong>FixedThreadPool 和 SingleThreadExecutor</strong>：使用的是无界的<code>LinkedBlockingQueue</code>，任务队列最大长度为 <code>Integer.MAX_VALU</code>E,可能堆积大量的请求，从而导致 OOM。</li><li><strong>CachedThreadPool</strong>：使用的是同步队列<code>SynchronousQueue</code>, 允许创建的线程数量为 <code>Integer.MAX_VALUE</code> ，如果任务数量过多且执行速度较慢，可能会创建大量的线程，从而导致 OOM。</li><li><strong>ScheduledThreadPool 和 SingleThreadScheduledExecutor</strong> : 使用的无界的延迟阻塞队列<code>DelayedWorkQueue</code>，任务队列最大长度为<code>Integer.MAX_VALUE</code>,可能堆积大量的请求，从而导致 OOM。</li></ul><h2 id="使用场景" tabindex="-1"><a class="header-anchor" href="#使用场景"><span>使用场景</span></a></h2><h3 id="_1、countdownlatch-、-future-你们项目哪里用到了多线程" tabindex="-1"><a class="header-anchor" href="#_1、countdownlatch-、-future-你们项目哪里用到了多线程"><span>1、CountDownLatch 、 Future（你们项目哪里用到了多线程）</span></a></h3><h4 id="_1、countdownlatch" tabindex="-1"><a class="header-anchor" href="#_1、countdownlatch"><span>1、CountDownLatch</span></a></h4><p>CountDownLatch（闭锁/倒计时锁）用来进行线程同步协作，等待所有线程完成倒计时（一个或者多个线程，等待其他多个线程完成某件事情之后才能执行）</p><ul><li>其中构造参数用来初始化等待计数值</li><li>await() 用来等待计数归零</li><li>countDown() 用来让计数减一</li></ul><figure><img src="'+C+'" alt="img_20.png" tabindex="0" loading="lazy"><figcaption>img_20.png</figcaption></figure><p>代码：https://gitee.com/cuckoocry/heima-demo/blob/master/juc-basic/src/main/java/com/itheima/application/CountDownLatchDemo.java</p><h4 id="_2、案例一-es数据批量导入" tabindex="-1"><a class="header-anchor" href="#_2、案例一-es数据批量导入"><span>2、案例一（es数据批量导入）</span></a></h4><p>在我们项目上线之前，我们需要把数据库中的数据一次性的同步到es索引库中， 但是当时的数据好像是1000万左右，一次性读取数据肯定不行（oom异常），当时我就想到可以使用线程池的方式导入，利用CountDownLatch来控制，就能避免一次性加载过多，防止内存溢出 整体流程就是通过CountDownLatch+线程池配合去执行</p><p>详细实现流程：</p><figure><img src="'+j+'" alt="img_21.png" tabindex="0" loading="lazy"><figcaption>img_21.png</figcaption></figure><p>代码：https://gitee.com/cuckoocry/heima-demo/blob/master/thread-cdl-demo/src/main/java/com/itheima/cdl/service/impl/ApArticleServiceImpl.java</p><h4 id="_3、案例二-数据汇总" tabindex="-1"><a class="header-anchor" href="#_3、案例二-数据汇总"><span>3、案例二（数据汇总）</span></a></h4><p>在一个电商网站中，用户下单之后，需要查询数据，数据包含了三部分：订单信息、包含的商品、物流信息；这三块信息都在不同的微服务中进行实现的，我们如何完成这个业务呢？</p><figure><img src="'+f+'" alt="img_22.png" tabindex="0" loading="lazy"><figcaption>img_22.png</figcaption></figure><p>代码： https://gitee.com/cuckoocry/heima-demo/blob/master/thread-cdl-demo/src/main/java/com/itheima/cdl/controller/OrderDetailController.java</p><p>总结</p><ul><li>在实际开发的过程中，难免需要调用多个接口来汇总数据，如果所有接口（或部分接口）的没有依赖关系，就可以使用【线程池+future】来提升性能报表汇总</li><li>报表汇总</li></ul><h4 id="_4、案例三-异步调用" tabindex="-1"><a class="header-anchor" href="#_4、案例三-异步调用"><span>4、案例三（异步调用）</span></a></h4><p>在进行搜索的时候，需要保存用户的搜索记录，而搜索记录不能影响用户的正常搜索，我们通常会开启一个线程去执行历史记录的保存，在新开启的线程在执行的过程中，可以利用线程提交任务</p><figure><img src="'+D+'" alt="img_23.png" tabindex="0" loading="lazy"><figcaption>img_23.png</figcaption></figure><div class="language-java line-numbers-mode" data-highlighter="shiki" data-ext="java" data-title="java" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">    @</span><span style="--shiki-light:#A626A4;--shiki-dark:#E5C07B;">Bean</span><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;">(</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">&quot;taskExecutor&quot;</span><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;">)</span></span>\n<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">    public</span><span style="--shiki-light:#C18401;--shiki-dark:#E5C07B;"> ExecutorService</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;"> executorService</span><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;">(){</span></span>\n<span class="line"><span style="--shiki-light:#C18401;--shiki-dark:#E5C07B;">        AtomicInteger</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;"> c </span><span style="--shiki-light:#383A42;--shiki-dark:#56B6C2;">=</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;"> new</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;"> AtomicInteger</span><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;">(</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;">1</span><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;">)</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">;</span></span>\n<span class="line"><span style="--shiki-light:#C18401;--shiki-dark:#E5C07B;">        LinkedBlockingQueue</span><span style="--shiki-light:#E45649;--shiki-dark:#ABB2BF;">&lt;</span><span style="--shiki-light:#C18401;--shiki-dark:#E5C07B;">Runnable</span><span style="--shiki-light:#E45649;--shiki-dark:#ABB2BF;">&gt;</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;"> queue </span><span style="--shiki-light:#383A42;--shiki-dark:#56B6C2;">=</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;"> new</span><span style="--shiki-light:#C18401;--shiki-dark:#E5C07B;"> LinkedBlockingQueue</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">&lt;</span><span style="--shiki-light:#C18401;--shiki-dark:#E5C07B;">Runnable</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">&gt;</span><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;">(QUEUE_CAPACITY)</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">;</span></span>\n<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">        return</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;"> new</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;"> ThreadPoolExecutor</span><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;">(</span></span>\n<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;">                CORE_POOL_SIZE</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">,</span></span>\n<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;">                MAX_POOL_SIZE</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">,</span></span>\n<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;">                KEEP_ALIVE_SECONDS</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">,</span></span>\n<span class="line"><span style="--shiki-light:#E45649;--shiki-dark:#E5C07B;">                TimeUnit</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#E45649;--shiki-dark:#E5C07B;">MILLISECONDS</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">,</span></span>\n<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;">                queue</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">,</span></span>\n<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;">                r </span><span style="--shiki-light:#C18401;--shiki-dark:#C678DD;">-&gt;</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;"> new</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;"> Thread</span><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;">(r</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">,</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> &quot;itheima-pool-&quot;</span><span style="--shiki-light:#383A42;--shiki-dark:#56B6C2;"> +</span><span style="--shiki-light:#E45649;--shiki-dark:#E5C07B;"> c</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">getAndIncrement</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">()</span><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;">)</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">,</span></span>\n<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">                new</span><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;"> ThreadPoolExecutor</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">DiscardPolicy</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">()</span></span>\n<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;">        )</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">;</span></span>\n<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;">    }</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><div class="language-java line-numbers-mode" data-highlighter="shiki" data-ext="java" data-title="java" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">    @</span><span style="--shiki-light:#A626A4;--shiki-dark:#E5C07B;">Async</span><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;">(</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">&quot;taskExecutor&quot;</span><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;">)</span></span>\n<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">    @</span><span style="--shiki-light:#A626A4;--shiki-dark:#E5C07B;">Override</span></span>\n<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">    public</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;"> void</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;"> insert</span><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;">(</span><span style="--shiki-light:#C18401;--shiki-dark:#E5C07B;">Integer</span><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;"> userId</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">,</span><span style="--shiki-light:#C18401;--shiki-dark:#E5C07B;"> String</span><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;"> keyword) {</span></span>\n<span class="line"></span>\n<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-dark:#7F848E;--shiki-light-font-style:italic;--shiki-dark-font-style:italic;">        //保存用户记录  mongodb或mysql</span></span>\n<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-dark:#7F848E;--shiki-light-font-style:italic;--shiki-dark-font-style:italic;">        //执行业务</span></span>\n<span class="line"></span>\n<span class="line"><span style="--shiki-light:#E45649;--shiki-dark:#E5C07B;">        log</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">info</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">&quot;用户搜索记录保存成功,用户id:{},关键字:{}&quot;</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">,userId,keyword);</span></span>\n<span class="line"></span>\n<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;">    }</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="总结-11" tabindex="-1"><a class="header-anchor" href="#总结-11"><span>总结</span></a></h4><ul><li>批量导入: 使用了线程池+CountDownLatch批量把数据库中的数据导入到了ES(任意)中，避免OOM</li><li>数据汇总: 调用多个接口来汇总数据，如果所有接口(或部分接口)的没有依赖关系，就可以使用线程池+future来提升性能</li><li>异步线程(线程池):为了避免下一级方法影响上一级方法(性能考虑)，可使用异步线程调用下一个方法(不需要下一级方法返回值)，可以提升方法响应时间</li></ul><h3 id="_2、如何控制某个方法允许并发访问线程的数量" tabindex="-1"><a class="header-anchor" href="#_2、如何控制某个方法允许并发访问线程的数量"><span>2、如何控制某个方法允许并发访问线程的数量？</span></a></h3><div class="hint-container tip"><p class="hint-container-title">提示</p><p>难易程度：☆☆☆ 出现频率：☆☆</p></div><p>Semaphore <code>[ˈsɛməˌfɔr]</code> 信号量，是JUC包下的一个工具类，底层是AQS，我们可以通过其限制执行的线程数量，达到限流的效果。</p><ol><li>创建Semaphore对象，可以给一个容量</li><li><code>cquire()</code>,请求一个信号量，这时候的信号量个数 -1</li><li><code>release()</code>,释放一个信号量，此时信号量个数+1</li></ol><p>当一个线程执行时先通过其方法进行获取许可操作，获取到许可的线程继续执行业务逻辑，当线程执行完成后进行释放许可操作，未获取达到许可的线程进行等待或者直接结束。</p><div class="language-java line-numbers-mode" data-highlighter="shiki" data-ext="java" data-title="java" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">public</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;"> static</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;"> void</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;"> main</span><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;">(</span><span style="--shiki-light:#C18401;--shiki-dark:#E5C07B;">String</span><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;">[] args) {</span></span>\n<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-dark:#7F848E;--shiki-light-font-style:italic;--shiki-dark-font-style:italic;">        // 1. 创建 semaphore 对象</span></span>\n<span class="line"><span style="--shiki-light:#C18401;--shiki-dark:#E5C07B;">        Semaphore</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;"> semaphore </span><span style="--shiki-light:#383A42;--shiki-dark:#56B6C2;">=</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;"> new</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;"> Semaphore</span><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;">(</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;">3</span><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;">)</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">;</span></span>\n<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-dark:#7F848E;--shiki-light-font-style:italic;--shiki-dark-font-style:italic;">        // 2. 10个线程同时运行</span></span>\n<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">        for</span><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;"> (</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">int</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;"> i </span><span style="--shiki-light:#383A42;--shiki-dark:#56B6C2;">=</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;"> 0</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">;</span><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;"> i </span><span style="--shiki-light:#383A42;--shiki-dark:#56B6C2;">&lt;</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;"> 10</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">;</span><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;"> i</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">++</span><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;">) {</span></span>\n<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">            new</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;"> Thread</span><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;">(() </span><span style="--shiki-light:#C18401;--shiki-dark:#C678DD;">-&gt;</span><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;"> {</span></span>\n<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">                try</span><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;"> {</span></span>\n<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-dark:#7F848E;--shiki-light-font-style:italic;--shiki-dark-font-style:italic;">                    // 3. 获取许可，计数-1</span></span>\n<span class="line"><span style="--shiki-light:#E45649;--shiki-dark:#E5C07B;">                    semaphore</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">acquire</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">();</span></span>\n<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;">                } </span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">catch</span><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;"> (</span><span style="--shiki-light:#C18401;--shiki-dark:#E5C07B;">InterruptedException</span><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;--shiki-light-font-style:inherit;--shiki-dark-font-style:italic;"> e</span><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;">) {</span></span>\n<span class="line"><span style="--shiki-light:#E45649;--shiki-dark:#E5C07B;">                    e</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">printStackTrace</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">();</span></span>\n<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;">                }</span></span>\n<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">                try</span><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;"> {</span></span>\n<span class="line"><span style="--shiki-light:#E45649;--shiki-dark:#E5C07B;">                    System</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#E45649;--shiki-dark:#E5C07B;">out</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">println</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">&quot;running...&quot;</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">);</span></span>\n<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">                    try</span><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;"> {</span></span>\n<span class="line"><span style="--shiki-light:#E45649;--shiki-dark:#E5C07B;">                        Thread</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">sleep</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;">1000</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">);</span></span>\n<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;">                    } </span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">catch</span><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;"> (</span><span style="--shiki-light:#C18401;--shiki-dark:#E5C07B;">InterruptedException</span><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;--shiki-light-font-style:inherit;--shiki-dark-font-style:italic;"> e</span><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;">) {</span></span>\n<span class="line"><span style="--shiki-light:#E45649;--shiki-dark:#E5C07B;">                        e</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">printStackTrace</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">();</span></span>\n<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;">                    }</span></span>\n<span class="line"><span style="--shiki-light:#E45649;--shiki-dark:#E5C07B;">                    System</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#E45649;--shiki-dark:#E5C07B;">out</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">println</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">&quot;end...&quot;</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">);</span></span>\n<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;">                } </span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">finally</span><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;"> {</span></span>\n<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-dark:#7F848E;--shiki-light-font-style:italic;--shiki-dark-font-style:italic;">                    // 4. 释放许可  计数+1</span></span>\n<span class="line"><span style="--shiki-light:#E45649;--shiki-dark:#E5C07B;">                    semaphore</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">release</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">();</span></span>\n<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;">                }</span></span>\n<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;">            })</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">start</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">();</span></span>\n<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;">        }</span></span>\n<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;">    }</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="其他" tabindex="-1"><a class="header-anchor" href="#其他"><span>其他</span></a></h2><h3 id="_1、谈谈你对threadlocal的理解" tabindex="-1"><a class="header-anchor" href="#_1、谈谈你对threadlocal的理解"><span>1、谈谈你对ThreadLocal的理解</span></a></h3><div class="hint-container tip"><p class="hint-container-title">提示</p><p>难易程度：☆☆☆ 出现频率：☆☆☆☆</p></div><h4 id="概述" tabindex="-1"><a class="header-anchor" href="#概述"><span>概述</span></a></h4><p>ThreadLocal是多线程中对于解决线程安全的一个操作类，它会为每个线程都分配一个独立的线程副本从而解决了变量并发访问冲突的问题。ThreadLocal 同时实现了线程内的资源共享。</p><p>案例：使用JDBC操作数据库时，会将每一个线程的Connection放入各自的ThreadLocal中，从而保证每个线程都在各自的 Connection 上进行数据库的操 作，避免A线程关闭了B线程的连接。</p><figure><img src="'+x+'" alt="img_24.png" tabindex="0" loading="lazy"><figcaption>img_24.png</figcaption></figure><h4 id="threadlocal基本使用" tabindex="-1"><a class="header-anchor" href="#threadlocal基本使用"><span>ThreadLocal基本使用</span></a></h4><p>三个主要方法：</p><ul><li>set(value) 设置值</li><li>get() 获取值</li><li>remove() 清除值</li></ul><h4 id="threadlocal的实现原理-源码解析" tabindex="-1"><a class="header-anchor" href="#threadlocal的实现原理-源码解析"><span>ThreadLocal的实现原理 <code>&amp;</code> 源码解析</span></a></h4><p><code>ThreadLocal</code>本质来说就是一个线程内部存储类，从而让多个线程只操作自己内部的值，从而实现线程数据隔离。</p><figure><img src="'+_+'" alt="img_25.png" tabindex="0" loading="lazy"><figcaption>img_25.png</figcaption></figure><p>在ThreadLocal中有一个内部类叫做ThreadLocalMap，类似于HashMap。 ThreadLocalMap中有一个属性table数组，这个是真正存储数据的位置。</p><p>set 方法：</p><figure><img src="'+U+'" alt="img_26.png" tabindex="0" loading="lazy"><figcaption>img_26.png</figcaption></figure><p>get方法/remove方法</p><h4 id="threadlocal-内存泄露问题" tabindex="-1"><a class="header-anchor" href="#threadlocal-内存泄露问题"><span>ThreadLocal-内存泄露问题</span></a></h4><p>Java对象中的四种引用类型：强引用、软引用、弱引用、虚引用。</p><p>每一个Thread维护一个ThreadLocalMap，在ThreadLocalMap中的Entry对象继承了WeakReference。其中key为使用弱引用的ThreadLocal实例，value为线程变量的副本。</p><figure><img src="'+w+'" alt="img_27.png" tabindex="0" loading="lazy"><figcaption>img_27.png</figcaption></figure><p>在使用ThreadLocal的时候，强烈建议：<code>务必手动remove</code>。</p>',65),$i={},is=(0,a(66262).A)($i,[["render",function(i,s){const a=(0,n.g2)("font"),l=(0,n.g2)("RouteLink");return(0,n.uX)(),(0,n.CE)("div",null,[L,(0,n.Lk)("ul",null,[T,(0,n.Lk)("li",null,[(0,n.bF)(a,{color:"BrulyWood"},{default:(0,n.k6)((()=>[(0,n.eW)(" wait 方法执行后会释放对象锁")])),_:1}),(0,n.eW)("，允许其它线程获得该对象锁（我放弃 cpu ，但你们还可以用）")]),(0,n.Lk)("li",null,[(0,n.eW)("而 sleep 如果在 synchronized 代码块中执行， "),(0,n.bF)(a,{color:"BrulyWood"},{default:(0,n.k6)((()=>[(0,n.eW)(" 并不会释放对象锁")])),_:1}),(0,n.eW)("（我放弃 cpu ，你们也用不了）")])]),S,(0,n.Lk)("div",J,[M,(0,n.Lk)("p",null,[q,z,(0,n.bF)(l,{to:"/study-notes/%E5%A4%A7%E5%8E%82%E9%9D%A2%E8%AF%95%E7%AC%AC%E4%B8%89%E5%AD%A3/04_%E5%8F%AF%E9%87%8D%E5%85%A5%E9%94%81%E7%90%86%E8%AE%BA/"},{default:(0,n.k6)((()=>[(0,n.eW)("我的学习笔记")])),_:1})])]),W,(0,n.Lk)("ul",null,[I,(0,n.Lk)("li",null,[(0,n.eW)("在DK 1.6 引入了两种新型锁机制: "),(0,n.bF)(a,{color:"BrulyWood"},{default:(0,n.k6)((()=>[(0,n.eW)(" 偏向锁和轻量级锁 ")])),_:1}),(0,n.eW)(" 。它们的引入是为了解决在没有多线程竞争或基本没有竞争的场景下因使用传统锁机制带来的性能开销问题。")])]),R,(0,n.Lk)("div",P,[Q,(0,n.Lk)("p",null,[(0,n.bF)(l,{to:"/study-notes/%E5%A4%A7%E5%8E%82%E9%9D%A2%E8%AF%95%E7%AC%AC%E4%BA%8C%E5%AD%A3/1_%E8%B0%88%E8%B0%88Volatile/1_Volatile%E5%92%8CJMM%E5%86%85%E5%AD%98%E6%A8%A1%E5%9E%8B%E7%9A%84%E5%8F%AF%E8%A7%81%E6%80%A7/"},{default:(0,n.k6)((()=>[(0,n.eW)("我的学习笔记 - JMM(Java 内存模型)")])),_:1}),O,V])]),N,(0,n.Lk)("div",G,[X,(0,n.Lk)("p",null,[(0,n.bF)(l,{to:"/study-notes/%E5%A4%A7%E5%8E%82%E9%9D%A2%E8%AF%95%E7%AC%AC%E4%BA%8C%E5%AD%A3/2_%E8%B0%88%E8%B0%88CAS/5_CAS%E5%BA%95%E5%B1%82%E5%8E%9F%E7%90%86/"},{default:(0,n.k6)((()=>[(0,n.eW)("我的学习笔记 - CAS")])),_:1}),H,K])]),Y,(0,n.Lk)("div",Z,[$,(0,n.Lk)("p",null,[(0,n.bF)(l,{to:"/study-notes/%E5%A4%A7%E5%8E%82%E9%9D%A2%E8%AF%95%E7%AC%AC%E4%BA%8C%E5%AD%A3/1_%E8%B0%88%E8%B0%88Volatile/1_Volatile%E5%92%8CJMM%E5%86%85%E5%AD%98%E6%A8%A1%E5%9E%8B%E7%9A%84%E5%8F%AF%E8%A7%81%E6%80%A7/"},{default:(0,n.k6)((()=>[(0,n.eW)("我的学习笔记 - volatile")])),_:1}),ii,si])]),ai,(0,n.Lk)("ol",null,[(0,n.Lk)("li",null,[(0,n.bF)(a,{color:"BrulyWood"},{default:(0,n.k6)((()=>[(0,n.eW)("保证线程间的可见性")])),_:1})]),(0,n.Lk)("li",null,[(0,n.bF)(a,{color:"BrulyWood"},{default:(0,n.k6)((()=>[(0,n.eW)("禁止进行指令重排序")])),_:1})])]),ni,(0,n.Lk)("p",null,[(0,n.eW)("解决方案一：在程序运行的时候加入 vm 参数 "),li,(0,n.eW)("表示禁用即时编译器，不推荐，得不偿失（其他程序还要使用）。 解决方案二：在修饰 "),(0,n.bF)(a,{color:"BrulyWood"},{default:(0,n.k6)((()=>[ei])),_:1}),(0,n.eW)(" 变量的时候加上 "),(0,n.bF)(a,{color:"BrulyWood"},{default:(0,n.k6)((()=>[ti])),_:1}),(0,n.eW)(", 当前告诉 "),hi,(0,n.eW)(" ，不要对 "),ri,(0,n.eW)(" 修饰的变量做优化。")]),pi,(0,n.bF)(a,{color:"BrulyWood"},{default:(0,n.k6)((()=>[(0,n.eW)("请谈谈你对 volatile 的理解")])),_:1}),(0,n.eW)(),(0,n.Lk)("p",null,[(0,n.eW)("① "),(0,n.bF)(a,{color:"BrulyWood"},{default:(0,n.k6)((()=>[(0,n.eW)("保证线程间的可见性")])),_:1}),(0,n.eW)(" 用 "),ki,(0,n.eW)(" 修饰共享变量，能够防止编译器等优化发生，让一个线程对共享变量的修改对另一个线程可见。 ② "),(0,n.bF)(a,{color:"BrulyWood"},{default:(0,n.k6)((()=>[(0,n.eW)("禁止进行指令重排序")])),_:1}),(0,n.eW)(" 指令重排：用"),di,(0,n.eW)("volatile` 修饰共享变量会在读、写共享变量时加入不同的屏障，阻止其他读写操作越过屏障，从而达到阻止重排序的效果")]),(0,n.Lk)("h3",oi,[(0,n.Lk)("a",gi,[(0,n.Lk)("span",null,[(0,n.eW)("5、"),(0,n.bF)(a,{color:"BrulyWood"},{default:(0,n.k6)((()=>[(0,n.eW)("什么是 AQS ？")])),_:1})])])]),(0,n.Lk)("div",ci,[Ai,(0,n.Lk)("p",null,[(0,n.bF)(l,{to:"/study-notes/%E5%A4%A7%E5%8E%82%E9%9D%A2%E8%AF%95%E7%AC%AC%E4%B8%89%E5%AD%A3/09_AbstractQueuedSynchronizer%E4%B9%8B_AQS/"},{default:(0,n.k6)((()=>[(0,n.eW)("我的学习笔记 - AQS")])),_:1}),yi,Bi])]),(0,n.Lk)("p",null,[(0,n.eW)("全称是 "),(0,n.bF)(a,{color:"BrulyWood"},{default:(0,n.k6)((()=>[(0,n.eW)("A")])),_:1}),(0,n.eW)("bstract"),(0,n.bF)(a,{color:"BrulyWood"},{default:(0,n.k6)((()=>[(0,n.eW)("Q")])),_:1}),(0,n.eW)("ueued"),(0,n.bF)(a,{color:"BrulyWood"},{default:(0,n.k6)((()=>[(0,n.eW)("S")])),_:1}),(0,n.eW)("ynchronizer ，即抽象队列同步器。它是构建锁或者其他同步组件的"),(0,n.bF)(a,{color:"BrulyWood"},{default:(0,n.k6)((()=>[(0,n.eW)("基础框架")])),_:1}),(0,n.eW)("。")]),mi,(0,n.Lk)("div",ui,[vi,(0,n.Lk)("p",null,[(0,n.bF)(l,{to:"/study-notes/%E5%A4%A7%E5%8E%82%E9%9D%A2%E8%AF%95%E7%AC%AC%E4%BA%8C%E5%AD%A3/6_Java%E7%9A%84%E9%94%81/Java%E9%94%81%E4%B9%8B%E5%8F%AF%E9%87%8D%E5%85%A5%E9%94%81%E5%92%8C%E9%80%92%E5%BD%92%E9%94%81/"},{default:(0,n.k6)((()=>[(0,n.eW)("我的学习笔记 - AQS")])),_:1}),bi,Fi])]),Ei,(0,n.Lk)("p",null,[(0,n.eW)("ReentrantLock 主要利用 "),(0,n.bF)(a,{color:"BrulyWood"},{default:(0,n.k6)((()=>[(0,n.eW)("CAS+AQS")])),_:1}),(0,n.eW)(" 队列来实现。它支持公平锁和非公平锁，两者的实现类似 构造方法接受一个可选的公平参数（默认非公平锁），当设置为 true 时，表示公平锁，否则为非公平锁。 公平锁的效率往往没有非公平锁的效率高，在许多线程访问的情况下，公平锁表现出较低的吞吐量。")]),Ci,ji,fi,(0,n.Lk)("ul",null,[Di,(0,n.Lk)("li",null,[(0,n.eW)("ReentrantLock 主要利用 "),(0,n.bF)(a,{color:"BrulyWood"},{default:(0,n.k6)((()=>[(0,n.eW)("CAS+AQS")])),_:1}),(0,n.eW)(" 队列来实现")]),xi]),_i,(0,n.Lk)("div",Ui,[wi,(0,n.Lk)("p",null,[(0,n.bF)(l,{to:"/study-notes/%E5%A4%A7%E5%8E%82%E9%9D%A2%E8%AF%95%E7%AC%AC%E4%BA%8C%E5%AD%A3/9_Synchronized%E5%92%8CLock%E7%9A%84%E5%8C%BA%E5%88%AB%E4%B8%8E%E5%A5%BD%E5%A4%84/"},{default:(0,n.k6)((()=>[(0,n.eW)("我的学习笔记 - synchronized 和 Lock 有什么区别")])),_:1}),Li,(0,n.eW)(" ☀️ "),Ti])]),Si,(0,n.Lk)("div",Ji,[Mi,(0,n.Lk)("p",null,[(0,n.bF)(l,{to:"/study-notes/%E5%A4%A7%E5%8E%82%E9%9D%A2%E8%AF%95%E7%AC%AC%E4%BA%8C%E5%AD%A3/1_%E8%B0%88%E8%B0%88Volatile/1_Volatile%E5%92%8CJMM%E5%86%85%E5%AD%98%E6%A8%A1%E5%9E%8B%E7%9A%84%E5%8F%AF%E8%A7%81%E6%80%A7/"},{default:(0,n.k6)((()=>[(0,n.eW)("我的学习笔记 - JMM")])),_:1}),qi,zi])]),Wi,Ii,(0,n.Lk)("div",Ri,[Pi,Qi,(0,n.Lk)("p",null,[(0,n.bF)(l,{to:"/study-notes/%E5%A4%A7%E5%8E%82%E9%9D%A2%E8%AF%95%E7%AC%AC%E4%BA%8C%E5%AD%A3/10_%E7%BA%BF%E7%A8%8B%E6%B1%A0/"},{default:(0,n.k6)((()=>[(0,n.eW)("我的学习笔记 - JMM")])),_:1}),Oi,Vi])]),Ni,(0,n.Lk)("ol",null,[(0,n.Lk)("li",null,[(0,n.bF)(a,{color:"BrulyWood"},{default:(0,n.k6)((()=>[(0,n.eW)(" ArrayBlockingQueue ：基于数组结构的有界阻塞队列， FIFO 。")])),_:1})]),(0,n.Lk)("li",null,[(0,n.bF)(a,{color:"BrulyWood"},{default:(0,n.k6)((()=>[(0,n.eW)(" LinkedBlockingQueue ：基于链表结构的有界阻塞队列， FIFO 。")])),_:1})]),Gi,Xi]),Hi,(0,n.bF)(a,{color:"BrulyWood"},{default:(0,n.k6)((()=>[(0,n.eW)("适用于任务量已知，相对耗时的任务")])),_:1}),Ki,(0,n.bF)(a,{color:"BrulyWood"},{default:(0,n.k6)((()=>[(0,n.eW)("适用于按照顺序执行的任务")])),_:1}),Yi,(0,n.bF)(a,{color:"BrulyWood"},{default:(0,n.k6)((()=>[(0,n.eW)("适合任务数比较密集，但每个任务执行时间较短的情况")])),_:1}),Zi])}]]),ss=JSON.parse('{"path":"/study-notes/heima-java-bagu/concurrent-programming/","title":"多线程相关面试题(手打)","lang":"zh-CN","frontmatter":{"title":"多线程相关面试题(手打)","category":"面试","date":"2023-10-15T00:00:00.000Z","description":"提示 多线程相关面试题视频 代码资源 代码地址【经过整理组合】 总览 img.pngimg.png 线程的基础知识 1、线程和进程的区别？ 二者对比 进程是正在运行程序的实例，进程中包含了线程，每个线程执行不同的任务 不同的进程使用不同的内存空间，在当前进程下的所有线程可以共享内存空间 线程更轻量，线程上下文切换成本一般上要比进程上下文切换低 ( 上下...","head":[["meta",{"property":"og:url","content":"https://mister-hope.github.io/vuepress-theme-home/study-notes/heima-java-bagu/concurrent-programming/"}],["meta",{"property":"og:site_name","content":"撄宁的博客"}],["meta",{"property":"og:title","content":"多线程相关面试题(手打)"}],["meta",{"property":"og:description","content":"提示 多线程相关面试题视频 代码资源 代码地址【经过整理组合】 总览 img.pngimg.png 线程的基础知识 1、线程和进程的区别？ 二者对比 进程是正在运行程序的实例，进程中包含了线程，每个线程执行不同的任务 不同的进程使用不同的内存空间，在当前进程下的所有线程可以共享内存空间 线程更轻量，线程上下文切换成本一般上要比进程上下文切换低 ( 上下..."}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:locale","content":"zh-CN"}],["meta",{"property":"og:updated_time","content":"2024-07-27T14:43:11.000Z"}],["meta",{"property":"article:author","content":"樱宁"}],["meta",{"property":"article:published_time","content":"2023-10-15T00:00:00.000Z"}],["meta",{"property":"article:modified_time","content":"2024-07-27T14:43:11.000Z"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"多线程相关面试题(手打)\\",\\"image\\":[\\"\\"],\\"datePublished\\":\\"2023-10-15T00:00:00.000Z\\",\\"dateModified\\":\\"2024-07-27T14:43:11.000Z\\",\\"author\\":[{\\"@type\\":\\"Person\\",\\"name\\":\\"樱宁\\",\\"url\\":\\"https://mister-hope.com\\"}]}"]]},"headers":[{"level":2,"title":"总览","slug":"总览","link":"#总览","children":[]},{"level":2,"title":"线程的基础知识","slug":"线程的基础知识","link":"#线程的基础知识","children":[{"level":3,"title":"1、线程和进程的区别？","slug":"_1、线程和进程的区别","link":"#_1、线程和进程的区别","children":[]},{"level":3,"title":"2、并行与并发有什么区别？","slug":"_2、并行与并发有什么区别","link":"#_2、并行与并发有什么区别","children":[]},{"level":3,"title":"3、创建线程的方式有哪些？","slug":"_3、创建线程的方式有哪些","link":"#_3、创建线程的方式有哪些","children":[]},{"level":3,"title":"4、线程包括哪些状态，状态之间是如何变化的","slug":"_4、线程包括哪些状态-状态之间是如何变化的","link":"#_4、线程包括哪些状态-状态之间是如何变化的","children":[]},{"level":3,"title":"5、新建 T1 、 T2 、 T3 三个线程，如何保证它们按顺序执行？","slug":"_5、新建-t1-、-t2-、-t3-三个线程-如何保证它们按顺序执行","link":"#_5、新建-t1-、-t2-、-t3-三个线程-如何保证它们按顺序执行","children":[]},{"level":3,"title":"6、notify() 和 notifyAll() 有什么区别？","slug":"_6、notify-和-notifyall-有什么区别","link":"#_6、notify-和-notifyall-有什么区别","children":[]},{"level":3,"title":"7、java 中 wait 和 sleep 方法的不同？","slug":"_7、java-中-wait-和-sleep-方法的不同","link":"#_7、java-中-wait-和-sleep-方法的不同","children":[]},{"level":3,"title":"8、如何停止一个正在运行的线程？","slug":"_8、如何停止一个正在运行的线程","link":"#_8、如何停止一个正在运行的线程","children":[]}]},{"level":2,"title":"线程中并发安全","slug":"线程中并发安全","link":"#线程中并发安全","children":[{"level":3,"title":"1、synchronized 关键字的底层原理","slug":"_1、synchronized-关键字的底层原理","link":"#_1、synchronized-关键字的底层原理","children":[]},{"level":3,"title":"2、谈谈JMM（Java内存模型）","slug":"_2、谈谈jmm-java内存模型","link":"#_2、谈谈jmm-java内存模型","children":[]},{"level":3,"title":"3、CAS 你知道吗？","slug":"_3、cas-你知道吗","link":"#_3、cas-你知道吗","children":[]},{"level":3,"title":"4、请谈谈你对 volatile 的理解","slug":"_4、请谈谈你对-volatile-的理解","link":"#_4、请谈谈你对-volatile-的理解","children":[]},{"level":3,"title":"5、什么是 AQS ？","slug":"_5、什么是-aqs","link":"#_5、什么是-aqs","children":[]},{"level":3,"title":"6、ReentrantLock 的实现原理","slug":"_6、reentrantlock-的实现原理","link":"#_6、reentrantlock-的实现原理","children":[]},{"level":3,"title":"7、synchronized 和 Lock 有什么区别?","slug":"_7、synchronized-和-lock-有什么区别","link":"#_7、synchronized-和-lock-有什么区别","children":[]},{"level":3,"title":"8、死锁产生的条件是什么？","slug":"_8、死锁产生的条件是什么","link":"#_8、死锁产生的条件是什么","children":[]},{"level":3,"title":"8、聊一下 ConcurrentHashMap","slug":"_8、聊一下-concurrenthashmap","link":"#_8、聊一下-concurrenthashmap","children":[]},{"level":3,"title":"9、导致并发程序出现问题的根本原因是什么？(Java 程序中怎么保证多线程的执行安全 )","slug":"_9、导致并发程序出现问题的根本原因是什么-java-程序中怎么保证多线程的执行安全","link":"#_9、导致并发程序出现问题的根本原因是什么-java-程序中怎么保证多线程的执行安全","children":[]}]},{"level":2,"title":"线程池","slug":"线程池","link":"#线程池","children":[{"level":3,"title":"1、说一下线程池的核心参数？线程池的执行原理知道吗？","slug":"_1、说一下线程池的核心参数-线程池的执行原理知道吗","link":"#_1、说一下线程池的核心参数-线程池的执行原理知道吗","children":[]},{"level":3,"title":"2、线程池中有哪些常见的阻塞队列","slug":"_2、线程池中有哪些常见的阻塞队列","link":"#_2、线程池中有哪些常见的阻塞队列","children":[]},{"level":3,"title":"3、如何确定核心线程数","slug":"_3、如何确定核心线程数","link":"#_3、如何确定核心线程数","children":[]},{"level":3,"title":"4、线程池的种类有哪些？","slug":"_4、线程池的种类有哪些","link":"#_4、线程池的种类有哪些","children":[]},{"level":3,"title":"5、为什么不建议用 Executors 创建线程池","slug":"_5、为什么不建议用-executors-创建线程池","link":"#_5、为什么不建议用-executors-创建线程池","children":[]}]},{"level":2,"title":"使用场景","slug":"使用场景","link":"#使用场景","children":[{"level":3,"title":"1、CountDownLatch 、 Future（你们项目哪里用到了多线程）","slug":"_1、countdownlatch-、-future-你们项目哪里用到了多线程","link":"#_1、countdownlatch-、-future-你们项目哪里用到了多线程","children":[]},{"level":3,"title":"2、如何控制某个方法允许并发访问线程的数量？","slug":"_2、如何控制某个方法允许并发访问线程的数量","link":"#_2、如何控制某个方法允许并发访问线程的数量","children":[]}]},{"level":2,"title":"其他","slug":"其他","link":"#其他","children":[{"level":3,"title":"1、谈谈你对ThreadLocal的理解","slug":"_1、谈谈你对threadlocal的理解","link":"#_1、谈谈你对threadlocal的理解","children":[]}]}],"git":{"createdTime":1722091391000,"updatedTime":1722091391000,"contributors":[{"name":"jiang","email":"948742327@qq.com","commits":1}]},"readingTime":{"minutes":43.18,"words":12953},"filePathRelative":"study-notes/heima-java-bagu/concurrent-programming/README.md","localizedDate":"2023年10月15日","excerpt":"<div class=\\"hint-container tip\\">\\n<p class=\\"hint-container-title\\">提示</p>\\n<p><a href=\\"https://www.bilibili.com/video/BV1yT411H7YK?p=86&amp;spm_id_from=pageDriver&amp;vd_source=7138dfc78c49f602f8d3ed8cfbf0513d\\" target=\\"_blank\\" rel=\\"noopener noreferrer\\">多线程相关面试题视频</a></p>\\n<p><a href=\\"https://pan.baidu.com/disk/main?from=homeFlow&amp;login_type=weixin&amp;_at_=1697339186893#/index?category=all&amp;path=%2F%E9%BB%91%E9%A9%AC%E9%9D%A2%E8%AF%952023%2F08-%E5%B9%B6%E5%8F%91%E7%BC%96%E7%A8%8B%E7%AF%87%2F%E4%BB%A3%E7%A0%81\\" target=\\"_blank\\" rel=\\"noopener noreferrer\\">代码资源</a></p>\\n<p><a href=\\"https://gitee.com/cuckoocry/heima-demo\\" target=\\"_blank\\" rel=\\"noopener noreferrer\\">代码地址【经过整理组合】</a></p>\\n</div>","autoDesc":true}')}}]);