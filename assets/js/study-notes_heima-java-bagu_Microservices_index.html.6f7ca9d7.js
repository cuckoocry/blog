"use strict";(self.webpackChunkblogs2=self.webpackChunkblogs2||[]).push([[3999],{66262:(e,l)=>{l.A=(e,l)=>{const i=e.__vccOpts||e;for(const[e,n]of l)i[e]=n;return i}},22873:(e,l,i)=>{i.r(l),i.d(l,{comp:()=>o,data:()=>p});var n=i(20641);const a=[(0,n.Fv)('<h3 id="spring-cloud-5大组件有哪些" tabindex="-1"><a class="header-anchor" href="#spring-cloud-5大组件有哪些"><span>Spring Cloud 5大组件有哪些？</span></a></h3><p>早期我们一般认为的Spring Cloud五大组件是</p><ul><li>Eureka : 注册中心</li><li>Ribbon : 负载均衡</li><li>Feign : 远程调用</li><li>Hystrix : 服务熔断</li><li>Zuul/Gateway : 网关</li></ul><p>随着SpringCloudAlibba在国内兴起 , 我们项目中使用了一些阿里巴巴的组件</p><ul><li>注册中心/配置中心 Nacos</li><li>负载均衡 Ribbon</li><li>服务调用 Feign</li><li>服务保护 sentinel</li><li>服务网关 Gateway</li></ul><h3 id="服务注册和发现是什么意思-spring-cloud-如何实现服务注册发现" tabindex="-1"><a class="header-anchor" href="#服务注册和发现是什么意思-spring-cloud-如何实现服务注册发现"><span>服务注册和发现是什么意思？Spring Cloud 如何实现服务注册发现？</span></a></h3><p>主要三块大功能，分别是服务注册 、服务发现、服务状态监控</p><p>我们当时项目采用的eureka作为注册中心，这个也是spring cloud体系中的一个核心组件</p><ul><li><p><strong>服务注册</strong>：服务提供者需要把自己的信息注册到eureka，由eureka来保存这些信息，比如服务名称、ip、端口等等</p></li><li><p><strong>服务发现</strong>：消费者向eureka拉取服务列表信息，如果服务提供者有集群，则消费者会利用负载均衡算法，选择一个发起调用</p></li><li><p><strong>服务监控</strong>：服务提供者会每隔30秒向eureka发送心跳，报告健康状态，如果eureka服务90秒没接收到心跳，从eureka中剔除</p></li></ul><h3 id="之前也用过nacos、你能说下nacos与eureka的区别" tabindex="-1"><a class="header-anchor" href="#之前也用过nacos、你能说下nacos与eureka的区别"><span>之前也用过nacos、你能说下nacos与eureka的区别？</span></a></h3><p>当时xx项目就是采用的nacos作为注册中心，选择nacos还要一个重要原因就是它支持配置中心，不过nacos作为注册中心，也比eureka要方便好用一些，主要相同不同点在于几点：</p><ul><li><p>共同点 Nacos与eureka都支持服务注册和服务拉取，都支持服务提供者心跳方式做健康检测</p></li><li><p>Nacos与Eureka的区别</p><p>①Nacos支持服务端主动检测提供者状态：临时实例采用心跳模式，非临时实例采用主动检测模式 ②临时实例心跳不正常会被剔除，非临时实例则不会被剔除 ③Nacos支持服务列表变更的消息推送模式，服务列表更新更及时 ④Nacos集群默认采用AP方式，当集群中存在非临时实例时，采用CP模式；Eureka采用AP方式</p></li></ul><h3 id="你们项目负载均衡如何实现的" tabindex="-1"><a class="header-anchor" href="#你们项目负载均衡如何实现的"><span>你们项目负载均衡如何实现的 ?</span></a></h3><p>在服务调用过程中的负载均衡一般使用SpringCloud的Ribbon 组件实现 , Feign的底层已经自动集成了Ribbon , 使用起来非常简单</p><p>当发起远程调用时，ribbon先从注册中心拉取服务地址列表，然后按照一定的路由策略选择一个发起远程调用，一般的调用策略是轮询</p><h3 id="ribbon负载均衡策略有哪些" tabindex="-1"><a class="header-anchor" href="#ribbon负载均衡策略有哪些"><span>Ribbon负载均衡策略有哪些 ?</span></a></h3><p>有很多种</p><ul><li>RoundRobinRule：简单轮询服务列表来选择服务器</li><li>WeightedResponseTimeRule：按照权重来选择服务器，响应时间越长，权重越小</li><li>RandomRule：随机选择一个可用的服务器</li><li>ZoneAvoidanceRule：区域敏感策略，以区域可用的服务器为基础进行服务器的选择。使用Zone对服务器进行分类，这个Zone可以理解为一个机房、一个机架等。而后再对Zone内的多个服务做轮询(默认)</li></ul><h3 id="如果想自定义负载均衡策略如何实现" tabindex="-1"><a class="header-anchor" href="#如果想自定义负载均衡策略如何实现"><span>如果想自定义负载均衡策略如何实现 ?</span></a></h3><p>提供了两种方式：</p><ol><li><p>创建类实现IRule接口，可以指定负载均衡策略，这个是全局的，对所有的远程调用都起作用</p></li><li><p>在客户端的配置文件中，可以配置某一个服务调用的负载均衡策略，只是对配置的这个服务生效远程调用</p></li></ol><h3 id="什么是服务雪崩-怎么解决这个问题" tabindex="-1"><a class="header-anchor" href="#什么是服务雪崩-怎么解决这个问题"><span>什么是服务雪崩，怎么解决这个问题？</span></a></h3><p>服务雪崩是指一个服务失败，导致整条链路的服务都失败的情形，</p><p>一般我们在项目解决的话就是两种方案，第一个是服务降级，第二个是服务熔断，如果流量太大的话，可以考虑限流</p><ul><li><p>服务降级：服务自我保护的一种方式，或者保护下游服务的一种方式，用于确保服务不会受请求突增影响变得不可用，确保服务不会崩溃，一般在实际开发中与feign接口整合，编写降级逻辑</p></li><li><p>服务熔断：默认关闭，需要手动打开，如果检测到 10 秒内请求的失败率超过 50%，就触发熔断机制。之后每隔 5 秒重新尝试请求微服务，如果微服务不能响应，继续走熔断机制。如果微服务可达，则关闭熔断机制，恢复正常请求</p></li></ul><h3 id="你们的微服务是怎么监控的" tabindex="-1"><a class="header-anchor" href="#你们的微服务是怎么监控的"><span>你们的微服务是怎么监控的？</span></a></h3><p>我们项目中采用的<code>skywalking</code>进行监控的</p><ul><li><p>1，<code>skywalking</code>主要可以监控接口、服务、物理实例的一些状态。特别是在压测的时候可以看到众多服务中哪些服务和接口比较慢，我们可以针对性的分析和优化。</p></li><li><p>2，我们还在<code>skywalking</code>设置了告警规则，特别是在项目上线以后，如果报错，我们分别设置了可以给相关负责人发短信和发邮件，第一时间知道项目的bug情况，第一时间修复</p></li></ul><h3 id="你们项目中有没有做过限流-怎么做的" tabindex="-1"><a class="header-anchor" href="#你们项目中有没有做过限流-怎么做的"><span>你们项目中有没有做过限流 ? 怎么做的 ?</span></a></h3><p>我当时做的xx项目，采用就是微服务的架构，因为xx因为，应该会有突发流量，最大QPS可以达到2000，但是服务支撑不住，我们项目都通过压测最多可以支撑1200QPS。因为我们平时的QPS也就不到100，为了解决这些突发流量，所以采用了限流。</p><ul><li>【版本1】</li></ul><blockquote><p>我们当时采用的nginx限流操作，nginx使用的<strong>漏桶算法</strong>来实现过滤，让请求以<strong>固定的速率</strong>处理请求，可以应对突发流量，我们控制的速率是按照ip进行限流，限制的流量是每秒20个请求</p></blockquote><ul><li>【版本2】</li></ul><blockquote><p>我们当时采用的是spring cloud gateway中支持局部过滤器<strong>RequestRateLimiter</strong>来做限流，使用的是<strong>令牌桶</strong>算法，可以根据ip或路径进行限流，可以设置每秒填充平均速率，和令牌桶总容量</p></blockquote><h3 id="限流常见的算法有哪些呢" tabindex="-1"><a class="header-anchor" href="#限流常见的算法有哪些呢"><span>限流常见的算法有哪些呢？</span></a></h3><p>比较常见的限流算法有漏桶算法和令牌桶算法</p><ul><li>漏桶算法是把<strong>请求</strong>存入到桶中，以固定速率从桶中流出，可以让我们的服务做到绝对的平均，起到很好的限流效果</li><li>令牌桶算法在桶中存储的是<strong>令牌</strong>，按照一定的速率生成令牌，每个请求都要先申请令牌，申请到令牌以后才能正常请求，也可以起到很好的限流作用</li></ul><p>它们的区别是，漏桶和令牌桶都可以处理突发流量，其中漏桶可以做到绝对的平滑，令牌桶有可能会产生突发大量请求的情况，一般nginx限流采用的漏桶，spring cloud gateway中可以支持令牌桶算法</p><h3 id="什么是cap理论" tabindex="-1"><a class="header-anchor" href="#什么是cap理论"><span>什么是CAP理论？</span></a></h3><p>CAP主要是在分布式项目下的一个理论。包含了三项，一致性、可用性、分区容错性</p><ul><li>一致性(Consistency)是指更新操作成功并返回客户端完成后，所有节点在同一时间的数据完全一致(强一致性)，不能存在中间状态。</li><li>可用性(Availability) 是指系统提供的服务必须一直处于可用的状态，对于用户的每一个操作请求总是能够在有限的时间内返回结果。</li><li>分区容错性(Partition tolerance) 是指分布式系统在遇到任何网络分区故障时，仍然需要能够保证对外提供满足一致性和可用性的服务，除非是整个网络环境都发生了故障。</li></ul><h3 id="为什么分布式系统中无法同时保证一致性和可用性" tabindex="-1"><a class="header-anchor" href="#为什么分布式系统中无法同时保证一致性和可用性"><span>为什么分布式系统中无法同时保证一致性和可用性？</span></a></h3><p>首先一个前提，对于分布式系统而言，分区容错性是一个最基本的要求，因此基本上我们在设计分布式系统的时候只能从一致性（C）和可用性（A）之间进行取舍。</p><ul><li><p>如果保证了一致性（C）：对于节点N1和N2，当往N1里写数据时，N2上的操作必须被暂停，只有当N1同步数据到N2时才能对N2进行读写请求，在N2被暂停操作期间客户端提交的请求会收到失败或超时。显然，这与可用性是相悖的。</p></li><li><p>如果保证了可用性（A）：那就不能暂停N2的读写操作，但同时N1在写数据的话，这就违背了一致性的要求。</p></li></ul><h3 id="什么是base理论" tabindex="-1"><a class="header-anchor" href="#什么是base理论"><span>什么是BASE理论？</span></a></h3><p>这个也是CAP分布式系统设计理论</p><p>BASE是CAP理论中AP方案的延伸，核心思想是即使无法做到强一致性（StrongConsistency，CAP的一致性就是强一致性），但应用可以采用适合的方式达到最终一致性（Eventual Consitency）。它的思想包含三方面：</p><ul><li>1、Basically Available（基本可用）：基本可用是指分布式系统在出现不可预知的故障的时候，允许损失部分可用性，但不等于系统不可用。</li><li>2、Soft state（软状态）：即是指允许系统中的数据存在中间状态，并认为该中间状态的存在不会影响系统的整体可用性，即允许系统在不同节点的数据副本之间进行数据同步的过程存在延时。</li><li>3、Eventually consistent（最终一致性）：强调系统中所有的数据副本，在经过一段时间的同步后，最终能够达到一个一致的状态。其本质是需要系统保证最终数据能够达到一致，而不需要实时保证系统数据的强一致性。</li></ul><h3 id="你们采用哪种分布式事务解决方案" tabindex="-1"><a class="header-anchor" href="#你们采用哪种分布式事务解决方案"><span>你们采用哪种分布式事务解决方案？</span></a></h3><blockquote><p>我们当时是xx项目，主要使用到的seata的at模式解决的分布式事务</p><p>seata的AT模型分为两个阶段：</p><p>1、阶段一RM的工作：① 注册分支事务 ② 记录undo-log（数据快照）③ 执行业务sql并提交 ④报告事务状态</p><p>2、阶段二提交时RM的工作：删除undo-log即可</p><p>3、阶段二回滚时RM的工作：根据undo-log恢复数据到更新前</p><p>at模式牺牲了一致性，保证了可用性，不过，它保证的是最终一致性</p></blockquote><h3 id="分布式服务的接口幂等性如何设计" tabindex="-1"><a class="header-anchor" href="#分布式服务的接口幂等性如何设计"><span>分布式服务的接口幂等性如何设计？</span></a></h3><ul><li>幂等: 多次调用方法或者接口不会改变业务状态，可以<strong>保证重复调用的结果和单次调用的结果一致</strong></li><li>如果是新增数据，可以使用数据库的唯一索引。（通过版本号机制）</li><li>如果是新增或修改数据 分布式锁，性能较低 使用token+redis来实现，性能较好</li></ul><p>采用的token+redis实现的流程是这样的:</p><ul><li>第一次请求，生成一个唯一token存入redis，key就是用户的id，value就是这个token，同时把这个token返回前端</li><li>第二次请求，业务处理，会携带之前的token，后台先到redis进行验证，如果存在token，可以执行业务，同时删除token；如果不存在，则直接返回，不处理业务，就保证了同一个token只处理一次业务，就保证了幂等性</li><li>后续请求没有token，所以操作失败。</li></ul><p>例如：打开订单为第一次，后续支付为第二次。</p><h2 id="xxl-job路由策略有哪些" tabindex="-1"><a class="header-anchor" href="#xxl-job路由策略有哪些"><span>xxl-job路由策略有哪些？</span></a></h2><p>xxl-job提供了很多的路由策略，我们平时用的较多就是：轮询、故障转移、分片广播…</p><blockquote><p>**面试官：**xxl-job任务执行失败怎么解决？</p><p><strong>候选人：</strong></p><p>有这么几个操作</p><p>第一：路由策略选择故障转移，优先使用健康的实例来执行任务</p><p>第二，如果还有失败的，我们在创建任务时，可以设置重试次数</p><p>第三，如果还有失败的，就可以查看日志或者配置邮件告警来通知相关负责人解决</p></blockquote><h3 id="如果有大数据量的任务同时都需要执行-怎么解决" tabindex="-1"><a class="header-anchor" href="#如果有大数据量的任务同时都需要执行-怎么解决"><span>如果有大数据量的任务同时都需要执行，怎么解决？</span></a></h3><p>我们会让部署多个实例，共同去执行这些批量的任务，其中任务的路由策略是分片广播</p><p>在任务执行的代码中可以获取分片总数和当前分片，按照取模的方式分摊到各个实例执行就可以了</p>',61)],t={},o=(0,i(66262).A)(t,[["render",function(e,l){return(0,n.uX)(),(0,n.CE)("div",null,a)}]]),p=JSON.parse('{"path":"/study-notes/heima-java-bagu/Microservices/","title":"微服务面试题-参考回答.md","lang":"zh-CN","frontmatter":{"title":"微服务面试题-参考回答.md","category":"面试","description":"Spring Cloud 5大组件有哪些？ 早期我们一般认为的Spring Cloud五大组件是 Eureka : 注册中心 Ribbon : 负载均衡 Feign : 远程调用 Hystrix : 服务熔断 Zuul/Gateway : 网关 随着SpringCloudAlibba在国内兴起 , 我们项目中使用了一些阿里巴巴的组件 注册中心/配置中心...","head":[["meta",{"property":"og:url","content":"https://mister-hope.github.io/study-notes/heima-java-bagu/Microservices/"}],["meta",{"property":"og:site_name","content":"撄宁的博客"}],["meta",{"property":"og:title","content":"微服务面试题-参考回答.md"}],["meta",{"property":"og:description","content":"Spring Cloud 5大组件有哪些？ 早期我们一般认为的Spring Cloud五大组件是 Eureka : 注册中心 Ribbon : 负载均衡 Feign : 远程调用 Hystrix : 服务熔断 Zuul/Gateway : 网关 随着SpringCloudAlibba在国内兴起 , 我们项目中使用了一些阿里巴巴的组件 注册中心/配置中心..."}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:locale","content":"zh-CN"}],["meta",{"property":"og:updated_time","content":"2024-08-05T13:53:38.000Z"}],["meta",{"property":"article:author","content":"樱宁"}],["meta",{"property":"article:modified_time","content":"2024-08-05T13:53:38.000Z"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"微服务面试题-参考回答.md\\",\\"image\\":[\\"\\"],\\"dateModified\\":\\"2024-08-05T13:53:38.000Z\\",\\"author\\":[{\\"@type\\":\\"Person\\",\\"name\\":\\"樱宁\\",\\"url\\":\\"https://mister-hope.com\\"}]}"]]},"headers":[{"level":3,"title":"Spring Cloud 5大组件有哪些？","slug":"spring-cloud-5大组件有哪些","link":"#spring-cloud-5大组件有哪些","children":[]},{"level":3,"title":"服务注册和发现是什么意思？Spring Cloud 如何实现服务注册发现？","slug":"服务注册和发现是什么意思-spring-cloud-如何实现服务注册发现","link":"#服务注册和发现是什么意思-spring-cloud-如何实现服务注册发现","children":[]},{"level":3,"title":"之前也用过nacos、你能说下nacos与eureka的区别？","slug":"之前也用过nacos、你能说下nacos与eureka的区别","link":"#之前也用过nacos、你能说下nacos与eureka的区别","children":[]},{"level":3,"title":"你们项目负载均衡如何实现的 ?","slug":"你们项目负载均衡如何实现的","link":"#你们项目负载均衡如何实现的","children":[]},{"level":3,"title":"Ribbon负载均衡策略有哪些 ?","slug":"ribbon负载均衡策略有哪些","link":"#ribbon负载均衡策略有哪些","children":[]},{"level":3,"title":"如果想自定义负载均衡策略如何实现 ?","slug":"如果想自定义负载均衡策略如何实现","link":"#如果想自定义负载均衡策略如何实现","children":[]},{"level":3,"title":"什么是服务雪崩，怎么解决这个问题？","slug":"什么是服务雪崩-怎么解决这个问题","link":"#什么是服务雪崩-怎么解决这个问题","children":[]},{"level":3,"title":"你们的微服务是怎么监控的？","slug":"你们的微服务是怎么监控的","link":"#你们的微服务是怎么监控的","children":[]},{"level":3,"title":"你们项目中有没有做过限流 ? 怎么做的 ?","slug":"你们项目中有没有做过限流-怎么做的","link":"#你们项目中有没有做过限流-怎么做的","children":[]},{"level":3,"title":"限流常见的算法有哪些呢？","slug":"限流常见的算法有哪些呢","link":"#限流常见的算法有哪些呢","children":[]},{"level":3,"title":"什么是CAP理论？","slug":"什么是cap理论","link":"#什么是cap理论","children":[]},{"level":3,"title":"为什么分布式系统中无法同时保证一致性和可用性？","slug":"为什么分布式系统中无法同时保证一致性和可用性","link":"#为什么分布式系统中无法同时保证一致性和可用性","children":[]},{"level":3,"title":"什么是BASE理论？","slug":"什么是base理论","link":"#什么是base理论","children":[]},{"level":3,"title":"你们采用哪种分布式事务解决方案？","slug":"你们采用哪种分布式事务解决方案","link":"#你们采用哪种分布式事务解决方案","children":[]},{"level":3,"title":"分布式服务的接口幂等性如何设计？","slug":"分布式服务的接口幂等性如何设计","link":"#分布式服务的接口幂等性如何设计","children":[]},{"level":2,"title":"xxl-job路由策略有哪些？","slug":"xxl-job路由策略有哪些","link":"#xxl-job路由策略有哪些","children":[{"level":3,"title":"如果有大数据量的任务同时都需要执行，怎么解决？","slug":"如果有大数据量的任务同时都需要执行-怎么解决","link":"#如果有大数据量的任务同时都需要执行-怎么解决","children":[]}]}],"git":{"createdTime":1722091391000,"updatedTime":1722866018000,"contributors":[{"name":"jiang","email":"948742327@qq.com","commits":3}]},"readingTime":{"minutes":10.65,"words":3196},"filePathRelative":"study-notes/heima-java-bagu/Microservices/README.md","localizedDate":"2024年7月27日","excerpt":"<h3>Spring Cloud 5大组件有哪些？</h3>\\n<p>早期我们一般认为的Spring Cloud五大组件是</p>\\n<ul>\\n<li>Eureka   : 注册中心</li>\\n<li>Ribbon  : 负载均衡</li>\\n<li>Feign     : 远程调用</li>\\n<li>Hystrix :  服务熔断</li>\\n<li>Zuul/Gateway  : 网关</li>\\n</ul>\\n<p>随着SpringCloudAlibba在国内兴起 , 我们项目中使用了一些阿里巴巴的组件</p>\\n<ul>\\n<li>注册中心/配置中心 Nacos</li>\\n<li>负载均衡 Ribbon</li>\\n<li>服务调用 Feign</li>\\n<li>服务保护 sentinel</li>\\n<li>服务网关 Gateway</li>\\n</ul>","autoDesc":true}')}}]);