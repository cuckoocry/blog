"use strict";(self.webpackChunkblogs2=self.webpackChunkblogs2||[]).push([[1061],{66262:(i,s)=>{s.A=(i,s)=>{const a=i.__vccOpts||i;for(const[i,n]of s)a[i]=n;return a}},66665:(i,s,a)=>{a.r(s),a.d(s,{comp:()=>ei,data:()=>ti});var n=a(20641);const e=a.p+"assets/img/img.b984f6d2.png",t=a.p+"assets/img/img_1.fbbd3872.png",r=a.p+"assets/img/img_2.bb024c74.png",l=a.p+"assets/img/img_3.cce853c0.png",p=a.p+"assets/img/img_4.e2589fe1.png",h=a.p+"assets/img/img_5.8403b4d2.png",g=a.p+"assets/img/img_6.4ffa08a3.png",k=a.p+"assets/img/img_7.0805f022.png",o=a.p+"assets/img/img_8.aac5f6db.png",d=a.p+"assets/img/img_9.b0bc932e.png",c=a.p+"assets/img/img_10.d86092c2.png",y=a.p+"assets/img/img_11.ef3bde20.png",m=a.p+"assets/img/img_12.cbfdbc3a.png",A=a.p+"assets/img/img_13.6c9d7490.png",j=a.p+"assets/img/img_14.d3971ed2.png",b=a.p+"assets/img/img_15.f8597c1f.png",u=a.p+"assets/img/img_16.6f550b30.png",C=a.p+"assets/img/img_17.3bda88c9.png",v=a.p+"assets/img/img_18.f77a7f80.png",f=a.p+"assets/img/img_19.973fa133.png",B=a.p+"assets/img/img_20.b17f077d.png",E=a.p+"assets/img/img_21.c48bc032.png",F=a.p+"assets/img/img_22.9a32578d.png",x=a.p+"assets/img/img_23.436066fd.png",_=a.p+"assets/img/img_24.583f533f.png",U=a.p+"assets/img/img_25.cedda321.png",D=a.p+"assets/img/img_26.bd26cacd.png",w=a.p+"assets/img/img_27.0f8d805a.png",L=a.p+"assets/img/img_28.6f96f21a.png",J=a.p+"assets/img/img_29.f14027a6.png",z=a.p+"assets/img/img_30.d237ad59.png",T=a.p+"assets/img/img_31.f25bdd3d.png",q=a.p+"assets/img/img_32.60b8f4a6.png",M=a.p+"assets/img/img_33.6de674d0.png",S=a.p+"assets/img/img_34.d3757f81.png",P=a.p+"assets/img/img_35.a1f0eaa1.png",H=a.p+"assets/img/img_36.bbc61268.png",Y=a.p+"assets/img/img_37.da272530.png",I=a.p+"assets/img/img_38.d57eefd2.png",O=a.p+"assets/img/img_39.5b7ed3df.png",R=a.p+"assets/img/img_40.eae9c563.png",N=a.p+"assets/img/img_41.d2a49549.png",V=a.p+"assets/img/img_42.144e76df.png",W=a.p+"assets/img/img_43.516119a7.png",K=a.p+"assets/img/img_44.96f7edd3.png",Z=a.p+"assets/img/img_45.441bdbb8.png",G=(0,n.Fv)('<div class="hint-container tip"><p class="hint-container-title">提示</p><p>视频来源： <a href="https://www.bilibili.com/video/BV1yT411H7YK?p=69&amp;vd_source=7138dfc78c49f602f8d3ed8cfbf0513d" target="_blank" rel="noopener noreferrer">集合篇</a></p></div><h2 id="java集合框架体系-介绍" tabindex="-1"><a class="header-anchor" href="#java集合框架体系-介绍"><span>Java集合框架体系 - 介绍</span></a></h2><figure><img src="'+e+'" alt="img.png" tabindex="0" loading="lazy"><figcaption>img.png</figcaption></figure><hr><ul><li>数组</li><li>ArrayList 底层实现</li></ul><hr><ul><li>链表</li><li>LinkedList 底层实现</li></ul><hr><ul><li>二叉树、红黑树</li><li>散列表</li><li>HashMap 底层原理</li></ul><hr><h2 id="一、数据结构" tabindex="-1"><a class="header-anchor" href="#一、数据结构"><span>一、数据结构</span></a></h2><h3 id="算法复杂度分析" tabindex="-1"><a class="header-anchor" href="#算法复杂度分析"><span>算法复杂度分析</span></a></h3><h4 id="为什么要进行复杂度分析" tabindex="-1"><a class="header-anchor" href="#为什么要进行复杂度分析"><span>为什么要进行复杂度分析？</span></a></h4><ul><li>指导你编写出性能更优的代码</li><li>评判别人写的代码的好坏</li></ul><h4 id="_1、时间复杂度分析" tabindex="-1"><a class="header-anchor" href="#_1、时间复杂度分析"><span>1、时间复杂度分析</span></a></h4><p>时间复杂度分析：来评估代码的执行耗时的</p><figure><img src="'+t+'" alt="img_1.png" tabindex="0" loading="lazy"><figcaption>img_1.png</figcaption></figure><h4 id="常见复杂度表示" tabindex="-1"><a class="header-anchor" href="#常见复杂度表示"><span>常见复杂度表示</span></a></h4>',18),X=(0,n.Lk)("strong",null,"常对幂指阶",-1),Q=(0,n.Fv)('<figure><img src="'+r+'" alt="img_2.png" tabindex="0" loading="lazy"><figcaption>img_2.png</figcaption></figure><h4 id="常见复杂度" tabindex="-1"><a class="header-anchor" href="#常见复杂度"><span>常见复杂度</span></a></h4><div class="language-java line-numbers-mode" data-highlighter="shiki" data-ext="java" data-title="java" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">public</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;"> int</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;"> test01</span><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;">(</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">int</span><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;"> n){</span></span>\n<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">    int</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;"> i</span><span style="--shiki-light:#383A42;--shiki-dark:#56B6C2;">=</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;">0</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">;</span></span>\n<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">    int</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;"> j </span><span style="--shiki-light:#383A42;--shiki-dark:#56B6C2;">=</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;"> 1</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">;</span></span>\n<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">    return</span><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;"> i</span><span style="--shiki-light:#383A42;--shiki-dark:#56B6C2;">+</span><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;">j</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">;</span></span>\n<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;">}</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><div class="language-java line-numbers-mode" data-highlighter="shiki" data-ext="java" data-title="java" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">public</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;"> void</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;"> test02</span><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;">(</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">int</span><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;"> n){</span></span>\n<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">    int</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;"> i</span><span style="--shiki-light:#383A42;--shiki-dark:#56B6C2;">=</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;">0</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">;</span></span>\n<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">    int</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;"> sum</span><span style="--shiki-light:#383A42;--shiki-dark:#56B6C2;">=</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;">0</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">;</span></span>\n<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">    for</span><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;">(</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">;</span><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;">i</span><span style="--shiki-light:#383A42;--shiki-dark:#56B6C2;">&lt;</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;">100</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">;</span><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;">i</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">++</span><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;">){</span></span>\n<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;">        sum </span><span style="--shiki-light:#383A42;--shiki-dark:#56B6C2;">=</span><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;"> sum</span><span style="--shiki-light:#383A42;--shiki-dark:#56B6C2;">+</span><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;">i</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">;</span></span>\n<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;">    }</span></span>\n<span class="line"><span style="--shiki-light:#E45649;--shiki-dark:#E5C07B;">    System</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#E45649;--shiki-dark:#E5C07B;">out</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">println</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(sum);</span></span>\n<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;">}</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>',4),$=(0,n.Fv)('<hr><div class="language-java line-numbers-mode" data-highlighter="shiki" data-ext="java" data-title="java" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">public</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;"> int</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;"> sum</span><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;">(</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">int</span><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;"> n) {</span></span>\n<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">    int</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;"> sum </span><span style="--shiki-light:#383A42;--shiki-dark:#56B6C2;">=</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;"> 0</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">;</span></span>\n<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">    for</span><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;"> ( </span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">int</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;"> i </span><span style="--shiki-light:#383A42;--shiki-dark:#56B6C2;">=</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;"> 1</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">;</span><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;"> i </span><span style="--shiki-light:#383A42;--shiki-dark:#56B6C2;">&lt;=</span><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;"> n</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">;</span><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;"> i</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">++</span><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;">) {</span></span>\n<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;">        sum </span><span style="--shiki-light:#383A42;--shiki-dark:#56B6C2;">=</span><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;"> sum </span><span style="--shiki-light:#383A42;--shiki-dark:#56B6C2;">+</span><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;"> i</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">;</span></span>\n<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;">    }</span></span>\n<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">    return</span><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;"> sum</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">;</span></span>\n<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;">}</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><figure><img src="'+l+'" alt="img_3.png" tabindex="0" loading="lazy"><figcaption>img_3.png</figcaption></figure><hr><figure><img src="'+p+'" alt="img_4.png" tabindex="0" loading="lazy"><figcaption>img_4.png</figcaption></figure><hr><figure><img src="'+h+'" alt="img_5.png" tabindex="0" loading="lazy"><figcaption>img_5.png</figcaption></figure><hr><figure><img src="'+g+'" alt="img_6.png" tabindex="0" loading="lazy"><figcaption>img_6.png</figcaption></figure><h4 id="_2、空间复杂度分析" tabindex="-1"><a class="header-anchor" href="#_2、空间复杂度分析"><span>2、空间复杂度分析</span></a></h4><figure><img src="'+k+'" alt="img_7.png" tabindex="0" loading="lazy"><figcaption>img_7.png</figcaption></figure><p>总结：</p><figure><img src="'+o+'" alt="img_8.png" tabindex="0" loading="lazy"><figcaption>img_8.png</figcaption></figure><h2 id="二、list相关面试题" tabindex="-1"><a class="header-anchor" href="#二、list相关面试题"><span>二、List相关面试题</span></a></h2><figure><img src="'+d+'" alt="img_9.png" tabindex="0" loading="lazy"><figcaption>img_9.png</figcaption></figure><h3 id="_1、数组" tabindex="-1"><a class="header-anchor" href="#_1、数组"><span>1、数组</span></a></h3>',16),ii=(0,n.Lk)("strong",null,"连续的内存空间",-1),si=(0,n.Lk)("strong",null,"相同数据类型",-1),ai=(0,n.Fv)('<figure><img src="'+c+'" alt="img_10.png" tabindex="0" loading="lazy"><figcaption>img_10.png</figcaption></figure><h4 id="数组如何获取其他元素的地址值" tabindex="-1"><a class="header-anchor" href="#数组如何获取其他元素的地址值"><span>数组如何获取其他元素的地址值？</span></a></h4><figure><img src="'+y+'" alt="img_11.png" tabindex="0" loading="lazy"><figcaption>img_11.png</figcaption></figure><h4 id="为什么数组索引从-0-开始呢-假如从-1-开始不行吗" tabindex="-1"><a class="header-anchor" href="#为什么数组索引从-0-开始呢-假如从-1-开始不行吗"><span>为什么数组索引从 0 开始呢？假如从 1 开始不行吗？</span></a></h4><figure><img src="'+m+'" alt="img_12.png" tabindex="0" loading="lazy"><figcaption>img_12.png</figcaption></figure><ul><li>在根据数组索引获取元素的时候，会用索引和寻址公式来计算内存所对应的元素数据，<strong>寻址公式是：数组的首地址 + 索引乘以存储数据的类型大小</strong></li><li>如果数组的索引从 1 开始，寻址公式中，就需要增加一次减法操作，对于 CPU 来说就多了一次指令，性能不高。</li></ul><h4 id="操作数组的时间复杂度-查找" tabindex="-1"><a class="header-anchor" href="#操作数组的时间复杂度-查找"><span>操作数组的时间复杂度（查找）</span></a></h4><p>随机查找：O(1) 不确定查找：O(n)、O(logn)【排序过后二分法】</p><h4 id="操作数组的时间复杂度-插入、删除" tabindex="-1"><a class="header-anchor" href="#操作数组的时间复杂度-插入、删除"><span>操作数组的时间复杂度（插入、删除）</span></a></h4><p>最好情况下是 O(1) 的，最坏情况下是 O(n) 的，平均情况下的时间复杂度是 O(n) 。</p><h4 id="总结" tabindex="-1"><a class="header-anchor" href="#总结"><span>总结：</span></a></h4><ol><li><p>数组（ Array ）是一种用连续的内存空间存储相同数据类型 数据的线性数据结构。</p></li><li><p>数组下标为什么从 0 开始 寻址公式是： baseAddress+ i * dataTypeSize ，计算下标的内存地址效率较高</p></li><li><p>查找的时间复杂度</p><ul><li>随机 ( 通过下标 ) 查询的时间复杂度是 O(1)</li><li>查找元素（未知下标）的时间复杂度是 O(n)</li><li>查找元素（未知下标但排序）通过二分查找的时间复杂度是 O(logn)</li></ul></li><li><p>插入和删除时间复杂度 插入和删除的时候，为了保证数组的内存连续性，需要挪动数组元素，平均时间复杂度为 O(n)</p></li></ol><h3 id="_2、arraylist-源码分析" tabindex="-1"><a class="header-anchor" href="#_2、arraylist-源码分析"><span>2、ArrayList 源码分析</span></a></h3><figure><img src="'+A+'" alt="img_13.png" tabindex="0" loading="lazy"><figcaption>img_13.png</figcaption></figure><h4 id="arraylist-源码分析-成员变量" tabindex="-1"><a class="header-anchor" href="#arraylist-源码分析-成员变量"><span>ArrayList 源码分析 - 成员变量</span></a></h4><div class="language-java line-numbers-mode" data-highlighter="shiki" data-ext="java" data-title="java" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#A0A1A7;--shiki-dark:#7F848E;--shiki-light-font-style:italic;--shiki-dark-font-style:italic;">/**</span></span>\n<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-dark:#7F848E;--shiki-light-font-style:italic;--shiki-dark-font-style:italic;">* 默认初始的容量 (CAPACITY)</span></span>\n<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-dark:#7F848E;--shiki-light-font-style:italic;--shiki-dark-font-style:italic;">*/</span></span>\n<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">private</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;"> static</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;"> final</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;"> int</span></span>\n<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;">DEFAULT_CAPACITY </span><span style="--shiki-light:#383A42;--shiki-dark:#56B6C2;">=</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;"> 10</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">;</span></span>\n<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-dark:#7F848E;--shiki-light-font-style:italic;--shiki-dark-font-style:italic;">/**</span></span>\n<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-dark:#7F848E;--shiki-light-font-style:italic;--shiki-dark-font-style:italic;">* 用于空实例的共享空数组实例</span></span>\n<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-dark:#7F848E;--shiki-light-font-style:italic;--shiki-dark-font-style:italic;">*/</span></span>\n<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">private</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;"> static</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;"> final</span><span style="--shiki-light:#C18401;--shiki-dark:#E5C07B;"> Object</span><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;">[]</span></span>\n<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;">EMPTY_ELEMENTDATA </span><span style="--shiki-light:#383A42;--shiki-dark:#56B6C2;">=</span><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;"> {}</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">;</span></span>\n<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-dark:#7F848E;--shiki-light-font-style:italic;--shiki-dark-font-style:italic;">/**</span></span>\n<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-dark:#7F848E;--shiki-light-font-style:italic;--shiki-dark-font-style:italic;">* 用于默认大小的空实例的共享空数组实例。</span></span>\n<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-dark:#7F848E;--shiki-light-font-style:italic;--shiki-dark-font-style:italic;">* 我们将其与 EMPTY_ELEMENTDATA 区分开来，以了解添加第一个元素时要膨胀多少</span></span>\n<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-dark:#7F848E;--shiki-light-font-style:italic;--shiki-dark-font-style:italic;">*/</span></span>\n<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">private</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;"> static</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;"> final</span><span style="--shiki-light:#C18401;--shiki-dark:#E5C07B;"> Object</span><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;">[]</span></span>\n<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;">DEFAULTCAPACITY_EMPTY_ELEMENTDATA </span><span style="--shiki-light:#383A42;--shiki-dark:#56B6C2;">=</span><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;"> {}</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">;</span></span>\n<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-dark:#7F848E;--shiki-light-font-style:italic;--shiki-dark-font-style:italic;">/**</span></span>\n<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-dark:#7F848E;--shiki-light-font-style:italic;--shiki-dark-font-style:italic;">* 存储 ArrayList 元素的数组缓冲区。 ArrayList 的容量就是这个数组缓冲区的长度。</span></span>\n<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-dark:#7F848E;--shiki-light-font-style:italic;--shiki-dark-font-style:italic;">* 当添加第一个元素时，任何具有 elementData == DEFAULTCAPACITY_EMPTY_ELEMENTDATA 的空 ArrayList</span></span>\n<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-dark:#7F848E;--shiki-light-font-style:italic;--shiki-dark-font-style:italic;">* 都将扩展为 DEFAULT_CAPACITY</span></span>\n<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-dark:#7F848E;--shiki-light-font-style:italic;--shiki-dark-font-style:italic;">* 当前对象不参与序列化</span></span>\n<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-dark:#7F848E;--shiki-light-font-style:italic;--shiki-dark-font-style:italic;">*/</span></span>\n<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">transient</span><span style="--shiki-light:#C18401;--shiki-dark:#E5C07B;"> Object</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">[] elementData</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">;</span></span>\n<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-dark:#7F848E;--shiki-light-font-style:italic;--shiki-dark-font-style:italic;">// non-private to simplify nested class access</span></span>\n<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-dark:#7F848E;--shiki-light-font-style:italic;--shiki-dark-font-style:italic;">/**</span></span>\n<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-dark:#7F848E;--shiki-light-font-style:italic;--shiki-dark-font-style:italic;">* ArrayList 的大小（它包含的元素数量）</span></span>\n<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-dark:#7F848E;--shiki-light-font-style:italic;--shiki-dark-font-style:italic;">* </span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;--shiki-light-font-style:italic;--shiki-dark-font-style:italic;">@serial</span></span>\n<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-dark:#7F848E;--shiki-light-font-style:italic;--shiki-dark-font-style:italic;">*/</span></span>\n<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">private</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;"> int</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;"> size</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">;</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="arraylist-源码分析-构造方法" tabindex="-1"><a class="header-anchor" href="#arraylist-源码分析-构造方法"><span>ArrayList 源码分析 - 构造方法</span></a></h4><blockquote><p>带初始化容量的的构造方法</p></blockquote><div class="language-java line-numbers-mode" data-highlighter="shiki" data-ext="java" data-title="java" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"></span>\n<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#56B6C2;">*</span><span style="--shiki-light:#C18401;--shiki-dark:#E5C07B;"> Constructs</span><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;"> an empty list with an initial capacity of ten</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">.</span></span>\n<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#56B6C2;">*/</span></span>\n<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">public</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;"> ArrayList</span><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;">() {</span></span>\n<span class="line"><span style="--shiki-light:#E45649;--shiki-dark:#E5C07B;">    this</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#E45649;--shiki-dark:#E5C07B;">elementData</span><span style="--shiki-light:#383A42;--shiki-dark:#56B6C2;"> =</span></span>\n<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;">    DEFAULTCAPACITY_EMPTY_ELEMENTDATA</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">;</span></span>\n<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;">}</span></span>\n<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">public</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;"> ArrayList</span><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;">(</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">int</span><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;"> initialCapacity) {</span></span>\n<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">    if</span><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;"> (initialCapacity </span><span style="--shiki-light:#383A42;--shiki-dark:#56B6C2;">&gt;</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;"> 0</span><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;">) {</span></span>\n<span class="line"><span style="--shiki-light:#E45649;--shiki-dark:#E5C07B;">        this</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#E45649;--shiki-dark:#E5C07B;">elementData</span><span style="--shiki-light:#383A42;--shiki-dark:#56B6C2;"> =</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;"> new</span><span style="--shiki-light:#C18401;--shiki-dark:#E5C07B;"> Object</span><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;">[initialCapacity]</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">;</span></span>\n<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;">    } </span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">else</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;"> if</span><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;"> (initialCapacity </span><span style="--shiki-light:#383A42;--shiki-dark:#56B6C2;">==</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;"> 0</span><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;">) {</span></span>\n<span class="line"><span style="--shiki-light:#E45649;--shiki-dark:#E5C07B;">            this</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#E45649;--shiki-dark:#E5C07B;">elementData</span><span style="--shiki-light:#383A42;--shiki-dark:#56B6C2;"> =</span></span>\n<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;">            EMPTY_ELEMENTDATA</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">;</span></span>\n<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;">        } </span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">else</span><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;"> {</span></span>\n<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">            throw</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;"> new</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;"> IllegalArgumentException</span><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;">(</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">&quot;Illegal Capacity: &quot;</span><span style="--shiki-light:#383A42;--shiki-dark:#56B6C2;"> +</span><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;"> initialCapacity)</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">;</span></span>\n<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;">    }</span></span>\n<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;">}</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><blockquote><p>无参构造方法，默认创建空集合</p></blockquote><div class="language-java line-numbers-mode" data-highlighter="shiki" data-ext="java" data-title="java" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#A0A1A7;--shiki-dark:#7F848E;--shiki-light-font-style:italic;--shiki-dark-font-style:italic;">/**</span></span>\n<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-dark:#7F848E;--shiki-light-font-style:italic;--shiki-dark-font-style:italic;">* Constructs an empty list with an initial capacity of ten.</span></span>\n<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-dark:#7F848E;--shiki-light-font-style:italic;--shiki-dark-font-style:italic;">*/</span></span>\n<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">public</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;"> ArrayList</span><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;">() {</span></span>\n<span class="line"><span style="--shiki-light:#E45649;--shiki-dark:#E5C07B;">    this</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#E45649;--shiki-dark:#E5C07B;">elementData</span><span style="--shiki-light:#383A42;--shiki-dark:#56B6C2;"> =</span><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;"> DEFAULTCAPACITY_EMPTY_ELEMENTDATA</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">;</span></span>\n<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;">}</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><blockquote><p>第三个构造方法,将 collection 对象转换成数组，然后将数组的地址的 赋给 elementData</p></blockquote><div class="language-java line-numbers-mode" data-highlighter="shiki" data-ext="java" data-title="java" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">public</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;"> ArrayList</span><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;">(</span><span style="--shiki-light:#C18401;--shiki-dark:#E5C07B;">Collection</span><span style="--shiki-light:#383A42;--shiki-dark:#56B6C2;">&lt;</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">?</span><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;"> extends E</span><span style="--shiki-light:#383A42;--shiki-dark:#56B6C2;">&gt;</span><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;"> c) {</span></span>\n<span class="line"><span style="--shiki-light:#C18401;--shiki-dark:#E5C07B;">    Object</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">[] a </span><span style="--shiki-light:#383A42;--shiki-dark:#56B6C2;">=</span><span style="--shiki-light:#E45649;--shiki-dark:#E5C07B;"> c</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">toArray</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">();</span></span>\n<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">    if</span><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;"> ((size </span><span style="--shiki-light:#383A42;--shiki-dark:#56B6C2;">=</span><span style="--shiki-light:#E45649;--shiki-dark:#E5C07B;"> a</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#E45649;--shiki-dark:#E5C07B;">length</span><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;">) </span><span style="--shiki-light:#383A42;--shiki-dark:#56B6C2;">!=</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;"> 0</span><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;">) {</span></span>\n<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">       if</span><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;"> (</span><span style="--shiki-light:#E45649;--shiki-dark:#E5C07B;">c</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">getClass</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">()</span><span style="--shiki-light:#383A42;--shiki-dark:#56B6C2;"> ==</span><span style="--shiki-light:#E45649;--shiki-dark:#E5C07B;"> ArrayList</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#E45649;--shiki-dark:#E5C07B;">class</span><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;">) {</span></span>\n<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;">           elementData </span><span style="--shiki-light:#383A42;--shiki-dark:#56B6C2;">=</span><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;"> a</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">;</span></span>\n<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;">       } </span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">else</span><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;"> {</span></span>\n<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;">           elementData </span><span style="--shiki-light:#383A42;--shiki-dark:#56B6C2;">=</span><span style="--shiki-light:#E45649;--shiki-dark:#E5C07B;"> Arrays</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">copyOf</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(a, size, </span><span style="--shiki-light:#C18401;--shiki-dark:#E5C07B;">Object</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">[].</span><span style="--shiki-light:#E45649;--shiki-dark:#E5C07B;">class</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">);</span></span>\n<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;">       }</span></span>\n<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;">    } </span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">else</span><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;"> {</span></span>\n<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-dark:#7F848E;--shiki-light-font-style:italic;--shiki-dark-font-style:italic;">      // replace with empty array.</span></span>\n<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;">      elementData </span><span style="--shiki-light:#383A42;--shiki-dark:#56B6C2;">=</span></span>\n<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;">      EMPTY_ELEMENTDATA</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">;</span></span>\n<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;">}</span></span>\n<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;">}</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>后续代码，自己走。</p><h4 id="arraylist-源码分析-添加和扩容操作-第-1-次添加数据" tabindex="-1"><a class="header-anchor" href="#arraylist-源码分析-添加和扩容操作-第-1-次添加数据"><span>ArrayList 源码分析 - 添加和扩容操作 ( 第 1 次添加数据 )</span></a></h4><figure><img src="'+j+'" alt="img_14.png" tabindex="0" loading="lazy"><figcaption>img_14.png</figcaption></figure><h4 id="arraylist-源码分析-添加和扩容操作-第-2-至-10-次添加数据" tabindex="-1"><a class="header-anchor" href="#arraylist-源码分析-添加和扩容操作-第-2-至-10-次添加数据"><span>ArrayList 源码分析 - 添加和扩容操作 ( 第 2 至 10 次添加数据 )</span></a></h4><figure><img src="'+b+'" alt="img_15.png" tabindex="0" loading="lazy"><figcaption>img_15.png</figcaption></figure><h4 id="arraylist-源码分析-添加和扩容操作-第-11-次添加数据" tabindex="-1"><a class="header-anchor" href="#arraylist-源码分析-添加和扩容操作-第-11-次添加数据"><span>ArrayList 源码分析 - 添加和扩容操作 ( 第 11 次添加数据 )</span></a></h4><figure><img src="'+u+'" alt="img_16.png" tabindex="0" loading="lazy"><figcaption>img_16.png</figcaption></figure><h3 id="_3、arraylist-底层实现原理是什么" tabindex="-1"><a class="header-anchor" href="#_3、arraylist-底层实现原理是什么"><span>3、ArrayList 底层实现原理是什么？</span></a></h3><ul><li><p>底层数据结构 ArrayList 底层是用动态数组实现的。</p></li><li><p>初始容量 ArrayList 初始容量为 0 ，当第一次添加数据的时候才会初始化容量为 10</p></li><li><p>扩容逻辑 ArrayList 在进行扩容的时候是原来容量的 1.5 倍，每次扩容都需要拷贝数</p></li><li><p>添加逻辑</p><ul><li>确保数组已使用长度（ size ）加 1 之后足够存下下一个数据。</li><li>计算数组的容量，如果当前数组已使用长度 +1 后的大于当前的数组长度，则调用 grow 方法扩容（原来的 1.5 倍）。</li><li>确保新增的数据有地方存储之后，则将新元素添加到位于 size 的位置上。</li><li>返回添加成功布尔值。</li></ul></li></ul><h3 id="_4、arraylist-list-new-arraylist-10-中的-list-扩容几次" tabindex="-1"><a class="header-anchor" href="#_4、arraylist-list-new-arraylist-10-中的-list-扩容几次"><span>4、<code>ArrayList list=new ArrayList(10)</code> 中的 list 扩容几次 ?</span></a></h3><div class="language-java line-numbers-mode" data-highlighter="shiki" data-ext="java" data-title="java" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"></span>\n<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;">initialCapacity)</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">;</span></span>\n<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;">}</span></span>\n<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;">}</span></span>\n<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-dark:#7F848E;--shiki-light-font-style:italic;--shiki-dark-font-style:italic;">/**</span></span>\n<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-dark:#7F848E;--shiki-light-font-style:italic;--shiki-dark-font-style:italic;">* 构造一个具有指定初始容量的空列表。</span></span>\n<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-dark:#7F848E;--shiki-light-font-style:italic;--shiki-dark-font-style:italic;">* 参数： initialCapacity - 列表的初始容量</span></span>\n<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-dark:#7F848E;--shiki-light-font-style:italic;--shiki-dark-font-style:italic;">* 抛出： IllegalArgumentException – 如果指定的初始容量为负</span></span>\n<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-dark:#7F848E;--shiki-light-font-style:italic;--shiki-dark-font-style:italic;">*/</span></span>\n<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">public</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;"> ArrayList</span><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;">(</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">int</span><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;"> initialCapacity) {</span></span>\n<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">    if</span><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;"> (initialCapacity </span><span style="--shiki-light:#383A42;--shiki-dark:#56B6C2;">&gt;</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;"> 0</span><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;">) {</span></span>\n<span class="line"><span style="--shiki-light:#E45649;--shiki-dark:#E5C07B;">        this</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#E45649;--shiki-dark:#E5C07B;">elementData</span><span style="--shiki-light:#383A42;--shiki-dark:#56B6C2;"> =</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;"> new</span><span style="--shiki-light:#C18401;--shiki-dark:#E5C07B;"> Object</span><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;">[initialCapacity]</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">;</span></span>\n<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;">    } </span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">else</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;"> if</span><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;"> (initialCapacity </span><span style="--shiki-light:#383A42;--shiki-dark:#56B6C2;">==</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;"> 0</span><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;">) {</span></span>\n<span class="line"><span style="--shiki-light:#E45649;--shiki-dark:#E5C07B;">        this</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#E45649;--shiki-dark:#E5C07B;">elementData</span><span style="--shiki-light:#383A42;--shiki-dark:#56B6C2;"> =</span><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;">EMPTY_ELEMENTDATA</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">;</span></span>\n<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;">    } </span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">else</span><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;"> {</span></span>\n<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">        throw</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;"> new</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;"> IllegalArgumentException</span><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;">(</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">&quot;Illegal Capacity: &quot;</span><span style="--shiki-light:#383A42;--shiki-dark:#56B6C2;"> +</span><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;"> initialCapacity)</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">;</span></span>\n<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;">    }</span></span>\n<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;">}</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>参考回答： 该语句只是声明和实例了一个 ArrayList ，指定了容量为 10 ，未扩容</p><h3 id="_4、如何实现数组和-list-之间的转换" tabindex="-1"><a class="header-anchor" href="#_4、如何实现数组和-list-之间的转换"><span>4、如何实现数组和 List 之间的转换 ？</span></a></h3><div class="language-java line-numbers-mode" data-highlighter="shiki" data-ext="java" data-title="java" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#A0A1A7;--shiki-dark:#7F848E;--shiki-light-font-style:italic;--shiki-dark-font-style:italic;">    // 数组转 List   修改了数组以后，List受影响</span></span>\n<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">    public</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;"> static</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;"> void</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;"> testArray2List</span><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;">(){</span></span>\n<span class="line"><span style="--shiki-light:#C18401;--shiki-dark:#E5C07B;">        String</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">[] strs </span><span style="--shiki-light:#383A42;--shiki-dark:#56B6C2;">=</span><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;"> {</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">&quot;aaa&quot;</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">,</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">&quot;bbb&quot;</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">,</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">&quot;ccc&quot;</span><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;">}</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">;</span></span>\n<span class="line"><span style="--shiki-light:#C18401;--shiki-dark:#E5C07B;">        List</span><span style="--shiki-light:#E45649;--shiki-dark:#ABB2BF;">&lt;</span><span style="--shiki-light:#C18401;--shiki-dark:#E5C07B;">String</span><span style="--shiki-light:#E45649;--shiki-dark:#ABB2BF;">&gt;</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;"> list </span><span style="--shiki-light:#383A42;--shiki-dark:#56B6C2;">=</span><span style="--shiki-light:#E45649;--shiki-dark:#E5C07B;"> Arrays</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">asList</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(strs);</span></span>\n<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">        for</span><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;"> (</span><span style="--shiki-light:#C18401;--shiki-dark:#E5C07B;">String</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;"> s </span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">:</span><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;"> list) {</span></span>\n<span class="line"><span style="--shiki-light:#E45649;--shiki-dark:#E5C07B;">            System</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#E45649;--shiki-dark:#E5C07B;">out</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">println</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(s);</span></span>\n<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;">        }</span></span>\n<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;">        </span></span>\n<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-dark:#7F848E;--shiki-light-font-style:italic;--shiki-dark-font-style:italic;">        // 改变数组</span></span>\n<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;">        strs[</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;">1</span><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;">] </span><span style="--shiki-light:#383A42;--shiki-dark:#56B6C2;">=</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> &quot;ddd&quot;</span></span>\n<span class="line"><span style="--shiki-light:#E45649;--shiki-dark:#E5C07B;">        System</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#E45649;--shiki-dark:#E5C07B;">out</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">println</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">&quot;=======&quot;</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">);</span></span>\n<span class="line"></span>\n<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">        for</span><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;"> (</span><span style="--shiki-light:#C18401;--shiki-dark:#E5C07B;">String</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;"> s </span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">:</span><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;"> list) {</span></span>\n<span class="line"><span style="--shiki-light:#E45649;--shiki-dark:#E5C07B;">            System</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#E45649;--shiki-dark:#E5C07B;">out</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">println</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(s);</span></span>\n<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;">        }</span></span>\n<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;">    }</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><div class="language-shell line-numbers-mode" data-highlighter="shiki" data-ext="shell" data-title="shell" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">C:\\myJava2\\Java\\jdk1.8.0_201\\bin\\java.exe &quot;-javaagent:C:\\Program Files\\JetBrains\\IntelliJ IDEA 2022.3.2\\lib\\idea_rt.jar=5065:C:\\Program Files\\JetBrains\\IntelliJ IDEA 2022.3.2\\bin&quot; -Dfile.encoding=UTF-8 -classpath C:\\myJava2\\Java\\jdk1.8.0_201\\jre\\lib\\charsets.jar;C:\\myJava2\\Java\\jdk1.8.0_201\\jre\\lib\\deploy.jar;C:\\myJava2\\Java\\jdk1.8.0_201\\jre\\lib\\ext\\access-bridge-64.jar;C:\\myJava2\\Java\\jdk1.8.0_201\\jre\\lib\\ext\\cldrdata.jar;C:\\myJava2\\Java\\jdk1.8.0_201\\jre\\lib\\ext\\dnsns.jar;C:\\myJava2\\Java\\jdk1.8.0_201\\jre\\lib\\ext\\jaccess.jar;C:\\myJava2\\Java\\jdk1.8.0_201\\jre\\lib\\ext\\jfxrt.jar;C:\\myJava2\\Java\\jdk1.8.0_201\\jre\\lib\\ext\\localedata.jar;C:\\myJava2\\Java\\jdk1.8.0_201\\jre\\lib\\ext\\nashorn.jar;C:\\myJava2\\Java\\jdk1.8.0_201\\jre\\lib\\ext\\sunec.jar;C:\\myJava2\\Java\\jdk1.8.0_201\\jre\\lib\\ext\\sunjce_provider.jar;C:\\myJava2\\Java\\jdk1.8.0_201\\jre\\lib\\ext\\sunmscapi.jar;C:\\myJava2\\Java\\jdk1.8.0_201\\jre\\lib\\ext\\sunpkcs11.jar;C:\\myJava2\\Java\\jdk1.8.0_201\\jre\\lib\\ext\\zipfs.jar;C:\\myJava2\\Java\\jdk1.8.0_201\\jre\\lib\\javaws.jar;C:\\myJava2\\Java\\jdk1.8.0_201\\jre\\lib\\jce.jar;C:\\myJava2\\Java\\jdk1.8.0_201\\jre\\lib\\jfr.jar;C:\\myJava2\\Java\\jdk1.8.0_201\\jre\\lib\\jfxswt.jar;C:\\myJava2\\Java\\jdk1.8.0_201\\jre\\lib\\jsse.jar;C:\\myJava2\\Java\\jdk1.8.0_201\\jre\\lib\\management-agent.jar;C:\\myJava2\\Java\\jdk1.8.0_201\\jre\\lib\\plugin.jar;C:\\myJava2\\Java\\jdk1.8.0_201\\jre\\lib\\resources.jar;C:\\myJava2\\Java\\jdk1.8.0_201\\jre\\lib\\rt.jar;C:\\IdeaProjectMyself\\RuoYi-Vue-Jiang\\ruoyi-admin\\target\\classes;C:\\Users\\jiang\\.m2\\repository\\org\\springframework\\boot\\spring-boot-devtools\\2.5.14\\spring-boot-devtools-2.5.14.jar;C:\\Users\\jiang\\.m2\\repository\\org\\springframework\\boot\\spring-boot\\2.5.14\\spring-boot-2.5.14.jar;C:\\Users\\jiang\\.m2\\repository\\org\\springframework\\spring-core\\5.3.20\\spring-core-5.3.20.jar;C:\\Users\\jiang\\.m2\\repository\\org\\springframework\\spring-jcl\\5.3.20\\spring-jcl-5.3.20.jar;C:\\Users\\jiang\\.m2\\repository\\org\\springframework\\spring-context\\5.3.20\\spring-context-5.3.20.jar;C:\\Users\\jiang\\.m2\\repository\\org\\springframework\\spring-beans\\5.3.20\\spring-beans-5.3.20.jar;C:\\Users\\jiang\\.m2\\repository\\org\\springframework\\spring-expression\\5.3.20\\spring-expression-5.3.20.jar;C:\\Users\\jiang\\.m2\\repository\\org\\springframework\\boot\\spring-boot-autoconfigure\\2.5.14\\spring-boot-autoconfigure-2.5.14.jar;C:\\Users\\jiang\\.m2\\repository\\com\\github\\xiaoymin\\knife4j-spring-boot-starter\\3.0.3\\knife4j-spring-boot-starter-3.0.3.jar;C:\\Users\\jiang\\.m2\\repository\\com\\github\\xiaoymin\\knife4j-spring-boot-autoconfigure\\3.0.3\\knife4j-spring-boot-autoconfigure-3.0.3.jar;C:\\Users\\jiang\\.m2\\repository\\com\\github\\xiaoymin\\knife4j-spring\\3.0.3\\knife4j-spring-3.0.3.jar;C:\\Users\\jiang\\.m2\\repository\\com\\github\\xiaoymin\\knife4j-annotations\\3.0.3\\knife4j-annotations-3.0.3.jar;C:\\Users\\jiang\\.m2\\repository\\io\\swagger\\swagger-annotations\\1.5.22\\swagger-annotations-1.5.22.jar;C:\\Users\\jiang\\.m2\\repository\\io\\swagger\\core\\v3\\swagger-annotations\\2.1.2\\swagger-annotations-2.1.2.jar;C:\\Users\\jiang\\.m2\\repository\\com\\github\\xiaoymin\\knife4j-core\\3.0.3\\knife4j-core-3.0.3.jar;C:\\Users\\jiang\\.m2\\repository\\org\\javassist\\javassist\\3.25.0-GA\\javassist-3.25.0-GA.jar;C:\\Users\\jiang\\.m2\\repository\\io\\springfox\\springfox-swagger2\\3.0.0\\springfox-swagger2-3.0.0.jar;C:\\Users\\jiang\\.m2\\repository\\io\\springfox\\springfox-spi\\3.0.0\\springfox-spi-3.0.0.jar;C:\\Users\\jiang\\.m2\\repository\\io\\springfox\\springfox-schema\\3.0.0\\springfox-schema-3.0.0.jar;C:\\Users\\jiang\\.m2\\repository\\io\\springfox\\springfox-swagger-common\\3.0.0\\springfox-swagger-common-3.0.0.jar;C:\\Users\\jiang\\.m2\\repository\\io\\springfox\\springfox-spring-web\\3.0.0\\springfox-spring-web-3.0.0.jar;C:\\Users\\jiang\\.m2\\repository\\io\\github\\classgraph\\classgraph\\4.8.83\\classgraph-4.8.83.jar;C:\\Users\\jiang\\.m2\\repository\\io\\springfox\\springfox-spring-webflux\\3.0.0\\springfox-spring-webflux-3.0.0.jar;C:\\Users\\jiang\\.m2\\repository\\org\\mapstruct\\mapstruct\\1.3.1.Final\\mapstruct-1.3.1.Final.jar;C:\\Users\\jiang\\.m2\\repository\\io\\springfox\\springfox-spring-webmvc\\3.0.0\\springfox-spring-webmvc-3.0.0.jar;C:\\Users\\jiang\\.m2\\repository\\io\\springfox\\springfox-core\\3.0.0\\springfox-core-3.0.0.jar;C:\\Users\\jiang\\.m2\\repository\\net\\bytebuddy\\byte-buddy\\1.10.22\\byte-buddy-1.10.22.jar;C:\\Users\\jiang\\.m2\\repository\\io\\springfox\\springfox-oas\\3.0.0\\springfox-oas-3.0.0.jar;C:\\Users\\jiang\\.m2\\repository\\io\\swagger\\core\\v3\\swagger-models\\2.1.2\\swagger-models-2.1.2.jar;C:\\Users\\jiang\\.m2\\repository\\io\\springfox\\springfox-bean-validators\\3.0.0\\springfox-bean-validators-3.0.0.jar;C:\\Users\\jiang\\.m2\\repository\\io\\swagger\\swagger-models\\1.5.22\\swagger-models-1.5.22.jar;C:\\Users\\jiang\\.m2\\repository\\io\\swagger\\swagger-core\\1.5.22\\swagger-core-1.5.22.jar;C:\\Users\\jiang\\.m2\\repository\\com\\fasterxml\\jackson\\dataformat\\jackson-dataformat-yaml\\2.12.6\\jackson-dataformat-yaml-2.12.6.jar;C:\\Users\\jiang\\.m2\\repository\\javax\\validation\\validation-api\\2.0.1.Final\\validation-api-2.0.1.Final.jar;C:\\Users\\jiang\\.m2\\repository\\io\\springfox\\springfox-boot-starter\\3.0.0\\springfox-boot-starter-3.0.0.jar;C:\\Users\\jiang\\.m2\\repository\\io\\springfox\\springfox-data-rest\\3.0.0\\springfox-data-rest-3.0.0.jar;C:\\Users\\jiang\\.m2\\repository\\com\\fasterxml\\classmate\\1.5.1\\classmate-1.5.1.jar;C:\\Users\\jiang\\.m2\\repository\\org\\springframework\\plugin\\spring-plugin-core\\2.0.0.RELEASE\\spring-plugin-core-2.0.0.RELEASE.jar;C:\\Users\\jiang\\.m2\\repository\\org\\springframework\\plugin\\spring-plugin-metadata\\2.0.0.RELEASE\\spring-plugin-metadata-2.0.0.RELEASE.jar;C:\\Users\\jiang\\.m2\\repository\\com\\github\\xiaoymin\\knife4j-spring-ui\\3.0.3\\knife4j-spring-ui-3.0.3.jar;C:\\Users\\jiang\\.m2\\repository\\mysql\\mysql-connector-java\\8.0.29\\mysql-connector-java-8.0.29.jar;C:\\IdeaProjectMyself\\RuoYi-Vue-Jiang\\ruoyi-framework\\target\\classes;C:\\Users\\jiang\\.m2\\repository\\org\\springframework\\boot\\spring-boot-starter-web\\2.5.14\\spring-boot-starter-web-2.5.14.jar;C:\\Users\\jiang\\.m2\\repository\\org\\springframework\\boot\\spring-boot-starter\\2.5.14\\spring-boot-starter-2.5.14.jar;C:\\Users\\jiang\\.m2\\repository\\org\\springframework\\boot\\spring-boot-starter-logging\\2.5.14\\spring-boot-starter-logging-2.5.14.jar;C:\\Users\\jiang\\.m2\\repository\\ch\\qos\\logback\\logback-classic\\1.2.11\\logback-classic-1.2.11.jar;C:\\Users\\jiang\\.m2\\repository\\ch\\qos\\logback\\logback-core\\1.2.11\\logback-core-1.2.11.jar;C:\\Users\\jiang\\.m2\\repository\\org\\apache\\logging\\log4j\\log4j-to-slf4j\\2.17.2\\log4j-to-slf4j-2.17.2.jar;C:\\Users\\jiang\\.m2\\repository\\org\\apache\\logging\\log4j\\log4j-api\\2.17.2\\log4j-api-2.17.2.jar;C:\\Users\\jiang\\.m2\\repository\\org\\slf4j\\jul-to-slf4j\\1.7.36\\jul-to-slf4j-1.7.36.jar;C:\\Users\\jiang\\.m2\\repository\\jakarta\\annotation\\jakarta.annotation-api\\1.3.5\\jakarta.annotation-api-1.3.5.jar;C:\\Users\\jiang\\.m2\\repository\\org\\springframework\\boot\\spring-boot-starter-json\\2.5.14\\spring-boot-starter-json-2.5.14.jar;C:\\Users\\jiang\\.m2\\repository\\com\\fasterxml\\jackson\\datatype\\jackson-datatype-jdk8\\2.12.6\\jackson-datatype-jdk8-2.12.6.jar;C:\\Users\\jiang\\.m2\\repository\\com\\fasterxml\\jackson\\datatype\\jackson-datatype-jsr310\\2.12.6\\jackson-datatype-jsr310-2.12.6.jar;C:\\Users\\jiang\\.m2\\repository\\com\\fasterxml\\jackson\\module\\jackson-module-parameter-names\\2.12.6\\jackson-module-parameter-names-2.12.6.jar;C:\\Users\\jiang\\.m2\\repository\\org\\springframework\\spring-web\\5.3.20\\spring-web-5.3.20.jar;C:\\Users\\jiang\\.m2\\repository\\org\\springframework\\spring-webmvc\\5.3.20\\spring-webmvc-5.3.20.jar;C:\\Users\\jiang\\.m2\\repository\\org\\springframework\\boot\\spring-boot-starter-jetty\\2.5.14\\spring-boot-starter-jetty-2.5.14.jar;C:\\Users\\jiang\\.m2\\repository\\jakarta\\servlet\\jakarta.servlet-api\\4.0.4\\jakarta.servlet-api-4.0.4.jar;C:\\Users\\jiang\\.m2\\repository\\jakarta\\websocket\\jakarta.websocket-api\\1.1.2\\jakarta.websocket-api-1.1.2.jar;C:\\Users\\jiang\\.m2\\repository\\org\\apache\\tomcat\\embed\\tomcat-embed-el\\9.0.63\\tomcat-embed-el-9.0.63.jar;C:\\Users\\jiang\\.m2\\repository\\org\\eclipse\\jetty\\jetty-servlets\\9.4.46.v20220331\\jetty-servlets-9.4.46.v20220331.jar;C:\\Users\\jiang\\.m2\\repository\\org\\eclipse\\jetty\\jetty-continuation\\9.4.46.v20220331\\jetty-continuation-9.4.46.v20220331.jar;C:\\Users\\jiang\\.m2\\repository\\org\\eclipse\\jetty\\jetty-http\\9.4.46.v20220331\\jetty-http-9.4.46.v20220331.jar;C:\\Users\\jiang\\.m2\\repository\\org\\eclipse\\jetty\\jetty-util\\9.4.46.v20220331\\jetty-util-9.4.46.v20220331.jar;C:\\Users\\jiang\\.m2\\repository\\org\\eclipse\\jetty\\jetty-io\\9.4.46.v20220331\\jetty-io-9.4.46.v20220331.jar;C:\\Users\\jiang\\.m2\\repository\\org\\eclipse\\jetty\\jetty-webapp\\9.4.46.v20220331\\jetty-webapp-9.4.46.v20220331.jar;C:\\Users\\jiang\\.m2\\repository\\org\\eclipse\\jetty\\jetty-xml\\9.4.46.v20220331\\jetty-xml-9.4.46.v20220331.jar;C:\\Users\\jiang\\.m2\\repository\\org\\eclipse\\jetty\\jetty-servlet\\9.4.46.v20220331\\jetty-servlet-9.4.46.v20220331.jar;C:\\Users\\jiang\\.m2\\repository\\org\\eclipse\\jetty\\jetty-security\\9.4.46.v20220331\\jetty-security-9.4.46.v20220331.jar;C:\\Users\\jiang\\.m2\\repository\\org\\eclipse\\jetty\\jetty-server\\9.4.46.v20220331\\jetty-server-9.4.46.v20220331.jar;C:\\Users\\jiang\\.m2\\repository\\org\\eclipse\\jetty\\jetty-util-ajax\\9.4.46.v20220331\\jetty-util-ajax-9.4.46.v20220331.jar;C:\\Users\\jiang\\.m2\\repository\\org\\eclipse\\jetty\\websocket\\websocket-server\\9.4.46.v20220331\\websocket-server-9.4.46.v20220331.jar;C:\\Users\\jiang\\.m2\\repository\\org\\eclipse\\jetty\\websocket\\websocket-common\\9.4.46.v20220331\\websocket-common-9.4.46.v20220331.jar;C:\\Users\\jiang\\.m2\\repository\\org\\eclipse\\jetty\\websocket\\websocket-api\\9.4.46.v20220331\\websocket-api-9.4.46.v20220331.jar;C:\\Users\\jiang\\.m2\\repository\\org\\eclipse\\jetty\\websocket\\websocket-client\\9.4.46.v20220331\\websocket-client-9.4.46.v20220331.jar;C:\\Users\\jiang\\.m2\\repository\\org\\eclipse\\jetty\\jetty-client\\9.4.46.v20220331\\jetty-client-9.4.46.v20220331.jar;C:\\Users\\jiang\\.m2\\repository\\org\\eclipse\\jetty\\websocket\\websocket-servlet\\9.4.46.v20220331\\websocket-servlet-9.4.46.v20220331.jar;C:\\Users\\jiang\\.m2\\repository\\org\\eclipse\\jetty\\websocket\\javax-websocket-server-impl\\9.4.46.v20220331\\javax-websocket-server-impl-9.4.46.v20220331.jar;C:\\Users\\jiang\\.m2\\repository\\org\\eclipse\\jetty\\jetty-annotations\\9.4.46.v20220331\\jetty-annotations-9.4.46.v20220331.jar;C:\\Users\\jiang\\.m2\\repository\\org\\eclipse\\jetty\\jetty-plus\\9.4.46.v20220331\\jetty-plus-9.4.46.v20220331.jar;C:\\Users\\jiang\\.m2\\repository\\org\\ow2\\asm\\asm\\9.2\\asm-9.2.jar;C:\\Users\\jiang\\.m2\\repository\\org\\ow2\\asm\\asm-commons\\9.2\\asm-commons-9.2.jar;C:\\Users\\jiang\\.m2\\repository\\org\\ow2\\asm\\asm-tree\\9.2\\asm-tree-9.2.jar;C:\\Users\\jiang\\.m2\\repository\\org\\ow2\\asm\\asm-analysis\\9.2\\asm-analysis-9.2.jar;C:\\Users\\jiang\\.m2\\repository\\org\\eclipse\\jetty\\websocket\\javax-websocket-client-impl\\9.4.46.v20220331\\javax-websocket-client-impl-9.4.46.v20220331.jar;C:\\Users\\jiang\\.m2\\repository\\org\\springframework\\boot\\spring-boot-starter-aop\\2.5.14\\spring-boot-starter-aop-2.5.14.jar;C:\\Users\\jiang\\.m2\\repository\\org\\springframework\\spring-aop\\5.3.20\\spring-aop-5.3.20.jar;C:\\Users\\jiang\\.m2\\repository\\org\\aspectj\\aspectjweaver\\1.9.7\\aspectjweaver-1.9.7.jar;C:\\Users\\jiang\\.m2\\repository\\com\\alibaba\\druid-spring-boot-starter\\1.2.16\\druid-spring-boot-starter-1.2.16.jar;C:\\Users\\jiang\\.m2\\repository\\com\\alibaba\\druid\\1.2.16\\druid-1.2.16.jar;C:\\Users\\jiang\\.m2\\repository\\org\\slf4j\\slf4j-api\\1.7.36\\slf4j-api-1.7.36.jar;C:\\Users\\jiang\\.m2\\repository\\pro\\fessional\\kaptcha\\2.3.3\\kaptcha-2.3.3.jar;C:\\Users\\jiang\\.m2\\repository\\com\\jhlabs\\filters\\2.0.235-1\\filters-2.0.235-1.jar;C:\\Users\\jiang\\.m2\\repository\\javax\\servlet\\servlet-api\\2.5\\servlet-api-2.5.jar;C:\\Users\\jiang\\.m2\\repository\\com\\github\\oshi\\oshi-core\\6.4.0\\oshi-core-6.4.0.jar;C:\\Users\\jiang\\.m2\\repository\\net\\java\\dev\\jna\\jna\\5.12.1\\jna-5.12.1.jar;C:\\Users\\jiang\\.m2\\repository\\net\\java\\dev\\jna\\jna-platform\\5.12.1\\jna-platform-5.12.1.jar;C:\\IdeaProjectMyself\\RuoYi-Vue-Jiang\\ruoyi-system\\target\\classes;C:\\IdeaProjectMyself\\RuoYi-Vue-Jiang\\ruoyi-quartz\\target\\classes;C:\\Users\\jiang\\.m2\\repository\\org\\quartz-scheduler\\quartz\\2.3.2\\quartz-2.3.2.jar;C:\\Users\\jiang\\.m2\\repository\\com\\mchange\\mchange-commons-java\\0.2.15\\mchange-commons-java-0.2.15.jar;C:\\IdeaProjectMyself\\RuoYi-Vue-Jiang\\ruoyi-common\\target\\classes;C:\\Users\\jiang\\.m2\\repository\\org\\projectlombok\\lombok\\1.18.24\\lombok-1.18.24.jar;C:\\Users\\jiang\\.m2\\repository\\io\\minio\\minio\\8.2.1\\minio-8.2.1.jar;C:\\Users\\jiang\\.m2\\repository\\com\\carrotsearch\\thirdparty\\simple-xml-safe\\2.7.1\\simple-xml-safe-2.7.1.jar;C:\\Users\\jiang\\.m2\\repository\\com\\google\\guava\\guava\\29.0-jre\\guava-29.0-jre.jar;C:\\Users\\jiang\\.m2\\repository\\com\\google\\guava\\failureaccess\\1.0.1\\failureaccess-1.0.1.jar;C:\\Users\\jiang\\.m2\\repository\\com\\google\\guava\\listenablefuture\\9999.0-empty-to-avoid-conflict-with-guava\\listenablefuture-9999.0-empty-to-avoid-conflict-with-guava.jar;C:\\Users\\jiang\\.m2\\repository\\com\\google\\code\\findbugs\\jsr305\\3.0.2\\jsr305-3.0.2.jar;C:\\Users\\jiang\\.m2\\repository\\org\\checkerframework\\checker-qual\\2.11.1\\checker-qual-2.11.1.jar;C:\\Users\\jiang\\.m2\\repository\\com\\google\\errorprone\\error_prone_annotations\\2.3.4\\error_prone_annotations-2.3.4.jar;C:\\Users\\jiang\\.m2\\repository\\com\\google\\j2objc\\j2objc-annotations\\1.3\\j2objc-annotations-1.3.jar;C:\\Users\\jiang\\.m2\\repository\\com\\squareup\\okhttp3\\okhttp\\3.14.9\\okhttp-3.14.9.jar;C:\\Users\\jiang\\.m2\\repository\\com\\squareup\\okio\\okio\\1.17.2\\okio-1.17.2.jar;C:\\Users\\jiang\\.m2\\repository\\com\\fasterxml\\jackson\\core\\jackson-annotations\\2.12.6\\jackson-annotations-2.12.6.jar;C:\\Users\\jiang\\.m2\\repository\\com\\fasterxml\\jackson\\core\\jackson-core\\2.12.6\\jackson-core-2.12.6.jar;C:\\Users\\jiang\\.m2\\repository\\org\\springframework\\spring-context-support\\5.3.20\\spring-context-support-5.3.20.jar;C:\\Users\\jiang\\.m2\\repository\\org\\springframework\\boot\\spring-boot-starter-security\\2.5.14\\spring-boot-starter-security-2.5.14.jar;C:\\Users\\jiang\\.m2\\repository\\org\\springframework\\security\\spring-security-config\\5.5.8\\spring-security-config-5.5.8.jar;C:\\Users\\jiang\\.m2\\repository\\org\\springframework\\security\\spring-security-core\\5.5.8\\spring-security-core-5.5.8.jar;C:\\Users\\jiang\\.m2\\repository\\org\\springframework\\security\\spring-security-crypto\\5.5.8\\spring-security-crypto-5.5.8.jar;C:\\Users\\jiang\\.m2\\repository\\org\\springframework\\security\\spring-security-web\\5.5.8\\spring-security-web-5.5.8.jar;C:\\Users\\jiang\\.m2\\repository\\com\\github\\pagehelper\\pagehelper-spring-boot-starter\\1.4.6\\pagehelper-spring-boot-starter-1.4.6.jar;C:\\Users\\jiang\\.m2\\repository\\org\\mybatis\\spring\\boot\\mybatis-spring-boot-starter\\2.2.2\\mybatis-spring-boot-starter-2.2.2.jar;C:\\Users\\jiang\\.m2\\repository\\org\\mybatis\\spring\\boot\\mybatis-spring-boot-autoconfigure\\2.2.2\\mybatis-spring-boot-autoconfigure-2.2.2.jar;C:\\Users\\jiang\\.m2\\repository\\org\\mybatis\\mybatis\\3.5.9\\mybatis-3.5.9.jar;C:\\Users\\jiang\\.m2\\repository\\org\\mybatis\\mybatis-spring\\2.0.7\\mybatis-spring-2.0.7.jar;C:\\Users\\jiang\\.m2\\repository\\com\\github\\pagehelper\\pagehelper-spring-boot-autoconfigure\\1.4.6\\pagehelper-spring-boot-autoconfigure-1.4.6.jar;C:\\Users\\jiang\\.m2\\repository\\com\\github\\pagehelper\\pagehelper\\5.3.2\\pagehelper-5.3.2.jar;C:\\Users\\jiang\\.m2\\repository\\com\\github\\jsqlparser\\jsqlparser\\4.5\\jsqlparser-4.5.jar;C:\\Users\\jiang\\.m2\\repository\\org\\springframework\\boot\\spring-boot-starter-validation\\2.5.14\\spring-boot-starter-validation-2.5.14.jar;C:\\Users\\jiang\\.m2\\repository\\org\\hibernate\\validator\\hibernate-validator\\6.2.3.Final\\hibernate-validator-6.2.3.Final.jar;C:\\Users\\jiang\\.m2\\repository\\jakarta\\validation\\jakarta.validation-api\\2.0.2\\jakarta.validation-api-2.0.2.jar;C:\\Users\\jiang\\.m2\\repository\\org\\jboss\\logging\\jboss-logging\\3.4.3.Final\\jboss-logging-3.4.3.Final.jar;C:\\Users\\jiang\\.m2\\repository\\org\\apache\\commons\\commons-lang3\\3.12.0\\commons-lang3-3.12.0.jar;C:\\Users\\jiang\\.m2\\repository\\com\\fasterxml\\jackson\\core\\jackson-databind\\2.12.6.1\\jackson-databind-2.12.6.1.jar;C:\\Users\\jiang\\.m2\\repository\\com\\baomidou\\dynamic-datasource-spring-boot-starter\\3.5.2\\dynamic-datasource-spring-boot-starter-3.5.2.jar;C:\\Users\\jiang\\.m2\\repository\\org\\springframework\\boot\\spring-boot-starter-jdbc\\2.5.14\\spring-boot-starter-jdbc-2.5.14.jar;C:\\Users\\jiang\\.m2\\repository\\com\\zaxxer\\HikariCP\\4.0.3\\HikariCP-4.0.3.jar;C:\\Users\\jiang\\.m2\\repository\\org\\springframework\\spring-jdbc\\5.3.20\\spring-jdbc-5.3.20.jar;C:\\Users\\jiang\\.m2\\repository\\com\\alibaba\\fastjson2\\fastjson2\\2.0.25\\fastjson2-2.0.25.jar;C:\\Users\\jiang\\.m2\\repository\\commons-io\\commons-io\\2.11.0\\commons-io-2.11.0.jar;C:\\Users\\jiang\\.m2\\repository\\org\\yaml\\snakeyaml\\1.28\\snakeyaml-1.28.jar;C:\\Users\\jiang\\.m2\\repository\\io\\jsonwebtoken\\jjwt\\0.9.1\\jjwt-0.9.1.jar;C:\\Users\\jiang\\.m2\\repository\\javax\\xml\\bind\\jaxb-api\\2.3.1\\jaxb-api-2.3.1.jar;C:\\Users\\jiang\\.m2\\repository\\javax\\activation\\javax.activation-api\\1.2.0\\javax.activation-api-1.2.0.jar;C:\\Users\\jiang\\.m2\\repository\\org\\springframework\\boot\\spring-boot-starter-data-redis\\2.5.14\\spring-boot-starter-data-redis-2.5.14.jar;C:\\Users\\jiang\\.m2\\repository\\org\\springframework\\data\\spring-data-redis\\2.5.11\\spring-data-redis-2.5.11.jar;C:\\Users\\jiang\\.m2\\repository\\org\\springframework\\data\\spring-data-keyvalue\\2.5.11\\spring-data-keyvalue-2.5.11.jar;C:\\Users\\jiang\\.m2\\repository\\org\\springframework\\data\\spring-data-commons\\2.5.11\\spring-data-commons-2.5.11.jar;C:\\Users\\jiang\\.m2\\repository\\org\\springframework\\spring-tx\\5.3.20\\spring-tx-5.3.20.jar;C:\\Users\\jiang\\.m2\\repository\\org\\springframework\\spring-oxm\\5.3.20\\spring-oxm-5.3.20.jar;C:\\Users\\jiang\\.m2\\repository\\io\\lettuce\\lettuce-core\\6.1.8.RELEASE\\lettuce-core-6.1.8.RELEASE.jar;C:\\Users\\jiang\\.m2\\repository\\io\\netty\\netty-common\\4.1.77.Final\\netty-common-4.1.77.Final.jar;C:\\Users\\jiang\\.m2\\repository\\io\\netty\\netty-handler\\4.1.77.Final\\netty-handler-4.1.77.Final.jar;C:\\Users\\jiang\\.m2\\repository\\io\\netty\\netty-resolver\\4.1.77.Final\\netty-resolver-4.1.77.Final.jar;C:\\Users\\jiang\\.m2\\repository\\io\\netty\\netty-buffer\\4.1.77.Final\\netty-buffer-4.1.77.Final.jar;C:\\Users\\jiang\\.m2\\repository\\io\\netty\\netty-codec\\4.1.77.Final\\netty-codec-4.1.77.Final.jar;C:\\Users\\jiang\\.m2\\repository\\io\\netty\\netty-transport\\4.1.77.Final\\netty-transport-4.1.77.Final.jar;C:\\Users\\jiang\\.m2\\repository\\io\\projectreactor\\reactor-core\\3.4.18\\reactor-core-3.4.18.jar;C:\\Users\\jiang\\.m2\\repository\\org\\reactivestreams\\reactive-streams\\1.0.3\\reactive-streams-1.0.3.jar;C:\\Users\\jiang\\.m2\\repository\\org\\apache\\commons\\commons-pool2\\2.9.0\\commons-pool2-2.9.0.jar;C:\\Users\\jiang\\.m2\\repository\\eu\\bitwalker\\UserAgentUtils\\1.21\\UserAgentUtils-1.21.jar;C:\\Users\\jiang\\.m2\\repository\\javax\\servlet\\javax.servlet-api\\4.0.1\\javax.servlet-api-4.0.1.jar;C:\\IdeaProjectMyself\\RuoYi-Vue-Jiang\\ruoyi-generator\\target\\classes;C:\\Users\\jiang\\.m2\\repository\\org\\apache\\velocity\\velocity-engine-core\\2.3\\velocity-engine-core-2.3.jar;C:\\Users\\jiang\\.m2\\repository\\commons-collections\\commons-collections\\3.2.2\\commons-collections-3.2.2.jar;C:\\IdeaProjectMyself\\RuoYi-Vue-Jiang\\ruoyi-dishes\\target\\classes;C:\\IdeaProjectMyself\\RuoYi-Vue-Jiang\\ruoyi-paperwork\\target\\classes;C:\\Users\\jiang\\.m2\\repository\\com\\deepoove\\poi-tl\\1.12.1\\poi-tl-1.12.1.jar;C:\\Users\\jiang\\.m2\\repository\\org\\apache\\xmlgraphics\\batik-transcoder\\1.14\\batik-transcoder-1.14.jar;C:\\Users\\jiang\\.m2\\repository\\org\\apache\\xmlgraphics\\batik-anim\\1.14\\batik-anim-1.14.jar;C:\\Users\\jiang\\.m2\\repository\\org\\apache\\xmlgraphics\\batik-css\\1.14\\batik-css-1.14.jar;C:\\Users\\jiang\\.m2\\repository\\org\\apache\\xmlgraphics\\batik-ext\\1.14\\batik-ext-1.14.jar;C:\\Users\\jiang\\.m2\\repository\\org\\apache\\xmlgraphics\\batik-parser\\1.14\\batik-parser-1.14.jar;C:\\Users\\jiang\\.m2\\repository\\org\\apache\\xmlgraphics\\batik-svg-dom\\1.14\\batik-svg-dom-1.14.jar;C:\\Users\\jiang\\.m2\\repository\\org\\apache\\xmlgraphics\\batik-awt-util\\1.14\\batik-awt-util-1.14.jar;C:\\Users\\jiang\\.m2\\repository\\org\\apache\\xmlgraphics\\xmlgraphics-commons\\2.6\\xmlgraphics-commons-2.6.jar;C:\\Users\\jiang\\.m2\\repository\\org\\apache\\xmlgraphics\\batik-bridge\\1.14\\batik-bridge-1.14.jar;C:\\Users\\jiang\\.m2\\repository\\org\\apache\\xmlgraphics\\batik-script\\1.14\\batik-script-1.14.jar;C:\\Users\\jiang\\.m2\\repository\\org\\apache\\xmlgraphics\\batik-dom\\1.14\\batik-dom-1.14.jar;C:\\Users\\jiang\\.m2\\repository\\xml-apis\\xml-apis\\1.4.01\\xml-apis-1.4.01.jar;C:\\Users\\jiang\\.m2\\repository\\org\\apache\\xmlgraphics\\batik-gvt\\1.14\\batik-gvt-1.14.jar;C:\\Users\\jiang\\.m2\\repository\\org\\apache\\xmlgraphics\\batik-shared-resources\\1.14\\batik-shared-resources-1.14.jar;C:\\Users\\jiang\\.m2\\repository\\org\\apache\\xmlgraphics\\batik-svggen\\1.14\\batik-svggen-1.14.jar;C:\\Users\\jiang\\.m2\\repository\\org\\apache\\xmlgraphics\\batik-util\\1.14\\batik-util-1.14.jar;C:\\Users\\jiang\\.m2\\repository\\org\\apache\\xmlgraphics\\batik-constants\\1.14\\batik-constants-1.14.jar;C:\\Users\\jiang\\.m2\\repository\\org\\apache\\xmlgraphics\\batik-i18n\\1.14\\batik-i18n-1.14.jar;C:\\Users\\jiang\\.m2\\repository\\org\\apache\\xmlgraphics\\batik-xml\\1.14\\batik-xml-1.14.jar;C:\\Users\\jiang\\.m2\\repository\\xml-apis\\xml-apis-ext\\1.3.04\\xml-apis-ext-1.3.04.jar;C:\\Users\\jiang\\.m2\\repository\\org\\apache\\xmlgraphics\\batik-codec\\1.14\\batik-codec-1.14.jar;C:\\Users\\jiang\\.m2\\repository\\org\\apache\\poi\\poi-ooxml\\4.1.2\\poi-ooxml-4.1.2.jar;C:\\Users\\jiang\\.m2\\repository\\org\\apache\\poi\\poi\\4.1.2\\poi-4.1.2.jar;C:\\Users\\jiang\\.m2\\repository\\commons-codec\\commons-codec\\1.15\\commons-codec-1.15.jar;C:\\Users\\jiang\\.m2\\repository\\org\\apache\\commons\\commons-collections4\\4.4\\commons-collections4-4.4.jar;C:\\Users\\jiang\\.m2\\repository\\org\\apache\\commons\\commons-math3\\3.6.1\\commons-math3-3.6.1.jar;C:\\Users\\jiang\\.m2\\repository\\com\\zaxxer\\SparseBitSet\\1.2\\SparseBitSet-1.2.jar;C:\\Users\\jiang\\.m2\\repository\\org\\apache\\poi\\poi-ooxml-schemas\\4.1.2\\poi-ooxml-schemas-4.1.2.jar;C:\\Users\\jiang\\.m2\\repository\\org\\apache\\xmlbeans\\xmlbeans\\3.1.0\\xmlbeans-3.1.0.jar;C:\\Users\\jiang\\.m2\\repository\\org\\apache\\commons\\commons-compress\\1.19\\commons-compress-1.19.jar;C:\\Users\\jiang\\.m2\\repository\\com\\github\\virtuald\\curvesapi\\1.06\\curvesapi-1.06.jar;C:\\Users\\jiang\\.m2\\repository\\com\\itextpdf\\itextpdf\\5.5.13.2\\itextpdf-5.5.13.2.jar;C:\\Users\\jiang\\.m2\\repository\\org\\im4java\\im4java\\1.4.0\\im4java-1.4.0.jar;C:\\Users\\jiang\\.m2\\repository\\com\\github\\sarxos\\webcam-capture\\0.3.12\\webcam-capture-0.3.12.jar;C:\\Users\\jiang\\.m2\\repository\\com\\nativelibs4java\\bridj\\0.7.0\\bridj-0.7.0.jar;C:\\Users\\jiang\\.m2\\repository\\org\\apache\\pdfbox\\pdfbox\\2.0.24\\pdfbox-2.0.24.jar;C:\\Users\\jiang\\.m2\\repository\\org\\apache\\pdfbox\\fontbox\\2.0.24\\fontbox-2.0.24.jar;C:\\Users\\jiang\\.m2\\repository\\commons-logging\\commons-logging\\1.2\\commons-logging-1.2.jar;C:\\Users\\jiang\\.m2\\repository\\com\\github\\jai-imageio\\jai-imageio-core\\1.4.0\\jai-imageio-core-1.4.0.jar com.ruoyi.web.controller.tool.Test</span></span>\n<span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">aaa</span></span>\n<span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">bbb</span></span>\n<span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">ccc</span></span>\n<span class="line"><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">=======</span></span>\n<span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">aaa</span></span>\n<span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">ddd</span></span>\n<span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">ccc</span></span>\n<span class="line"></span>\n<span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">Process</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> finished</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> with</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> exit</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> code</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;"> 0</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><figure><img src="'+C+'" alt="img_17.png" tabindex="0" loading="lazy"><figcaption>img_17.png</figcaption></figure><div class="language-java line-numbers-mode" data-highlighter="shiki" data-ext="java" data-title="java" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#A0A1A7;--shiki-dark:#7F848E;--shiki-light-font-style:italic;--shiki-dark-font-style:italic;">    //List 转数组   修改List，数组不受影响</span></span>\n<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">    public</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;"> static</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;"> void</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;"> testList2Array</span><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;">(){</span></span>\n<span class="line"><span style="--shiki-light:#C18401;--shiki-dark:#E5C07B;">        List</span><span style="--shiki-light:#E45649;--shiki-dark:#ABB2BF;">&lt;</span><span style="--shiki-light:#C18401;--shiki-dark:#E5C07B;">String</span><span style="--shiki-light:#E45649;--shiki-dark:#ABB2BF;">&gt;</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;"> list </span><span style="--shiki-light:#383A42;--shiki-dark:#56B6C2;">=</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;"> new</span><span style="--shiki-light:#C18401;--shiki-dark:#E5C07B;"> ArrayList</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">&lt;</span><span style="--shiki-light:#C18401;--shiki-dark:#E5C07B;">String</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">&gt;</span><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;">()</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">;</span></span>\n<span class="line"><span style="--shiki-light:#E45649;--shiki-dark:#E5C07B;">        list</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">add</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">&quot;aaa&quot;</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">);</span></span>\n<span class="line"><span style="--shiki-light:#E45649;--shiki-dark:#E5C07B;">        list</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">add</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">&quot;bbb&quot;</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">);</span></span>\n<span class="line"><span style="--shiki-light:#E45649;--shiki-dark:#E5C07B;">        list</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">add</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">&quot;ccc&quot;</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">);</span></span>\n<span class="line"><span style="--shiki-light:#C18401;--shiki-dark:#E5C07B;">        String</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">[] array </span><span style="--shiki-light:#383A42;--shiki-dark:#56B6C2;">=</span><span style="--shiki-light:#E45649;--shiki-dark:#E5C07B;"> list</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">toArray</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">new</span><span style="--shiki-light:#C18401;--shiki-dark:#E5C07B;"> String</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">[</span><span style="--shiki-light:#E45649;--shiki-dark:#E5C07B;">list</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">size</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">()]);</span></span>\n<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">        for</span><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;"> (</span><span style="--shiki-light:#C18401;--shiki-dark:#E5C07B;">String</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;"> s </span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">:</span><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;"> array) {</span></span>\n<span class="line"><span style="--shiki-light:#E45649;--shiki-dark:#E5C07B;">            System</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#E45649;--shiki-dark:#E5C07B;">out</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">println</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(s);</span></span>\n<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;">        }</span></span>\n<span class="line"></span>\n<span class="line"><span style="--shiki-light:#E45649;--shiki-dark:#E5C07B;">        System</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#E45649;--shiki-dark:#E5C07B;">out</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">println</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">&quot;=======&quot;</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">);</span></span>\n<span class="line"><span style="--shiki-light:#E45649;--shiki-dark:#E5C07B;">        list</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">add</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">&quot;333&quot;</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">);</span></span>\n<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;">        </span></span>\n<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">        for</span><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;"> (</span><span style="--shiki-light:#C18401;--shiki-dark:#E5C07B;">String</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;"> s </span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">:</span><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;"> array) {</span></span>\n<span class="line"><span style="--shiki-light:#E45649;--shiki-dark:#E5C07B;">            System</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#E45649;--shiki-dark:#E5C07B;">out</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">println</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(s);</span></span>\n<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;">        }</span></span>\n<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;">    }</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>参考回答：</p><ul><li>数组转 List ：使用JDK中java.util.Arrays 工具类的 asList 方法。</li><li>List 转数组 ：使用 List 的 toArray 方法。无参 toArray 方法返回 Object 数组，传入初始化长度的数组对象，返回该对象数组</li></ul><p>面试官再问:</p><h4 id="_1-用-arrays-aslist-转-list-后-如果修改了数组内容-list-受影响吗" tabindex="-1"><a class="header-anchor" href="#_1-用-arrays-aslist-转-list-后-如果修改了数组内容-list-受影响吗"><span>1. 用 <code>Arrays.asList</code> 转 List 后，如果修改了数组内容， list 受影响吗？</span></a></h4><p><code>Arrays.asList</code> 转换 <code>List</code> 之后，如果修改了数组的内容， <code>List</code> <strong>会受影响</strong>，因为它的底层使用的 <code>Arrays</code> 类中的一个内部类 <code>ArrayList</code> 来构造的集合，在这个集合的构造器中，把我们传入的这个集合进行了包装而已，最终指向的都是同一个内存地址。</p><h4 id="_2-list-用-toarray-转数组后-如果修改了-list-内容-数组受影响吗" tabindex="-1"><a class="header-anchor" href="#_2-list-用-toarray-转数组后-如果修改了-list-内容-数组受影响吗"><span>2. List 用 toArray 转数组后，如果修改了 List 内容，数组受影响吗？</span></a></h4><p><code>List</code> 用了 <code>toArray</code> 转数组后，如果修改了 <code>List</code> 内容，数组不会影响，当调用了 <code>toArray</code> 以后，在底层是它是进行了数组的<strong>拷贝</strong>，跟原来的元素就没啥关系了，所以即使 <code>List</code> 修改了以后，数组也不受影响。</p><h3 id="_5、-arraylist-和-linkedlist-的区别是什么" tabindex="-1"><a class="header-anchor" href="#_5、-arraylist-和-linkedlist-的区别是什么"><span>5、 ArrayList 和 LinkedList 的区别是什么 ？</span></a></h3><h4 id="单向链表" tabindex="-1"><a class="header-anchor" href="#单向链表"><span>单向链表</span></a></h4><ul><li>链表中的每一个元素称之为结点（ Node ）</li><li>物理<strong>存储单元上，非连续、非顺序</strong>的存储结构</li><li>单向链表：每个结点包括两个部分：一个是存储数据元素的数据域，另一个是存储下一个结点地址的指针域。记录下个结点地址的指针叫作后继指针 next</li></ul><figure><img src="'+v+'" alt="img_18.png" tabindex="0" loading="lazy"><figcaption>img_18.png</figcaption></figure><h4 id="链表时间复杂度" tabindex="-1"><a class="header-anchor" href="#链表时间复杂度"><span>链表时间复杂度</span></a></h4><h4 id="双向链表" tabindex="-1"><a class="header-anchor" href="#双向链表"><span>双向链表</span></a></h4><figure><img src="'+f+'" alt="img_19.png" tabindex="0" loading="lazy"><figcaption>img_19.png</figcaption></figure><h4 id="双向链表时间复杂度" tabindex="-1"><a class="header-anchor" href="#双向链表时间复杂度"><span>双向链表时间复杂度</span></a></h4><figure><img src="'+B+'" alt="img_20.png" tabindex="0" loading="lazy"><figcaption>img_20.png</figcaption></figure><h4 id="总结-1" tabindex="-1"><a class="header-anchor" href="#总结-1"><span>总结</span></a></h4><figure><img src="'+E+'" alt="img_21.png" tabindex="0" loading="lazy"><figcaption>img_21.png</figcaption></figure><h4 id="arraylist-和-linkedlist-的区别是什么-答案" tabindex="-1"><a class="header-anchor" href="#arraylist-和-linkedlist-的区别是什么-答案"><span>ArrayList 和 LinkedList 的区别是什么 ？答案</span></a></h4><ol><li><strong>底层数据结构</strong></li><li>操作数据的效率</li><li>内存空间占用</li><li>线程安全</li></ol><figure><img src="'+F+'" alt="img_22.png" tabindex="0" loading="lazy"><figcaption>img_22.png</figcaption></figure><figure><img src="'+x+'" alt="img_23.png" tabindex="0" loading="lazy"><figcaption>img_23.png</figcaption></figure><h2 id="三、hashmap相关面试题" tabindex="-1"><a class="header-anchor" href="#三、hashmap相关面试题"><span>三、HashMap相关面试题</span></a></h2><figure><img src="'+_+'" alt="img_24.png" tabindex="0" loading="lazy"><figcaption>img_24.png</figcaption></figure><h3 id="相关概念-二叉树" tabindex="-1"><a class="header-anchor" href="#相关概念-二叉树"><span>相关概念 - 二叉树</span></a></h3><p>定义：</p><figure><img src="'+U+'" alt="img_25.png" tabindex="0" loading="lazy"><figcaption>img_25.png</figcaption></figure><p>实现：</p><figure><img src="'+D+'" alt="img_26.png" tabindex="0" loading="lazy"><figcaption>img_26.png</figcaption></figure><h4 id="二叉树分类" tabindex="-1"><a class="header-anchor" href="#二叉树分类"><span>二叉树分类</span></a></h4><figure><img src="'+w+'" alt="img_27.png" tabindex="0" loading="lazy"><figcaption>img_27.png</figcaption></figure><figure><img src="'+L+'" alt="img_28.png" tabindex="0" loading="lazy"><figcaption>img_28.png</figcaption></figure><figure><img src="'+J+'" alt="img_29.png" tabindex="0" loading="lazy"><figcaption>img_29.png</figcaption></figure><h4 id="总结-2" tabindex="-1"><a class="header-anchor" href="#总结-2"><span>总结</span></a></h4><ol><li>什么是二叉树</li></ol><ul><li>每个节点最多有两个“叉”，分别是左子节点和右子节点。</li><li>不要求每个节点都有两个子节点，有的节点只有左子节点，有的节点只有右子节点。</li><li>二叉树每个节点的左子树和右子树也分别满足二叉树的定义</li></ul><ol start="2"><li>什么是二叉搜索树</li></ol><ul><li>二叉搜索树( <code>Binary Search Tree,BST</code>)又名二叉查找树，有序二叉树</li><li>在树中的任意一个节点，其左子树中的每个节点的值，都要小于这个节点的值而右子树节点的值都大于这个节点的值</li><li>没有键值相等的节点</li><li>通常情况下二叉树搜索的时间复杂度为<code>O(logn)</code></li></ul><h3 id="相关概念-红黑树" tabindex="-1"><a class="header-anchor" href="#相关概念-红黑树"><span>相关概念 - 红黑树</span></a></h3><p><strong>红黑树（ Red Black Tree ）</strong>：也是一种自平衡的二叉搜索树 (BST) ，之前叫做平衡二叉 B 树（ Symmetric Binary B-Tree ）</p><h4 id="红黑树的特质" tabindex="-1"><a class="header-anchor" href="#红黑树的特质"><span>红黑树的特质</span></a></h4><figure><img src="'+z+'" alt="img_30.png" tabindex="0" loading="lazy"><figcaption>img_30.png</figcaption></figure><h4 id="红黑树的复杂度" tabindex="-1"><a class="header-anchor" href="#红黑树的复杂度"><span>红黑树的复杂度</span></a></h4><figure><img src="'+T+'" alt="img_31.png" tabindex="0" loading="lazy"><figcaption>img_31.png</figcaption></figure><h4 id="总结-3" tabindex="-1"><a class="header-anchor" href="#总结-3"><span>总结</span></a></h4><p>什么是红黑树</p><ul><li>红黑树（ Red Black Tree ）：也是一种自平衡的二叉搜索树 (BST)</li><li>所有的红黑规则都是希望红黑树能够保证平衡</li><li>红黑树的时间复杂度：查找、添加、删除都是 O(logn)</li></ul><h3 id="相关概念-散列表" tabindex="-1"><a class="header-anchor" href="#相关概念-散列表"><span>相关概念 - 散列表</span></a></h3><p>在 HashMap 中的最重要的一个数据结构就是散列表，在散列表中又使用到了红黑树和链表</p><p>散列表 (Hash Table) 又名<strong>哈希表</strong>/Hash 表，是<strong>根据键（ Key ）</strong> 直接访问在内存存储位置<strong>值（ Value ）</strong> 的数据结构，它是由<strong>数组演化而来</strong>的，利用了数组支持按照下标进行随机访问数据的特性。</p><h4 id="散列函数" tabindex="-1"><a class="header-anchor" href="#散列函数"><span>散列函数</span></a></h4><figure><img src="'+q+'" alt="img_32.png" tabindex="0" loading="lazy"><figcaption>img_32.png</figcaption></figure><h4 id="散列冲突" tabindex="-1"><a class="header-anchor" href="#散列冲突"><span>散列冲突</span></a></h4><figure><img src="'+M+'" alt="img_33.png" tabindex="0" loading="lazy"><figcaption>img_33.png</figcaption></figure><p>解决办法：拉链法</p><figure><img src="'+S+'" alt="img_34.png" tabindex="0" loading="lazy"><figcaption>img_34.png</figcaption></figure><h4 id="拉链法-时间复杂度" tabindex="-1"><a class="header-anchor" href="#拉链法-时间复杂度"><span>拉链法 - 时间复杂度</span></a></h4><p><img src="'+P+'" alt="img_35.png" loading="lazy"><img src="'+H+'" alt="img_36.png" loading="lazy"></p><h4 id="总结-4" tabindex="-1"><a class="header-anchor" href="#总结-4"><span>总结：</span></a></h4><ol><li>什么是散列表？</li></ol><ul><li>散列表 (Hash Table) 又名哈希表 /Hash 表</li><li>根据键（ Key ）直接访问在内存存储位置值（ Value ）的数据结构</li><li>由数组演化而来的，利用了数组支持按照下标进行随机访问数据</li></ul><ol start="2"><li>散列冲突</li></ol><ul><li>散列冲突又称哈希冲突，哈希碰撞</li><li>指多个 key 映射到同一个数组下标位置</li></ul><ol start="3"><li>散列冲突 - 链表法（拉链）</li></ol><ul><li>数组的每个下标位置称之为桶（ bucket ）或者槽（ slot ）</li><li>每个桶 ( 槽 ) 会对应一条链表</li><li>hash 冲突后的元素都放到相同槽位对应的链表中或红黑树中</li></ul><h3 id="_1、说一下hashmap的实现原理" tabindex="-1"><a class="header-anchor" href="#_1、说一下hashmap的实现原理"><span>1、说一下HashMap的实现原理</span></a></h3><figure><img src="'+Y+'" alt="img_37.png" tabindex="0" loading="lazy"><figcaption>img_37.png</figcaption></figure><h4 id="总结-5" tabindex="-1"><a class="header-anchor" href="#总结-5"><span>总结</span></a></h4><ol><li>说一下 HashMap 的实现原理？</li></ol><ul><li>底层使用 hash 表数据结构，即数组 + （链表 | 红黑树）</li><li>添加数据时，计算 key 的值确定元素在数组中的下标 <ul><li>key 相同则替换</li><li>不同则存入链表或红黑树中获取数据通过 key 的 hash 计算数组下标获取元素</li></ul></li></ul><ol start="2"><li>HashMap 的 jdk1.7 和 jdk1.8 有什么区别</li></ol><ul><li>JDK1.8 之前采用的拉链法，数组 + 链表</li><li>JDK1.8 之后采用数组 + 链表 + 红黑树，链表长度大于 8 且数组长度大于 64 则会从链表转化为红黑树</li></ul><h3 id="_2、hashmap的put方法的具体流程" tabindex="-1"><a class="header-anchor" href="#_2、hashmap的put方法的具体流程"><span>2、HashMap的put方法的具体流程</span></a></h3><h4 id="hashmap-源码分析" tabindex="-1"><a class="header-anchor" href="#hashmap-源码分析"><span>HashMap 源码分析</span></a></h4><figure><img src="'+I+'" alt="img_38.png" tabindex="0" loading="lazy"><figcaption>img_38.png</figcaption></figure><figure><img src="'+O+'" alt="img_39.png" tabindex="0" loading="lazy"><figcaption>img_39.png</figcaption></figure><figure><img src="'+R+'" alt="img_40.png" tabindex="0" loading="lazy"><figcaption>img_40.png</figcaption></figure><h4 id="总结-6" tabindex="-1"><a class="header-anchor" href="#总结-6"><span>总结</span></a></h4><ol><li>判断键值对数组 table 是否为空或为 null ，否则执行 <code>resize()</code> 进行扩容（初始化）</li><li>根据键值 key 计算 hash 值得到数组索引</li><li>判断 <code>table[i]==null</code> ，条件成立，直接新建节点添加</li><li>如果 <code>table[i]==null</code> , 不成立 4.1 判断 <code>table[i]</code> 的首个元素是否和 key 一样，如果相同直接覆盖 value 4.2 判断 <code>table[i]</code> 是否为 treeNode ，即 <code>table[i]</code> 是否是红黑树，如果是红黑树，则直接在树中插入键值对 4.3 遍历 <code>table[i]</code> ，链表的尾部插入数据，然后判断链表长度是否大于 8 ，大于 8 的话把链表转换为红黑树，在红黑树中执行插入操 作，遍历过程中若发现 key 已经存在直接覆盖 value</li><li>插入成功后，判断实际存在的键值对数量 size 是否超多了最大容量 threshold （数组长度 *0.75 ），如果超过，进行扩容。</li></ol><h3 id="_3、讲一讲hashmap的扩容机制" tabindex="-1"><a class="header-anchor" href="#_3、讲一讲hashmap的扩容机制"><span>3、讲一讲HashMap的扩容机制</span></a></h3><h4 id="扩容流程" tabindex="-1"><a class="header-anchor" href="#扩容流程"><span>扩容流程</span></a></h4><figure><img src="'+N+'" alt="img_41.png" tabindex="0" loading="lazy"><figcaption>img_41.png</figcaption></figure><h4 id="总结-7" tabindex="-1"><a class="header-anchor" href="#总结-7"><span>总结</span></a></h4><ul><li>在添加元素或初始化的时候需要调用 resize 方法进行扩容，第一次添加数据初始化数组长度为 16 ，以后每次每次扩容都是达到了扩容阈值（数组长度 * 0.75 ）</li><li>每次扩容的时候，都是扩容之前容量的 2 倍；</li><li>扩容之后，会新创建一个数组，需要把老数组中的数据挪动到新的数组中 <ul><li>没有 hash 冲突的节点，则直接使用 <strong><code>e.hash &amp; (newCap - 1)</code></strong> 计算新数组的索引位置</li><li>如果是红黑树，走红黑树的添加</li><li>如果是链表，则需要遍历链表，可能需要拆分链表，判断 <strong><code>(e.hash &amp; oldCap)</code></strong> 是否为 0 ，该元素的位置要么停留在原始位置，要么移动到[原始位置 + 增加的数组大小]这个位置上</li></ul></li></ul><figure><img src="'+V+'" alt="img_42.png" tabindex="0" loading="lazy"><figcaption>img_42.png</figcaption></figure><h3 id="_4、hashmap的寻址算法" tabindex="-1"><a class="header-anchor" href="#_4、hashmap的寻址算法"><span>4、HashMap的寻址算法？</span></a></h3><figure><img src="'+W+'" alt="img_43.png" tabindex="0" loading="lazy"><figcaption>img_43.png</figcaption></figure><h4 id="为何-hashmap-的数组长度一定是-2-的次幂" tabindex="-1"><a class="header-anchor" href="#为何-hashmap-的数组长度一定是-2-的次幂"><span>为何 HashMap 的数组长度一定是 2 的次幂？</span></a></h4><ol><li>计算索引时效率更高：如果是 2 的 n 次幂可以使用<strong>位与运算</strong>代替<strong>取模</strong>。</li><li>扩容时重新计算索引效率更高： <code>hash &amp; oldCap == 0</code> 的元素留在原来位置 ，否则新位置 = 旧位置 + oldCap</li></ol><h4 id="总结-8" tabindex="-1"><a class="header-anchor" href="#总结-8"><span>总结</span></a></h4><p>1 . hashMap 的寻址算法</p><ul><li>计算对象的 hashCode()</li><li>再进行调用 hash() 方法进行二次哈希， hashcode 值右移 16 位再异或运算，让哈希分布更为均匀</li><li>最后 (capacity – 1) &amp; hash 得到索引</li></ul><ol start="2"><li>为何 HashMap 的数组长度一定是 2 的次幂？</li></ol><ul><li>计算索引时效率更高：如果是 2 的 n 次幂可以使用位与运算代替取模</li><li>扩容时重新计算索引效率更高： hash &amp; oldCap == 0 的元素留在原来位置 ，否则新位置 = 旧位置 + oldCap</li></ul><h3 id="_5、hashmap-在1-7情况下的多线程死循环问题" tabindex="-1"><a class="header-anchor" href="#_5、hashmap-在1-7情况下的多线程死循环问题"><span>5、HashMap 在1.7情况下的多线程死循环问题</span></a></h3><p>jdk7 的的数据结构是：数组 + 链表 在数组进行扩容的时候，因为链表是<strong>头插法</strong>，在进行数据迁移的过程中，有可能导致死循环</p><p><img src="'+K+'" alt="img_44.png" loading="lazy"><img src="'+Z+'" alt="img_45.png" loading="lazy"></p><h4 id="总结-9" tabindex="-1"><a class="header-anchor" href="#总结-9"><span>总结</span></a></h4><p>在 jdk1.7 的 hashmap 中在数组进行扩容的时候，因为链表是头插法，在进行数据迁移的过程中，有可能导致死循环。</p><p>比如说，现在有两个线程 线程一：读取到当前的 hashmap 数据，数据中一个链表，在准备扩容时，线程二介入 线程二：也读取 hashmap ，直接进行扩容。因为是头插法，链表的顺序会进行颠倒过来。比如原来的顺序是 AB ，扩容 后的顺序是 BA ，线程二执行结束。 线程一：继续执行的时候就会出现死循环的问题。 线程一先将 A 移入新的链表，再将 B 插入到链头，由于另外一个线程的原因， B 的 next 指向了 A ，所以 B-&gt;A-&gt;B, 形 成循环。</p><p>当然， JDK 8 将扩容算法做了调整，不再将元素加入链表头（而是保持与扩容前一样的顺序），<strong>尾插法</strong>，就避免了 jdk7中死循环的问题。</p>',141),ni={},ei=(0,a(66262).A)(ni,[["render",function(i,s){const a=(0,n.g2)("font");return(0,n.uX)(),(0,n.CE)("div",null,[G,(0,n.Lk)("p",null,[(0,n.eW)("速记口诀："),(0,n.bF)(a,{color:"BrulyWood"},{default:(0,n.k6)((()=>[X])),_:1})]),Q,(0,n.bF)(a,{color:"BrulyWood"},{default:(0,n.k6)((()=>[(0,n.eW)(" **总结：只要代码的执行时间不随着 n 的增大而增大，这样的代码复杂度都是 O(1)** ")])),_:1}),$,(0,n.Lk)("p",null,[(0,n.eW)("数组（ Array ）是一种用"),(0,n.bF)(a,{color:"BrulyWood"},{default:(0,n.k6)((()=>[ii])),_:1}),(0,n.eW)(" 存储"),(0,n.bF)(a,{color:"BrulyWood"},{default:(0,n.k6)((()=>[si])),_:1}),(0,n.eW)(" 数据的线性数据结构。")]),ai])}]]),ti=JSON.parse('{"path":"/study-notes/heima-java-bagu/collection/","title":"常见集合(手打)","lang":"zh-CN","frontmatter":{"title":"常见集合(手打)","category":"面试","description":"提示 视频来源： 集合篇 Java集合框架体系 - 介绍 img.pngimg.png 数组 ArrayList 底层实现 链表 LinkedList 底层实现 二叉树、红黑树 散列表 HashMap 底层原理 一、数据结构 算法复杂度分析 为什么要进行复杂度分析？ 指导你编写出性能更优的代码 评判别人写的代码的好坏 1、时间复杂度分析 时间复杂度分析...","head":[["meta",{"property":"og:url","content":"https://mister-hope.github.io/blog/study-notes/heima-java-bagu/collection/"}],["meta",{"property":"og:site_name","content":"撄宁的博客"}],["meta",{"property":"og:title","content":"常见集合(手打)"}],["meta",{"property":"og:description","content":"提示 视频来源： 集合篇 Java集合框架体系 - 介绍 img.pngimg.png 数组 ArrayList 底层实现 链表 LinkedList 底层实现 二叉树、红黑树 散列表 HashMap 底层原理 一、数据结构 算法复杂度分析 为什么要进行复杂度分析？ 指导你编写出性能更优的代码 评判别人写的代码的好坏 1、时间复杂度分析 时间复杂度分析..."}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:locale","content":"zh-CN"}],["meta",{"property":"og:updated_time","content":"2024-07-27T14:43:11.000Z"}],["meta",{"property":"article:author","content":"樱宁"}],["meta",{"property":"article:modified_time","content":"2024-07-27T14:43:11.000Z"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"常见集合(手打)\\",\\"image\\":[\\"\\"],\\"dateModified\\":\\"2024-07-27T14:43:11.000Z\\",\\"author\\":[{\\"@type\\":\\"Person\\",\\"name\\":\\"樱宁\\",\\"url\\":\\"https://mister-hope.com\\"}]}"]]},"headers":[{"level":2,"title":"Java集合框架体系 - 介绍","slug":"java集合框架体系-介绍","link":"#java集合框架体系-介绍","children":[]},{"level":2,"title":"一、数据结构","slug":"一、数据结构","link":"#一、数据结构","children":[{"level":3,"title":"算法复杂度分析","slug":"算法复杂度分析","link":"#算法复杂度分析","children":[]}]},{"level":2,"title":"二、List相关面试题","slug":"二、list相关面试题","link":"#二、list相关面试题","children":[{"level":3,"title":"1、数组","slug":"_1、数组","link":"#_1、数组","children":[]},{"level":3,"title":"2、ArrayList 源码分析","slug":"_2、arraylist-源码分析","link":"#_2、arraylist-源码分析","children":[]},{"level":3,"title":"3、ArrayList 底层实现原理是什么？","slug":"_3、arraylist-底层实现原理是什么","link":"#_3、arraylist-底层实现原理是什么","children":[]},{"level":3,"title":"4、ArrayList list=new ArrayList(10) 中的 list 扩容几次 ?","slug":"_4、arraylist-list-new-arraylist-10-中的-list-扩容几次","link":"#_4、arraylist-list-new-arraylist-10-中的-list-扩容几次","children":[]},{"level":3,"title":"4、如何实现数组和 List 之间的转换 ？","slug":"_4、如何实现数组和-list-之间的转换","link":"#_4、如何实现数组和-list-之间的转换","children":[]},{"level":3,"title":"5、 ArrayList 和 LinkedList 的区别是什么 ？","slug":"_5、-arraylist-和-linkedlist-的区别是什么","link":"#_5、-arraylist-和-linkedlist-的区别是什么","children":[]}]},{"level":2,"title":"三、HashMap相关面试题","slug":"三、hashmap相关面试题","link":"#三、hashmap相关面试题","children":[{"level":3,"title":"相关概念 - 二叉树","slug":"相关概念-二叉树","link":"#相关概念-二叉树","children":[]},{"level":3,"title":"相关概念 - 红黑树","slug":"相关概念-红黑树","link":"#相关概念-红黑树","children":[]},{"level":3,"title":"相关概念 - 散列表","slug":"相关概念-散列表","link":"#相关概念-散列表","children":[]},{"level":3,"title":"1、说一下HashMap的实现原理","slug":"_1、说一下hashmap的实现原理","link":"#_1、说一下hashmap的实现原理","children":[]},{"level":3,"title":"2、HashMap的put方法的具体流程","slug":"_2、hashmap的put方法的具体流程","link":"#_2、hashmap的put方法的具体流程","children":[]},{"level":3,"title":"3、讲一讲HashMap的扩容机制","slug":"_3、讲一讲hashmap的扩容机制","link":"#_3、讲一讲hashmap的扩容机制","children":[]},{"level":3,"title":"4、HashMap的寻址算法？","slug":"_4、hashmap的寻址算法","link":"#_4、hashmap的寻址算法","children":[]},{"level":3,"title":"5、HashMap 在1.7情况下的多线程死循环问题","slug":"_5、hashmap-在1-7情况下的多线程死循环问题","link":"#_5、hashmap-在1-7情况下的多线程死循环问题","children":[]}]}],"git":{"createdTime":1722091391000,"updatedTime":1722091391000,"contributors":[{"name":"jiang","email":"948742327@qq.com","commits":1}]},"readingTime":{"minutes":23.68,"words":7103},"filePathRelative":"study-notes/heima-java-bagu/collection/README.md","localizedDate":"2024年7月27日","excerpt":"<div class=\\"hint-container tip\\">\\n<p class=\\"hint-container-title\\">提示</p>\\n<p>视频来源：\\n<a href=\\"https://www.bilibili.com/video/BV1yT411H7YK?p=69&amp;vd_source=7138dfc78c49f602f8d3ed8cfbf0513d\\" target=\\"_blank\\" rel=\\"noopener noreferrer\\">集合篇</a></p>\\n</div>\\n<h2>Java集合框架体系 - 介绍</h2>\\n<figure><figcaption>img.png</figcaption></figure>","autoDesc":true}')}}]);