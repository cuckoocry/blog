"use strict";(self.webpackChunkblogs2=self.webpackChunkblogs2||[]).push([[3265],{66262:(n,s)=>{s.A=(n,s)=>{const a=n.__vccOpts||n;for(const[n,e]of s)a[n]=e;return a}},3130:(n,s,a)=>{a.r(s),a.d(s,{comp:()=>g,data:()=>b});var e=a(20641);const i=a.p+"assets/img/image-20200311212442057.3d6a2c2b.png",l=a.p+"assets/img/image-20200312154752973.630a576b.png",p=a.p+"assets/img/image-20200312200434776.176aa9f7.png",c=a.p+"assets/img/image-20200429085540554.5e313cf2.png",t=a.p+"assets/img/image-20200429085141487.6f5a5543.png",d=a.p+"assets/img/image-20200429085957778.89594056.png",r=a.p+"assets/img/image-20200429090249633.188df449.png",m=a.p+"assets/img/image-20200429090556928.cf2d8e47.png",v=a.p+"assets/img/image-20200429090713078.a0cc9055.png",o=[(0,e.Fv)('<h2 id="连环套路" tabindex="-1"><a class="header-anchor" href="#连环套路"><span>连环套路</span></a></h2><p>从AtomicInteger引出下面的问题</p><p>CAS -&gt; Unsafe -&gt; CAS底层思想 -&gt; ABA -&gt; 原子引用更新 -&gt; 如何规避ABA问题</p><h2 id="aba问题是什么" tabindex="-1"><a class="header-anchor" href="#aba问题是什么"><span>ABA问题是什么</span></a></h2><p>狸猫换太子</p><figure><img src="'+i+'" alt="image-20200311212442057" tabindex="0" loading="lazy"><figcaption>image-20200311212442057</figcaption></figure><p>假设现在有两个线程，分别是T1 和 T2，然后T1执行某个操作的时间为10秒，T2执行某个时间的操作是2秒，最开始AB两个线程，分别从主内存中获取A值，但是因为B的执行速度更快，他先把A的值改成B，然后在修改成A，然后执行完毕，T1线程在10秒后，执行完毕，判断内存中的值为A，并且和自己预期的值一样，它就认为没有人更改了主内存中的值，就快乐的修改成B，但是实际上 可能中间经历了 ABCDEFA 这个变换，也就是中间的值经历了狸猫换太子。</p><p>所以ABA问题就是，在进行获取主内存值的时候，该内存值在我们写入主内存的时候，已经被修改了N次，但是最终又改成原来的值了</p><h2 id="cas导致aba问题" tabindex="-1"><a class="header-anchor" href="#cas导致aba问题"><span>CAS导致ABA问题</span></a></h2><p>CAS算法实现了一个重要的前提，需要取出内存中某时刻的数据，并在当下时刻比较并替换，那么这个时间差会导致数据的变化。</p><p>比如说一个线程one从内存位置V中取出A，这时候另外一个线程two也从内存中取出A，并且线程two进行了一些操作将值变成了B，然后线程two又将V位置的数据变成A，这时候线程one进行CAS操作发现内存中仍然是A，然后线程one操作成功</p><p><code>尽管线程one的CAS操作成功，但是不代表这个过程就是没有问题的</code></p><h2 id="aba问题" tabindex="-1"><a class="header-anchor" href="#aba问题"><span>ABA问题</span></a></h2><p>CAS只管开头和结尾，也就是头和尾是一样，那就修改成功，中间的这个过程，可能会被人修改过</p><h2 id="原子引用" tabindex="-1"><a class="header-anchor" href="#原子引用"><span>原子引用</span></a></h2><p>原子引用其实和原子包装类是差不多的概念，就是将一个java类，用原子引用类进行包装起来，那么这个类就具备了原子性</p><div class="language- line-numbers-mode" data-highlighter="shiki" data-ext="" data-title="" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span>/**</span></span>\n<span class="line"><span> * 原子引用</span></span>\n<span class="line"><span> * @author: 阿飞</span></span>\n<span class="line"><span> * @create: 2020-03-11-22:12</span></span>\n<span class="line"><span> */</span></span>\n<span class="line"><span></span></span>\n<span class="line"><span>class User {</span></span>\n<span class="line"><span>    String userName;</span></span>\n<span class="line"><span>    int age;</span></span>\n<span class="line"><span></span></span>\n<span class="line"><span>    public User(String userName, int age) {</span></span>\n<span class="line"><span>        this.userName = userName;</span></span>\n<span class="line"><span>        this.age = age;</span></span>\n<span class="line"><span>    }</span></span>\n<span class="line"><span></span></span>\n<span class="line"><span>    public String getUserName() {</span></span>\n<span class="line"><span>        return userName;</span></span>\n<span class="line"><span>    }</span></span>\n<span class="line"><span></span></span>\n<span class="line"><span>    public void setUserName(String userName) {</span></span>\n<span class="line"><span>        this.userName = userName;</span></span>\n<span class="line"><span>    }</span></span>\n<span class="line"><span></span></span>\n<span class="line"><span>    public int getAge() {</span></span>\n<span class="line"><span>        return age;</span></span>\n<span class="line"><span>    }</span></span>\n<span class="line"><span></span></span>\n<span class="line"><span>    public void setAge(int age) {</span></span>\n<span class="line"><span>        this.age = age;</span></span>\n<span class="line"><span>    }</span></span>\n<span class="line"><span></span></span>\n<span class="line"><span>    @Override</span></span>\n<span class="line"><span>    public String toString() {</span></span>\n<span class="line"><span>        return &quot;User{&quot; +</span></span>\n<span class="line"><span>                &quot;userName=&#39;&quot; + userName + &#39;\\&#39;&#39; +</span></span>\n<span class="line"><span>                &quot;, age=&quot; + age +</span></span>\n<span class="line"><span>                &#39;}&#39;;</span></span>\n<span class="line"><span>    }</span></span>\n<span class="line"><span>}</span></span>\n<span class="line"><span>public class AtomicReferenceDemo {</span></span>\n<span class="line"><span></span></span>\n<span class="line"><span>    public static void main(String[] args) {</span></span>\n<span class="line"><span></span></span>\n<span class="line"><span>        User z3 = new User(&quot;z3&quot;, 22);</span></span>\n<span class="line"><span></span></span>\n<span class="line"><span>        User l4 = new User(&quot;l4&quot;, 25);</span></span>\n<span class="line"><span></span></span>\n<span class="line"><span>        // 创建原子引用包装类</span></span>\n<span class="line"><span>        AtomicReference&lt;User&gt; atomicReference = new AtomicReference&lt;&gt;();</span></span>\n<span class="line"><span></span></span>\n<span class="line"><span>        // 现在主物理内存的共享变量，为z3</span></span>\n<span class="line"><span>        atomicReference.set(z3);</span></span>\n<span class="line"><span></span></span>\n<span class="line"><span>        // 比较并交换，如果现在主物理内存的值为z3，那么交换成l4</span></span>\n<span class="line"><span>        System.out.println(atomicReference.compareAndSet(z3, l4) + &quot;\\t &quot; + atomicReference.get().toString());</span></span>\n<span class="line"><span></span></span>\n<span class="line"><span>        // 比较并交换，现在主物理内存的值是l4了，但是预期为z3，因此交换失败</span></span>\n<span class="line"><span>        System.out.println(atomicReference.compareAndSet(z3, l4) + &quot;\\t &quot; + atomicReference.get().toString());</span></span>\n<span class="line"><span>    }</span></span>\n<span class="line"><span>}</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="基于原子引用的aba问题" tabindex="-1"><a class="header-anchor" href="#基于原子引用的aba问题"><span>基于原子引用的ABA问题</span></a></h3><p>我们首先创建了两个线程，然后T1线程，执行一次ABA的操作，T2线程在一秒后修改主内存的值</p><div class="language- line-numbers-mode" data-highlighter="shiki" data-ext="" data-title="" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span>/**</span></span>\n<span class="line"><span> * ABA问题的解决，AtomicStampedReference</span></span>\n<span class="line"><span> * @author: 阿飞</span></span>\n<span class="line"><span> * @create: 2020-03-12-15:34</span></span>\n<span class="line"><span> */</span></span>\n<span class="line"><span>public class ABADemo {</span></span>\n<span class="line"><span></span></span>\n<span class="line"><span>    /**</span></span>\n<span class="line"><span>     * 普通的原子引用包装类</span></span>\n<span class="line"><span>     */</span></span>\n<span class="line"><span>    static AtomicReference&lt;Integer&gt; atomicReference = new AtomicReference&lt;&gt;(100);</span></span>\n<span class="line"><span></span></span>\n<span class="line"><span>    public static void main(String[] args) {</span></span>\n<span class="line"><span></span></span>\n<span class="line"><span>        new Thread(() -&gt; {</span></span>\n<span class="line"><span>            // 把100 改成 101 然后在改成100，也就是ABA</span></span>\n<span class="line"><span>            atomicReference.compareAndSet(100, 101);</span></span>\n<span class="line"><span>            atomicReference.compareAndSet(101, 100);</span></span>\n<span class="line"><span>        }, &quot;t1&quot;).start();</span></span>\n<span class="line"><span></span></span>\n<span class="line"><span>        new Thread(() -&gt; {</span></span>\n<span class="line"><span>            try {</span></span>\n<span class="line"><span>                // 睡眠一秒，保证t1线程，完成了ABA操作</span></span>\n<span class="line"><span>                TimeUnit.SECONDS.sleep(1);</span></span>\n<span class="line"><span>            } catch (InterruptedException e) {</span></span>\n<span class="line"><span>                e.printStackTrace();</span></span>\n<span class="line"><span>            }</span></span>\n<span class="line"><span>            // 把100 改成 101 然后在改成100，也就是ABA</span></span>\n<span class="line"><span>            System.out.println(atomicReference.compareAndSet(100, 2019) + &quot;\\t&quot; + atomicReference.get());</span></span>\n<span class="line"><span></span></span>\n<span class="line"><span>        }, &quot;t2&quot;).start();</span></span>\n<span class="line"><span>    }</span></span>\n<span class="line"><span>}</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>我们发现，它能够成功的修改，这就是ABA问题</p><figure><img src="'+l+'" alt="image-20200312154752973" tabindex="0" loading="lazy"><figcaption>image-20200312154752973</figcaption></figure><h2 id="解决aba问题" tabindex="-1"><a class="header-anchor" href="#解决aba问题"><span>解决ABA问题</span></a></h2><p>新增一种机制，也就是修改版本号，类似于时间戳的概念</p><p>T1： 100 1 2019 2</p><p>T2： 100 1 101 2 100 3</p><p>如果T1修改的时候，版本号为2，落后于现在的版本号3，所以要重新获取最新值，这里就提出了一个使用时间戳版本号，来解决ABA问题的思路</p><h2 id="atomicstampedreference" tabindex="-1"><a class="header-anchor" href="#atomicstampedreference"><span>AtomicStampedReference</span></a></h2><p>时间戳原子引用，来这里应用于版本号的更新，也就是每次更新的时候，需要比较期望值和当前值，以及期望版本号和当前版本号</p><div class="language- line-numbers-mode" data-highlighter="shiki" data-ext="" data-title="" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span>/**</span></span>\n<span class="line"><span> * ABA问题的解决，AtomicStampedReference</span></span>\n<span class="line"><span> * @author: 阿飞</span></span>\n<span class="line"><span> * @create: 2020-03-12-15:34</span></span>\n<span class="line"><span> */</span></span>\n<span class="line"><span>public class ABADemo {</span></span>\n<span class="line"><span></span></span>\n<span class="line"><span>    /**</span></span>\n<span class="line"><span>     * 普通的原子引用包装类</span></span>\n<span class="line"><span>     */</span></span>\n<span class="line"><span>    static AtomicReference&lt;Integer&gt; atomicReference = new AtomicReference&lt;&gt;(100);</span></span>\n<span class="line"><span></span></span>\n<span class="line"><span>    // 传递两个值，一个是初始值，一个是初始版本号</span></span>\n<span class="line"><span>    static AtomicStampedReference&lt;Integer&gt; atomicStampedReference = new AtomicStampedReference&lt;&gt;(100, 1);</span></span>\n<span class="line"><span></span></span>\n<span class="line"><span>    public static void main(String[] args) {</span></span>\n<span class="line"><span></span></span>\n<span class="line"><span>        System.out.println(&quot;============以下是ABA问题的产生==========&quot;);</span></span>\n<span class="line"><span></span></span>\n<span class="line"><span>        new Thread(() -&gt; {</span></span>\n<span class="line"><span>            // 把100 改成 101 然后在改成100，也就是ABA</span></span>\n<span class="line"><span>            atomicReference.compareAndSet(100, 101);</span></span>\n<span class="line"><span>            atomicReference.compareAndSet(101, 100);</span></span>\n<span class="line"><span>        }, &quot;t1&quot;).start();</span></span>\n<span class="line"><span></span></span>\n<span class="line"><span>        new Thread(() -&gt; {</span></span>\n<span class="line"><span>            try {</span></span>\n<span class="line"><span>                // 睡眠一秒，保证t1线程，完成了ABA操作</span></span>\n<span class="line"><span>                TimeUnit.SECONDS.sleep(1);</span></span>\n<span class="line"><span>            } catch (InterruptedException e) {</span></span>\n<span class="line"><span>                e.printStackTrace();</span></span>\n<span class="line"><span>            }</span></span>\n<span class="line"><span>            // 把100 改成 101 然后在改成100，也就是ABA</span></span>\n<span class="line"><span>            System.out.println(atomicReference.compareAndSet(100, 2019) + &quot;\\t&quot; + atomicReference.get());</span></span>\n<span class="line"><span></span></span>\n<span class="line"><span>        }, &quot;t2&quot;).start();</span></span>\n<span class="line"><span></span></span>\n<span class="line"><span>        System.out.println(&quot;============以下是ABA问题的解决==========&quot;);</span></span>\n<span class="line"><span></span></span>\n<span class="line"><span>        new Thread(() -&gt; {</span></span>\n<span class="line"><span></span></span>\n<span class="line"><span>            // 获取版本号</span></span>\n<span class="line"><span>            int stamp = atomicStampedReference.getStamp();</span></span>\n<span class="line"><span>            System.out.println(Thread.currentThread().getName() + &quot;\\t 第一次版本号&quot; + stamp);</span></span>\n<span class="line"><span></span></span>\n<span class="line"><span>            // 暂停t3一秒钟</span></span>\n<span class="line"><span>            try {</span></span>\n<span class="line"><span>                TimeUnit.SECONDS.sleep(1);</span></span>\n<span class="line"><span>            } catch (InterruptedException e) {</span></span>\n<span class="line"><span>                e.printStackTrace();</span></span>\n<span class="line"><span>            }</span></span>\n<span class="line"><span></span></span>\n<span class="line"><span>            // 传入4个值，期望值，更新值，期望版本号，更新版本号</span></span>\n<span class="line"><span>            atomicStampedReference.compareAndSet(100, 101, atomicStampedReference.getStamp(), atomicStampedReference.getStamp()+1);</span></span>\n<span class="line"><span></span></span>\n<span class="line"><span>            System.out.println(Thread.currentThread().getName() + &quot;\\t 第二次版本号&quot; + atomicStampedReference.getStamp());</span></span>\n<span class="line"><span></span></span>\n<span class="line"><span>            atomicStampedReference.compareAndSet(101, 100, atomicStampedReference.getStamp(), atomicStampedReference.getStamp()+1);</span></span>\n<span class="line"><span></span></span>\n<span class="line"><span>            System.out.println(Thread.currentThread().getName() + &quot;\\t 第三次版本号&quot; + atomicStampedReference.getStamp());</span></span>\n<span class="line"><span></span></span>\n<span class="line"><span>        }, &quot;t3&quot;).start();</span></span>\n<span class="line"><span></span></span>\n<span class="line"><span>        new Thread(() -&gt; {</span></span>\n<span class="line"><span></span></span>\n<span class="line"><span>            // 获取版本号</span></span>\n<span class="line"><span>            int stamp = atomicStampedReference.getStamp();</span></span>\n<span class="line"><span>            System.out.println(Thread.currentThread().getName() + &quot;\\t 第一次版本号&quot; + stamp);</span></span>\n<span class="line"><span></span></span>\n<span class="line"><span>            // 暂停t4 3秒钟，保证t3线程也进行一次ABA问题</span></span>\n<span class="line"><span>            try {</span></span>\n<span class="line"><span>                TimeUnit.SECONDS.sleep(3);</span></span>\n<span class="line"><span>            } catch (InterruptedException e) {</span></span>\n<span class="line"><span>                e.printStackTrace();</span></span>\n<span class="line"><span>            }</span></span>\n<span class="line"><span></span></span>\n<span class="line"><span>            boolean result = atomicStampedReference.compareAndSet(100, 2019, stamp, stamp+1);</span></span>\n<span class="line"><span></span></span>\n<span class="line"><span>            System.out.println(Thread.currentThread().getName() + &quot;\\t 修改成功否：&quot; + result + &quot;\\t 当前最新实际版本号：&quot; + atomicStampedReference.getStamp());</span></span>\n<span class="line"><span></span></span>\n<span class="line"><span>            System.out.println(Thread.currentThread().getName() + &quot;\\t 当前实际最新值&quot; + atomicStampedReference.getReference());</span></span>\n<span class="line"><span></span></span>\n<span class="line"><span></span></span>\n<span class="line"><span>        }, &quot;t4&quot;).start();</span></span>\n<span class="line"><span></span></span>\n<span class="line"><span>    }</span></span>\n<span class="line"><span>}</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>运行结果为：</p><figure><img src="'+p+'" alt="image-20200312200434776" tabindex="0" loading="lazy"><figcaption>image-20200312200434776</figcaption></figure><p>我们能够发现，线程t3，在进行ABA操作后，版本号变更成了3，而线程t4在进行操作的时候，就出现操作失败了，因为版本号和当初拿到的不一样</p><h2 id="longadder-cas机制优化" tabindex="-1"><a class="header-anchor" href="#longadder-cas机制优化"><span>LongAdder（CAS机制优化）</span></a></h2><p>LongAdder是java8为我们提供的新的类，跟AtomicLong有相同的效果。是对CAS机制的优化</p><div class="language- line-numbers-mode" data-highlighter="shiki" data-ext="" data-title="" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span>LongAdder：</span></span>\n<span class="line"><span>//变量声明</span></span>\n<span class="line"><span>public static LongAdder count = new LongAdder();</span></span>\n<span class="line"><span>//变量操作</span></span>\n<span class="line"><span>count.increment();</span></span>\n<span class="line"><span>//变量取值</span></span>\n<span class="line"><span>count</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="为什么有了atomiclong还要新增一个longadder呢" tabindex="-1"><a class="header-anchor" href="#为什么有了atomiclong还要新增一个longadder呢"><span>为什么有了AtomicLong还要新增一个LongAdder呢</span></a></h3><p>原因是：CAS底层实现是在一个死循环中不断地尝试修改目标值，直到修改成功。如果竞争不激烈的时候，修改成功率很高，否则失败率很高。在失败的时候，这些重复的原子性操作会耗费性能。（不停的<strong>自旋</strong>，进入一个无限重复的循环中）</p><figure><img src="'+c+'" alt="image-20200429085540554" tabindex="0" loading="lazy"><figcaption>image-20200429085540554</figcaption></figure><p><strong>核心思想：将热点数据分离。</strong></p><p>比如说它可以将AtomicLong内部的内部核心数据value分离成一个数组，每个线程访问时，通过hash等算法映射到其中一个数字进行计数，而最终的计数结果则为这个数组的求和累加，其中热点数据value会被分离成多个单元的cell，每个cell独自维护内部的值。当前对象的实际值由所有的cell累计合成，这样热点就进行了有效地分离，并提高了并行度。这相当于将AtomicLong的单点的更新压力分担到各个节点上。在低并发的时候通过对base的直接更新，可以保障和AtomicLong的性能基本一致。而在高并发的时候通过分散提高了性能。</p><div class="language- line-numbers-mode" data-highlighter="shiki" data-ext="" data-title="" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span>public void increment() {</span></span>\n<span class="line"><span>    add(1L);</span></span>\n<span class="line"><span>}</span></span>\n<span class="line"><span>public void add(long x) {</span></span>\n<span class="line"><span>    Cell[] as; long b, v; int m; Cell a;</span></span>\n<span class="line"><span>    if ((as = cells) != null || !casBase(b = base, b + x)) {</span></span>\n<span class="line"><span>        boolean uncontended = true;</span></span>\n<span class="line"><span>        if (as == null || (m = as.length - 1) &lt; 0 ||</span></span>\n<span class="line"><span>            (a = as[getProbe() &amp; m]) == null ||</span></span>\n<span class="line"><span>            !(uncontended = a.cas(v = a.value, v + x)))</span></span>\n<span class="line"><span>            longAccumulate(x, null, uncontended);</span></span>\n<span class="line"><span>    }</span></span>\n<span class="line"><span>}</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>但是这个CAS有没有问题呢？肯定是有的。比如说大量的线程同时并发修改一个AtomicInteger，可能有<strong>很多线程会不停的自旋</strong>，进入一个无限重复的循环中。</p><p>这些线程不停地获取值，然后发起CAS操作，但是发现这个值被别人改过了，于是再次进入下一个循环，获取值，发起CAS操作又失败了，再次进入下一个循环。</p><p>在大量线程高并发更新AtomicInteger的时候，这种问题可能会比较明显，导致大量线程空循环，自旋转，性能和效率都不是特别好。</p><p>于是，当当当当，Java 8推出了一个新的类，<strong>LongAdder</strong>，他就是尝试使用分段CAS以及自动分段迁移的方式来大幅度提升多线程高并发执行CAS操作的性能！</p><figure><img src="'+t+'" alt="image-20200429085141487" tabindex="0" loading="lazy"><figcaption>image-20200429085141487</figcaption></figure><p>在LongAdder的底层实现中，首先有一个base值，刚开始多线程来不停的累加数值，都是对base进行累加的，比如刚开始累加成了base = 5。</p><p>接着如果发现并发更新的线程数量过多，在发生竞争的情况下，会有一个Cell数组用于将不同线程的操作离散到不同的节点上去 ==(会根据需要扩容，最大为CPU核）==就会开始施行<strong>分段CAS的机制</strong>，也就是内部会搞一个Cell数组，每个数组是一个数值分段。</p><p>这时，让大量的线程分别去对不同Cell内部的value值进行CAS累加操作，这样就把CAS计算压力分散到了不同的Cell分段数值中了！</p><p>这样就可以大幅度的降低多线程并发更新同一个数值时出现的无限循环的问题，大幅度提升了多线程并发更新数值的性能和效率！</p><p>而且他内部实现了<strong>自动分段迁移的机制</strong>，也就是如果某个Cell的value执行CAS失败了，那么就会自动去找另外一个Cell分段内的value值进行CAS操作。</p><p>这样也解决了线程空旋转、自旋不停等待执行CAS操作的问题，让一个线程过来执行CAS时可以尽快的完成这个操作。</p><p>最后，如果你要从LongAdder中获取当前累加的总值，就会把base值和所有Cell分段数值加起来返回给你。</p><figure><img src="'+d+'" alt="image-20200429085957778" tabindex="0" loading="lazy"><figcaption>image-20200429085957778</figcaption></figure><p>如上图所示，LongAdder则是内部维护多个Cell变量，每个Cell里面有一个初始值为0的long型变量，在同等并发量的情况下，争夺单个变量的线程会减少，这是变相的减少了争夺共享资源的并发量，另外多个线程在争夺同一个原子变量时候，</p><p>如果失败并不是自旋CAS重试，而是尝试获取其他原子变量的锁，最后当获取当前值时候是把所有变量的值累加后再加上base的值返回的。</p><p>LongAdder维护了要给延迟初始化的原子性更新数组和一个基值变量base数组的大小保持是2的N次方大小，数组表的下标使用每个线程的hashcode值的掩码表示，数组里面的变量实体是Cell类型。</p><p>Cell 类型是Atomic的一个改进，用来减少缓存的争用，对于大多数原子操作字节填充是浪费的，因为原子操作都是无规律的分散在内存中进行的，多个原子性操作彼此之间是没有接触的，但是原子性数组元素彼此相邻存放将能经常共享缓存行，也就是<strong>伪共享</strong>。所以这在性能上是一个提升。（补充：可以看到Cell类用Contended注解修饰，这里主要是解决false sharing(伪共享的问题)，不过个人认为伪共享翻译的不是很好，或者应该是错误的共享，比如两个volatile变量被分配到了同一个缓存行，但是这两个的更新在高并发下会竞争，比如线程A去更新变量a，线程B去更新变量b，但是这两个变量被分配到了同一个缓存行，因此会造成每个线程都去争抢缓存行的所有权，例如A获取了所有权然后执行更新这时由于volatile的语义会造成其刷新到主存，但是由于变量b也被缓存到同一个缓存行，因此就会造成cache miss，这样就会造成极大的性能损失） <strong>LongAdder的add操作图</strong></p><figure><img src="'+r+'" alt="image-20200429090249633" tabindex="0" loading="lazy"><figcaption>image-20200429090249633</figcaption></figure><p>可以看到，只有从未出现过并发冲突的时候，base基数才会使用到，一旦出现了并发冲突，之后所有的操作都只针对Cell[]数组中的单元Cell。 如果Cell[]数组未初始化，会调用父类的longAccumelate去初始化Cell[]，如果Cell[]已经初始化但是冲突发生在Cell单元内，则也调用父类的longAccumelate，此时可能就需要对Cell[]扩容了。 <strong>另外由于Cells占用内存是相对比较大的，所以一开始并不创建，而是在需要时候再创建，也就是惰性加载，当一开始没有空间时候，所有的更新都是操作base变量。</strong></p><figure><img src="'+m+'" alt="image-20200429090556928" tabindex="0" loading="lazy"><figcaption>image-20200429090556928</figcaption></figure><p>如上图代码： 例如32、64位操作系统的缓存行大小不一样，因此JAVA8中就增加了一个注<code>@sun.misc.Contended</code>解用于解决这个问题,由JVM去插入这些变量，<a href="http://xn--openjdk-hc5k25at0ntqhnpa7548b.java.net/jeps/142" target="_blank" rel="noopener noreferrer">具体可以参考openjdk.java.net/jeps/142</a> ，但是通常来说对象是不规则的分配到内存中的，但是数组由于是连续的内存，因此可能会共享缓存行，因此这里加一个Contended注解以防cells数组发生伪共享的情况。</p><p>为了降低高并发下多线程对一个变量CAS争夺失败后大量线程会自旋而造成降低并发性能问题，LongAdder内部通过根据并发请求量来维护多个Cell元素(一个动态的Cell数组)来分担对单个变量进行争夺资源。</p><figure><img src="'+v+'" alt="image-20200429090713078" tabindex="0" loading="lazy"><figcaption>image-20200429090713078</figcaption></figure><p>可以看到LongAdder继承自Striped64类，Striped64内部维护着三个变量，LongAdder的真实值其实就是base的值与Cell数组里面所有Cell元素值的累加，base是个基础值，默认是0，cellBusy用来实现自旋锁，当创建Cell元素或者扩容Cell数组时候用来进行线程间的同步。</p><p>在无竞争下直接更新base，类似AtomicLong高并发下，会将每个线程的操作hash到不同的cells数组中，从而将AtomicLong中更新一个value的行为优化之后，分散到多个value中 从而降低更新热点，而需要得到当前值的时候，直接 将所有cell中的value与base相加即可，但是跟AtomicLong(compare and change -&gt; xadd)的CAS不同，incrementAndGet操作及其变种可以返回更新后的值，而LongAdder返回的是void。</p><p>由于Cell相对来说比较占内存，因此这里采用懒加载的方式，在无竞争的情况下直接更新base域，在第一次发生竞争的时候(CAS失败)就会创建一个大小为2的cells数组，每次扩容都是加倍，只到达到CPU核数。同时我们知道扩容数组等行为需要只能有一个线程同时执行，因此需要一个锁，这里通过CAS更新cellsBusy来实现一个简单的spin lock。</p><p>数组访问索引是通过Thread里的threadLocalRandomProbe域取模实现的，这个域是ThreadLocalRandom更新的，cells的数组大小被限制为CPU的核数，因为即使有超过核数个线程去更新，但是每个线程也只会和一个CPU绑定，更新的时候顶多会有cpu核数个线程，因此我们只需要通过hash将不同线程的更新行为离散到不同的slot即可。 我们知道线程、线程池会被关闭或销毁，这个时候可能这个线程之前占用的slot就会变成没人用的，但我们也不能清除掉，因为一般web应用都是长时间运行的，线程通常也会动态创建、销毁，很可能一段时间后又会被其他线程占用，而对于短时间运行的，例如单元测试，清除掉有啥意义呢？</p><h2 id="参考" tabindex="-1"><a class="header-anchor" href="#参考"><span>参考</span></a></h2><p><a href="https://blog.csdn.net/eluanshi12/article/details/84871879" target="_blank" rel="noopener noreferrer">AtomicLong与LongAdder（CAS机制的优化）</a></p><p><a href="https://mp.weixin.qq.com/s/KFsqsCVgyiiTDXMR-Hu1-Q" target="_blank" rel="noopener noreferrer">大白话聊聊Java并发面试问题之Java 8如何优化CAS性能？</a></p><p>https://blog.csdn.net/wolf_love666/article/details/87693771</p>',73)],u={},g=(0,a(66262).A)(u,[["render",function(n,s){return(0,e.uX)(),(0,e.CE)("div",null,o)}]]),b=JSON.parse('{"path":"/study-notes/shangguigu-second/ABA/","title":"3、原子类AtomicInteger的ABA问题","lang":"zh-CN","frontmatter":{"title":"3、原子类AtomicInteger的ABA问题","date":"2023-03-11T00:00:00.000Z","tags":["JUC","CAS","ABA问题"],"order":3,"description":"连环套路 从AtomicInteger引出下面的问题 CAS -> Unsafe -> CAS底层思想 -> ABA -> 原子引用更新 -> 如何规避ABA问题 ABA问题是什么 狸猫换太子 image-20200311212442057image-20200311212442057 假设现在有两个线程，分别是T1 和 T2，然后T1执行某个操作的时...","head":[["meta",{"property":"og:url","content":"https://mister-hope.github.io/./study-notes/shangguigu-second/ABA/"}],["meta",{"property":"og:site_name","content":"撄宁的博客"}],["meta",{"property":"og:title","content":"3、原子类AtomicInteger的ABA问题"}],["meta",{"property":"og:description","content":"连环套路 从AtomicInteger引出下面的问题 CAS -> Unsafe -> CAS底层思想 -> ABA -> 原子引用更新 -> 如何规避ABA问题 ABA问题是什么 狸猫换太子 image-20200311212442057image-20200311212442057 假设现在有两个线程，分别是T1 和 T2，然后T1执行某个操作的时..."}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:locale","content":"zh-CN"}],["meta",{"property":"og:updated_time","content":"2024-07-27T14:05:04.000Z"}],["meta",{"property":"article:author","content":"樱宁"}],["meta",{"property":"article:tag","content":"JUC"}],["meta",{"property":"article:tag","content":"CAS"}],["meta",{"property":"article:tag","content":"ABA问题"}],["meta",{"property":"article:published_time","content":"2023-03-11T00:00:00.000Z"}],["meta",{"property":"article:modified_time","content":"2024-07-27T14:05:04.000Z"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"3、原子类AtomicInteger的ABA问题\\",\\"image\\":[\\"\\"],\\"datePublished\\":\\"2023-03-11T00:00:00.000Z\\",\\"dateModified\\":\\"2024-07-27T14:05:04.000Z\\",\\"author\\":[{\\"@type\\":\\"Person\\",\\"name\\":\\"樱宁\\",\\"url\\":\\"https://mister-hope.com\\"}]}"]]},"headers":[{"level":2,"title":"连环套路","slug":"连环套路","link":"#连环套路","children":[]},{"level":2,"title":"ABA问题是什么","slug":"aba问题是什么","link":"#aba问题是什么","children":[]},{"level":2,"title":"CAS导致ABA问题","slug":"cas导致aba问题","link":"#cas导致aba问题","children":[]},{"level":2,"title":"ABA问题","slug":"aba问题","link":"#aba问题","children":[]},{"level":2,"title":"原子引用","slug":"原子引用","link":"#原子引用","children":[{"level":3,"title":"基于原子引用的ABA问题","slug":"基于原子引用的aba问题","link":"#基于原子引用的aba问题","children":[]}]},{"level":2,"title":"解决ABA问题","slug":"解决aba问题","link":"#解决aba问题","children":[]},{"level":2,"title":"AtomicStampedReference","slug":"atomicstampedreference","link":"#atomicstampedreference","children":[]},{"level":2,"title":"LongAdder（CAS机制优化）","slug":"longadder-cas机制优化","link":"#longadder-cas机制优化","children":[{"level":3,"title":"为什么有了AtomicLong还要新增一个LongAdder呢","slug":"为什么有了atomiclong还要新增一个longadder呢","link":"#为什么有了atomiclong还要新增一个longadder呢","children":[]}]},{"level":2,"title":"参考","slug":"参考","link":"#参考","children":[]}],"git":{"createdTime":1722089104000,"updatedTime":1722089104000,"contributors":[{"name":"jiang","email":"948742327@qq.com","commits":1}]},"readingTime":{"minutes":13.98,"words":4194},"filePathRelative":"study-notes/shangguigu-second/ABA/README.md","localizedDate":"2023年3月11日","excerpt":"<h2>连环套路</h2>\\n<p>从AtomicInteger引出下面的问题</p>\\n<p>CAS -&gt; Unsafe -&gt; CAS底层思想 -&gt; ABA -&gt; 原子引用更新 -&gt; 如何规避ABA问题</p>\\n<h2>ABA问题是什么</h2>\\n<p>狸猫换太子</p>\\n<figure><figcaption>image-20200311212442057</figcaption></figure>\\n<p>假设现在有两个线程，分别是T1 和 T2，然后T1执行某个操作的时间为10秒，T2执行某个时间的操作是2秒，最开始AB两个线程，分别从主内存中获取A值，但是因为B的执行速度更快，他先把A的值改成B，然后在修改成A，然后执行完毕，T1线程在10秒后，执行完毕，判断内存中的值为A，并且和自己预期的值一样，它就认为没有人更改了主内存中的值，就快乐的修改成B，但是实际上 可能中间经历了 ABCDEFA 这个变换，也就是中间的值经历了狸猫换太子。</p>","autoDesc":true}')}}]);