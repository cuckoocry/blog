"use strict";(self.webpackChunkblogs2=self.webpackChunkblogs2||[]).push([[7703],{66262:(i,a)=>{a.A=(i,a)=>{const e=i.__vccOpts||i;for(const[i,s]of a)e[i]=s;return e}},8764:(i,a,e)=>{e.r(a),e.d(a,{comp:()=>h,data:()=>p});var s=e(20641);const t=e.p+"assets/img/image-20200709170907611.1d10cc22.png",n=e.p+"assets/img/image-20200709230647277.cbf005b2.png",l=[(0,s.Fv)('<h1 id="直接内存-direct-memory" tabindex="-1"><a class="header-anchor" href="#直接内存-direct-memory"><span>直接内存 Direct Memory</span></a></h1><p>不是虚拟机运行时数据区的一部分，也不是《Java虚拟机规范》中定义的内存区域。</p><p>直接内存是在Java堆外的、直接向系统申请的内存区间。</p><p>来源于NIO，通过存在堆中的DirectByteBuffer操作Native内存</p><p>通常，访问直接内存的速度会优于Java堆。即读写性能高。</p><ul><li>因此出于性能考虑，读写频繁的场合可能会考虑使用直接内存。</li><li>Java的NIO库允许Java程序使用直接内存，用于数据缓冲区</li></ul><p>使用下列代码，直接分配本地内存空间</p><div class="language-java line-numbers-mode" data-highlighter="shiki" data-ext="java" data-title="java" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">int</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;"> BUFFER </span><span style="--shiki-light:#383A42;--shiki-dark:#56B6C2;">=</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;"> 1024</span><span style="--shiki-light:#383A42;--shiki-dark:#56B6C2;">*</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;">1024</span><span style="--shiki-light:#383A42;--shiki-dark:#56B6C2;">*</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;">1024</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">;</span><span style="--shiki-light:#A0A1A7;--shiki-dark:#7F848E;--shiki-light-font-style:italic;--shiki-dark-font-style:italic;"> // 1GB</span></span>\n<span class="line"><span style="--shiki-light:#C18401;--shiki-dark:#E5C07B;">ByteBuffer</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;"> byteBuffer </span><span style="--shiki-light:#383A42;--shiki-dark:#56B6C2;">=</span><span style="--shiki-light:#E45649;--shiki-dark:#E5C07B;"> ByteBuffer</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">allocateDirect</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(BUFFER);</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="非直接缓存区和缓存区" tabindex="-1"><a class="header-anchor" href="#非直接缓存区和缓存区"><span>非直接缓存区和缓存区</span></a></h2><p>原来采用BIO的架构，我们需要从用户态切换成内核态</p><figure><img src="'+t+'" alt="image-20200709170907611" tabindex="0" loading="lazy"><figcaption>image-20200709170907611</figcaption></figure><p>NIO的方式使用了缓存区的概念</p><h2 id="存在的问题" tabindex="-1"><a class="header-anchor" href="#存在的问题"><span>存在的问题</span></a></h2><p>也可能导致outofMemoryError异常</p><p>由于直接内存在Java堆外，因此它的大小不会直接受限于-xmx指定的最大堆大小，但是系统内存是有限的，Java堆和直接内存的总和依然受限于操作系统能给出的最大内存。 缺点</p><ul><li>分配回收成本较高</li><li>不受JVM内存回收管理</li></ul><p>直接内存大小可以通过MaxDirectMemorySize设置</p><p>如果不指定，默认与堆的最大值-xmx参数值一致</p><figure><img src="'+n+'" alt="image-20200709230647277" tabindex="0" loading="lazy"><figcaption>image-20200709230647277</figcaption></figure>',19)],r={},h=(0,e(66262).A)(r,[["render",function(i,a){return(0,s.uX)(),(0,s.CE)("div",null,l)}]]),p=JSON.parse('{"path":"/study-notes/JVM/Memory-GC/Direct-Memory/","title":"直接内存","lang":"zh-CN","frontmatter":{"title":"直接内存","date":"2023-03-18T00:00:00.000Z","description":"直接内存 Direct Memory 不是虚拟机运行时数据区的一部分，也不是《Java虚拟机规范》中定义的内存区域。 直接内存是在Java堆外的、直接向系统申请的内存区间。 来源于NIO，通过存在堆中的DirectByteBuffer操作Native内存 通常，访问直接内存的速度会优于Java堆。即读写性能高。 因此出于性能考虑，读写频繁的场合可能会考...","head":[["meta",{"property":"og:url","content":"https://mister-hope.github.io/vuepress-theme-home/study-notes/JVM/Memory-GC/Direct-Memory/"}],["meta",{"property":"og:site_name","content":"撄宁的博客"}],["meta",{"property":"og:title","content":"直接内存"}],["meta",{"property":"og:description","content":"直接内存 Direct Memory 不是虚拟机运行时数据区的一部分，也不是《Java虚拟机规范》中定义的内存区域。 直接内存是在Java堆外的、直接向系统申请的内存区间。 来源于NIO，通过存在堆中的DirectByteBuffer操作Native内存 通常，访问直接内存的速度会优于Java堆。即读写性能高。 因此出于性能考虑，读写频繁的场合可能会考..."}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:locale","content":"zh-CN"}],["meta",{"property":"og:updated_time","content":"2024-08-11T14:34:32.000Z"}],["meta",{"property":"article:author","content":"樱宁"}],["meta",{"property":"article:published_time","content":"2023-03-18T00:00:00.000Z"}],["meta",{"property":"article:modified_time","content":"2024-08-11T14:34:32.000Z"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"直接内存\\",\\"image\\":[\\"\\"],\\"datePublished\\":\\"2023-03-18T00:00:00.000Z\\",\\"dateModified\\":\\"2024-08-11T14:34:32.000Z\\",\\"author\\":[{\\"@type\\":\\"Person\\",\\"name\\":\\"樱宁\\",\\"url\\":\\"https://mister-hope.com\\"}]}"]]},"headers":[{"level":2,"title":"非直接缓存区和缓存区","slug":"非直接缓存区和缓存区","link":"#非直接缓存区和缓存区","children":[]},{"level":2,"title":"存在的问题","slug":"存在的问题","link":"#存在的问题","children":[]}],"git":{"createdTime":1723381883000,"updatedTime":1723386872000,"contributors":[{"name":"jiang","email":"948742327@qq.com","commits":3}]},"readingTime":{"minutes":1.23,"words":370},"filePathRelative":"study-notes/JVM/Memory-GC/Direct-Memory/README.md","localizedDate":"2023年3月18日","excerpt":"\\n<p>不是虚拟机运行时数据区的一部分，也不是《Java虚拟机规范》中定义的内存区域。</p>\\n<p>直接内存是在Java堆外的、直接向系统申请的内存区间。</p>\\n<p>来源于NIO，通过存在堆中的DirectByteBuffer操作Native内存</p>\\n<p>通常，访问直接内存的速度会优于Java堆。即读写性能高。</p>\\n<ul>\\n<li>因此出于性能考虑，读写频繁的场合可能会考虑使用直接内存。</li>\\n<li>Java的NIO库允许Java程序使用直接内存，用于数据缓冲区</li>\\n</ul>\\n<p>使用下列代码，直接分配本地内存空间</p>\\n<div class=\\"language-java line-numbers-mode\\" data-highlighter=\\"shiki\\" data-ext=\\"java\\" data-title=\\"java\\" style=\\"--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34\\"><pre class=\\"shiki shiki-themes one-light one-dark-pro vp-code\\"><code><span class=\\"line\\"><span style=\\"--shiki-light:#A626A4;--shiki-dark:#C678DD\\">int</span><span style=\\"--shiki-light:#E45649;--shiki-dark:#E06C75\\"> BUFFER </span><span style=\\"--shiki-light:#383A42;--shiki-dark:#56B6C2\\">=</span><span style=\\"--shiki-light:#986801;--shiki-dark:#D19A66\\"> 1024</span><span style=\\"--shiki-light:#383A42;--shiki-dark:#56B6C2\\">*</span><span style=\\"--shiki-light:#986801;--shiki-dark:#D19A66\\">1024</span><span style=\\"--shiki-light:#383A42;--shiki-dark:#56B6C2\\">*</span><span style=\\"--shiki-light:#986801;--shiki-dark:#D19A66\\">1024</span><span style=\\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\\">;</span><span style=\\"--shiki-light:#A0A1A7;--shiki-dark:#7F848E;--shiki-light-font-style:italic;--shiki-dark-font-style:italic\\"> // 1GB</span></span>\\n<span class=\\"line\\"><span style=\\"--shiki-light:#C18401;--shiki-dark:#E5C07B\\">ByteBuffer</span><span style=\\"--shiki-light:#E45649;--shiki-dark:#E06C75\\"> byteBuffer </span><span style=\\"--shiki-light:#383A42;--shiki-dark:#56B6C2\\">=</span><span style=\\"--shiki-light:#E45649;--shiki-dark:#E5C07B\\"> ByteBuffer</span><span style=\\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\\">.</span><span style=\\"--shiki-light:#4078F2;--shiki-dark:#61AFEF\\">allocateDirect</span><span style=\\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\\">(BUFFER);</span></span></code></pre>\\n<div class=\\"line-numbers\\" aria-hidden=\\"true\\" style=\\"counter-reset:line-number 0\\"><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div></div></div>","autoDesc":true}')}}]);