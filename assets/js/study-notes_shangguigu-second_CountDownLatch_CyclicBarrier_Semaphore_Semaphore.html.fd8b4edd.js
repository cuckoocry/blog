"use strict";(self.webpackChunkblogs2=self.webpackChunkblogs2||[]).push([[1220],{66262:(s,n)=>{n.A=(s,n)=>{const a=s.__vccOpts||s;for(const[s,e]of n)a[s]=e;return a}},11754:(s,n,a)=>{a.r(n),a.d(n,{comp:()=>p,data:()=>r});var e=a(20641);const i=[(0,e.Fv)('<h2 id="概念" tabindex="-1"><a class="header-anchor" href="#概念"><span>概念</span></a></h2><p>信号量主要用于两个目的</p><ul><li>一个是用于共享资源的互斥使用</li><li>另一个用于并发线程数的控制</li></ul><h2 id="代码" tabindex="-1"><a class="header-anchor" href="#代码"><span>代码</span></a></h2><p>我们模拟一个抢车位的场景，假设一共有6个车，3个停车位</p><p>那么我们首先需要定义信号量为3，也就是3个停车位</p><div class="language- line-numbers-mode" data-highlighter="shiki" data-ext="" data-title="" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span>/**</span></span>\n<span class="line"><span>* 初始化一个信号量为3，默认是false 非公平锁， 模拟3个停车位</span></span>\n<span class="line"><span>*/</span></span>\n<span class="line"><span>Semaphore semaphore = new Semaphore(3, false);</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>然后我们模拟6辆车同时并发抢占停车位，但第一个车辆抢占到停车位后，信号量需要减1</p><div class="language- line-numbers-mode" data-highlighter="shiki" data-ext="" data-title="" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span>// 代表一辆车，已经占用了该车位</span></span>\n<span class="line"><span>semaphore.acquire(); // 抢占</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div></div></div><p>同时车辆假设需要等待3秒后，释放信号量</p><div class="language- line-numbers-mode" data-highlighter="shiki" data-ext="" data-title="" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span>// 每个车停3秒</span></span>\n<span class="line"><span>try {</span></span>\n<span class="line"><span>\tTimeUnit.SECONDS.sleep(3);</span></span>\n<span class="line"><span>} catch (InterruptedException e) {</span></span>\n<span class="line"><span>\te.printStackTrace();</span></span>\n<span class="line"><span>}</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>最后车辆离开，释放信号量</p><div class="language- line-numbers-mode" data-highlighter="shiki" data-ext="" data-title="" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span>// 释放停车位</span></span>\n<span class="line"><span>semaphore.release();</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div></div></div><p>完整代码</p><div class="language- line-numbers-mode" data-highlighter="shiki" data-ext="" data-title="" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span>/**</span></span>\n<span class="line"><span> * 信号量Demo</span></span>\n<span class="line"><span> * @author: 阿飞</span></span>\n<span class="line"><span> * @create: 2020-03-16-15:01</span></span>\n<span class="line"><span> */</span></span>\n<span class="line"><span>public class SemaphoreDemo {</span></span>\n<span class="line"><span></span></span>\n<span class="line"><span>    public static void main(String[] args) {</span></span>\n<span class="line"><span></span></span>\n<span class="line"><span>        /**</span></span>\n<span class="line"><span>         * 初始化一个信号量为3，默认是false 非公平锁， 模拟3个停车位</span></span>\n<span class="line"><span>         */</span></span>\n<span class="line"><span>        Semaphore semaphore = new Semaphore(3, false);</span></span>\n<span class="line"><span></span></span>\n<span class="line"><span>        // 模拟6部车</span></span>\n<span class="line"><span>        for (int i = 0; i &lt; 6; i++) {</span></span>\n<span class="line"><span>            new Thread(() -&gt; {</span></span>\n<span class="line"><span>                try {</span></span>\n<span class="line"><span>                    // 代表一辆车，已经占用了该车位</span></span>\n<span class="line"><span>                    semaphore.acquire(); // 抢占</span></span>\n<span class="line"><span></span></span>\n<span class="line"><span>                    System.out.println(Thread.currentThread().getName() + &quot;\\t 抢到车位&quot;);</span></span>\n<span class="line"><span></span></span>\n<span class="line"><span>                    // 每个车停3秒</span></span>\n<span class="line"><span>                    try {</span></span>\n<span class="line"><span>                        TimeUnit.SECONDS.sleep(3);</span></span>\n<span class="line"><span>                    } catch (InterruptedException e) {</span></span>\n<span class="line"><span>                        e.printStackTrace();</span></span>\n<span class="line"><span>                    }</span></span>\n<span class="line"><span></span></span>\n<span class="line"><span>                    System.out.println(Thread.currentThread().getName() + &quot;\\t 离开车位&quot;);</span></span>\n<span class="line"><span></span></span>\n<span class="line"><span>                } catch (InterruptedException e) {</span></span>\n<span class="line"><span>                    e.printStackTrace();</span></span>\n<span class="line"><span>                } finally {</span></span>\n<span class="line"><span>                    // 释放停车位</span></span>\n<span class="line"><span>                    semaphore.release();</span></span>\n<span class="line"><span>                }</span></span>\n<span class="line"><span>            }, String.valueOf(i)).start();</span></span>\n<span class="line"><span>        }</span></span>\n<span class="line"><span>    }</span></span>\n<span class="line"><span>}</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>运行结果</p><div class="language- line-numbers-mode" data-highlighter="shiki" data-ext="" data-title="" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span>0\t 抢到车位</span></span>\n<span class="line"><span>2\t 抢到车位</span></span>\n<span class="line"><span>1\t 抢到车位</span></span>\n<span class="line"><span>2\t 离开车位</span></span>\n<span class="line"><span>1\t 离开车位</span></span>\n<span class="line"><span>3\t 抢到车位</span></span>\n<span class="line"><span>0\t 离开车位</span></span>\n<span class="line"><span>4\t 抢到车位</span></span>\n<span class="line"><span>5\t 抢到车位</span></span>\n<span class="line"><span>4\t 离开车位</span></span>\n<span class="line"><span>3\t 离开车位</span></span>\n<span class="line"><span>5\t 离开车位</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>看运行结果能够发现，0 2 1 车辆首先抢占到了停车位，然后等待3秒后，离开，然后后面 3 4 5 又抢到了车位</p>',18)],l={},p=(0,a(66262).A)(l,[["render",function(s,n){return(0,e.uX)(),(0,e.CE)("div",null,i)}]]),r=JSON.parse('{"path":"/study-notes/shangguigu-second/CountDownLatch_CyclicBarrier_Semaphore/Semaphore.html","title":"Semaphore","lang":"zh-CN","frontmatter":{"title":"Semaphore","date":"2023-03-18T00:00:00.000Z","tags":["Semaphore"],"category":["学习笔记"],"description":"概念 信号量主要用于两个目的 一个是用于共享资源的互斥使用 另一个用于并发线程数的控制 代码 我们模拟一个抢车位的场景，假设一共有6个车，3个停车位 那么我们首先需要定义信号量为3，也就是3个停车位 然后我们模拟6辆车同时并发抢占停车位，但第一个车辆抢占到停车位后，信号量需要减1 同时车辆假设需要等待3秒后，释放信号量 最后车辆离开，释放信号量 完整代...","head":[["meta",{"property":"og:url","content":"https://mister-hope.github.io/study-notes/shangguigu-second/CountDownLatch_CyclicBarrier_Semaphore/Semaphore.html"}],["meta",{"property":"og:site_name","content":"撄宁的博客"}],["meta",{"property":"og:title","content":"Semaphore"}],["meta",{"property":"og:description","content":"概念 信号量主要用于两个目的 一个是用于共享资源的互斥使用 另一个用于并发线程数的控制 代码 我们模拟一个抢车位的场景，假设一共有6个车，3个停车位 那么我们首先需要定义信号量为3，也就是3个停车位 然后我们模拟6辆车同时并发抢占停车位，但第一个车辆抢占到停车位后，信号量需要减1 同时车辆假设需要等待3秒后，释放信号量 最后车辆离开，释放信号量 完整代..."}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:locale","content":"zh-CN"}],["meta",{"property":"og:updated_time","content":"2024-07-27T14:05:04.000Z"}],["meta",{"property":"article:author","content":"樱宁"}],["meta",{"property":"article:tag","content":"Semaphore"}],["meta",{"property":"article:published_time","content":"2023-03-18T00:00:00.000Z"}],["meta",{"property":"article:modified_time","content":"2024-07-27T14:05:04.000Z"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"Semaphore\\",\\"image\\":[\\"\\"],\\"datePublished\\":\\"2023-03-18T00:00:00.000Z\\",\\"dateModified\\":\\"2024-07-27T14:05:04.000Z\\",\\"author\\":[{\\"@type\\":\\"Person\\",\\"name\\":\\"樱宁\\",\\"url\\":\\"https://mister-hope.com\\"}]}"]]},"headers":[{"level":2,"title":"概念","slug":"概念","link":"#概念","children":[]},{"level":2,"title":"代码","slug":"代码","link":"#代码","children":[]}],"git":{"createdTime":1722089104000,"updatedTime":1722089104000,"contributors":[{"name":"jiang","email":"948742327@qq.com","commits":1}]},"readingTime":{"minutes":1.64,"words":491},"filePathRelative":"study-notes/shangguigu-second/CountDownLatch_CyclicBarrier_Semaphore/Semaphore.md","localizedDate":"2023年3月18日","excerpt":"<h2>概念</h2>\\n<p>信号量主要用于两个目的</p>\\n<ul>\\n<li>一个是用于共享资源的互斥使用</li>\\n<li>另一个用于并发线程数的控制</li>\\n</ul>\\n<h2>代码</h2>\\n<p>我们模拟一个抢车位的场景，假设一共有6个车，3个停车位</p>\\n<p>那么我们首先需要定义信号量为3，也就是3个停车位</p>\\n<div class=\\"language- line-numbers-mode\\" data-highlighter=\\"shiki\\" data-ext=\\"\\" data-title=\\"\\" style=\\"--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34\\"><pre class=\\"shiki shiki-themes one-light one-dark-pro vp-code\\"><code><span class=\\"line\\"><span>/**</span></span>\\n<span class=\\"line\\"><span>* 初始化一个信号量为3，默认是false 非公平锁， 模拟3个停车位</span></span>\\n<span class=\\"line\\"><span>*/</span></span>\\n<span class=\\"line\\"><span>Semaphore semaphore = new Semaphore(3, false);</span></span></code></pre>\\n<div class=\\"line-numbers\\" aria-hidden=\\"true\\" style=\\"counter-reset:line-number 0\\"><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div></div></div>","autoDesc":true}')}}]);