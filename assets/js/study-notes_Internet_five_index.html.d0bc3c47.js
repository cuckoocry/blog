"use strict";(self.webpackChunkblogs2=self.webpackChunkblogs2||[]).push([[1733],{66262:(e,a)=>{a.A=(e,a)=>{const i=e.__vccOpts||e;for(const[e,l]of a)i[e]=l;return i}},53464:(e,a,i)=>{i.r(a),i.d(a,{comp:()=>o,data:()=>u});var l=i(20641);const t=i.p+"assets/img/image-20200627162011689.6076fcaf.png",n=i.p+"assets/img/image-20200627162616750.b5b77f85.png",p=i.p+"assets/img/image-20200627162720414.238e8fe0.png",r=i.p+"assets/img/image-20200627163044943.1f97f5ee.png",s=i.p+"assets/img/image-20200627164926128.5f1222f8.png",h=i.p+"assets/img/image-20200627164944182.bca0a26b.png",c=i.p+"assets/img/image-20200627181830249.ff016811.png",d=[(0,l.Fv)('<h2 id="链路和数据链路" tabindex="-1"><a class="header-anchor" href="#链路和数据链路"><span>链路和数据链路</span></a></h2><h3 id="链路" tabindex="-1"><a class="header-anchor" href="#链路"><span>链路</span></a></h3><p>一条点到点的物理线路段，中间没有其它的交换节点，一条链路只是一条通路的一个组成部分</p><h3 id="数据链路" tabindex="-1"><a class="header-anchor" href="#数据链路"><span>数据链路</span></a></h3><p>除物理链路外，还必须有通信协议来控制这些数据的传输，若把实现这些协议的硬件和软件加到链路上，就构成了数据链路。现常见的方法就是使用适配器（网卡）来实现这些协议的硬件和软件。</p><p>数据链路层相当于一个管道，传输的是一条条的帧信息</p><figure><img src="'+t+'" alt="image-20200627162011689" tabindex="0" loading="lazy"><figcaption>image-20200627162011689</figcaption></figure><h2 id="数据链路层的主要功能" tabindex="-1"><a class="header-anchor" href="#数据链路层的主要功能"><span>数据链路层的主要功能</span></a></h2><ul><li>封装成帧</li><li>透明传输</li><li>差错控制</li></ul><h2 id="封装成帧" tabindex="-1"><a class="header-anchor" href="#封装成帧"><span>封装成帧</span></a></h2><p>封装成帧就是一段数据的前后分别添加首部和尾部，然后构成一个帧，确定帧的界限</p><p>首部和尾部的一个重要作用就是进行帧定界</p><figure><img src="'+n+'" alt="image-20200627162616750" tabindex="0" loading="lazy"><figcaption>image-20200627162616750</figcaption></figure><p>下图是使用控制字符进行帧定界的方法举例</p><figure><img src="'+p+'" alt="image-20200627162720414" tabindex="0" loading="lazy"><figcaption>image-20200627162720414</figcaption></figure><p>若帧数据部分有 开始标记 和 结束标记怎么办？</p><p>发送端的数据链路层在数据中出现控制字符 “SOH” 或 “EOT”的前面插入一个转移字符 “ESC”</p><p>这个时候就需要用到字节填充 或 字符填充，也就是接收端的数据链路层在数据送往网络层之间删除插入的转义字符。</p><p>如果转移字符也出现在数据中，那么应该在转义字符的前面在插入一个转义字符。当接收端连续收到两个转义字符的时候，就删除掉前面的一个</p><figure><img src="'+r+'" alt="image-20200627163044943" tabindex="0" loading="lazy"><figcaption>image-20200627163044943</figcaption></figure><h2 id="差错控制" tabindex="-1"><a class="header-anchor" href="#差错控制"><span>差错控制</span></a></h2><p>传输的过程中可能会产生比特差错,1可能变成0，而0也可能变成1。</p><p>在一段时间内，传输错误的比特占所传输比特总数的比率称为 误码率 BER（Bit error Rate），其中误码率和信噪比有很大的关系。</p><h3 id="cpc循环冗余检验" tabindex="-1"><a class="header-anchor" href="#cpc循环冗余检验"><span>CPC循环冗余检验</span></a></h3><p>CRC是一种常用的检错方法，而FCS是添加在数据后面的冗余码</p><p>FCS可以用CRC这种方法得出，并且CRC是用来获取FCS的唯一方法</p><figure><img src="'+s+'" alt="image-20200627164926128" tabindex="0" loading="lazy"><figcaption>image-20200627164926128</figcaption></figure><p>我们得到 FCS后，将其拼接到我们传送数据的末端</p><figure><img src="'+h+'" alt="image-20200627164944182" tabindex="0" loading="lazy"><figcaption>image-20200627164944182</figcaption></figure><p>接收端对收到的每一帧进行CRC检验</p><ul><li>若得出的余数 R = 0，则判定这个帧没有差错，就接受</li><li>若余数不为0，则判定有差错，丢弃</li></ul><p>特点</p><ul><li>这种差错检测的方法不能确定是哪一位出现了问题</li><li>只需使用足够的余数，就能检测出来</li></ul><h2 id="两种情况的数据链路" tabindex="-1"><a class="header-anchor" href="#两种情况的数据链路"><span>两种情况的数据链路</span></a></h2><ul><li>点到点：PPP协议（全世界使用最多的），只实现无差错接收</li><li>零比特填充：5个连续的1，后面添加一个0</li></ul><h2 id="局域网的拓扑结构" tabindex="-1"><a class="header-anchor" href="#局域网的拓扑结构"><span>局域网的拓扑结构</span></a></h2><figure><img src="'+c+'" alt="image-20200627181830249" tabindex="0" loading="lazy"><figcaption>image-20200627181830249</figcaption></figure><h2 id="csma-cd" tabindex="-1"><a class="header-anchor" href="#csma-cd"><span>CSMA/CD</span></a></h2><ul><li>多点接入：表示许多计算机以多点接入的方式连接在一根总线上</li><li>载波监听：是指每一站在发送数据之前，先检测一下总线上是否有其它数据</li></ul><h2 id="碰撞检测" tabindex="-1"><a class="header-anchor" href="#碰撞检测"><span>碰撞检测</span></a></h2><p>碰撞检测就是计算机发送数据时，检测链路上信号电压的大小</p><p>使用CSMA/CD协议的以太网不能进行全双工通信，而只能进行双向交替通信（半双工通信），每个站发送数据之后一小段时间，可能会遭遇碰撞的可能性。</p><p>发生碰撞的站停止发送数据后，需要延迟一个随机时间 才能再发送数据，确定基本退避时间，一般是取2T，当重传16次后，仍然不成功，即丢弃该帧，并向高层报告。</p><h2 id="以太网" tabindex="-1"><a class="header-anchor" href="#以太网"><span>以太网</span></a></h2><p>只要满足载波监听，多路访问的都是以太网。</p><p>同时局域网数据链路层拆分成了两个子层</p><ul><li>逻辑链路控制LLC子层</li><li>媒体接入控制MAC子层，现在的网卡只有MAC子层</li></ul><p>以太网提供的服务是不可靠的交付，即尽最大努力的交付。</p><h2 id="信道利用率" tabindex="-1"><a class="header-anchor" href="#信道利用率"><span>信道利用率</span></a></h2><p>$$ \\partial=\\frac{\\tau}{T_{0}} $$</p><h2 id="流量控制协议" tabindex="-1"><a class="header-anchor" href="#流量控制协议"><span>流量控制协议</span></a></h2><h3 id="单工停等协议" tabindex="-1"><a class="header-anchor" href="#单工停等协议"><span>单工停等协议</span></a></h3><p>stop and wait，链路不出错，但有可能出现流量不匹配的情况，发送方每发一帧停下来，每收到一帧后，上交网络层，再发一个确认给发送方，表示收到。发送方收到确认在发送下一个。</p><h3 id="连续arq" tabindex="-1"><a class="header-anchor" href="#连续arq"><span>连续ARQ</span></a></h3><p>自动请求重发协议。</p><ul><li>发送端：在发送完一个数据帧后，不是停下来等待应答帧，而是可以连接再发送下面的数据帧。如果这时收到了接收端发来的确认帧，那么还可以接着再发送下面的数据帧。如果超时时间到，仍然没有收到相应的确认帧，则重新从这个帧开始重传。（go back N ARQ）</li><li>接收端：连续接收帧，当接收到一个坏帧时，简单丢弃这个帧和这个帧以后的所有帧，让他们在发送端超时，这道收到这个帧为止。</li></ul><h3 id="停止等待协议和连续arq协议的问题" tabindex="-1"><a class="header-anchor" href="#停止等待协议和连续arq协议的问题"><span>停止等待协议和连续ARQ协议的问题</span></a></h3><h4 id="停止等待协议" tabindex="-1"><a class="header-anchor" href="#停止等待协议"><span>停止等待协议</span></a></h4><p>发送 - 停止 - 等待，效率较低，当传播时间比发送时间大得多时，性能变得不可接受</p><h4 id="连续arq协议" tabindex="-1"><a class="header-anchor" href="#连续arq协议"><span>连续ARQ协议</span></a></h4><ul><li>未经确定的帧一次传送过多，如果出错，重传的代价太大</li><li>序号站的位数过多，影响效率，一次能传送1024个帧，10位编号</li><li>实际协议中，一次连续传输的帧的个数是有限的</li></ul><h3 id="滑动窗口协议" tabindex="-1"><a class="header-anchor" href="#滑动窗口协议"><span>滑动窗口协议</span></a></h3><p>它是停止等待协议 和 连续ARQ协议的折中</p><p>一次发送为确定的帧的个数是有限的</p><ul><li>发送端：一次发送未经确定的帧是收到发送窗口的控制的，只有落在发送窗口的帧才是可以发送的</li><li>接收端：只有落在接收窗口的帧才是可以接收的。</li></ul><p>出现差错的处理办法</p><p>一段收到出错的帧后进行丢弃，不发送确定报文，让发送方超时重发。对后面陆续到达的正确的帧进行同样的处理办法</p><ul><li>当w<sub>r</sub> = 1时 <ul><li>接收方：全部丢弃（drop），链路层只按顺序接收帧</li><li>发送方：2号帧超时后，从2号帧开始发送</li><li>回退n帧，（go back N protocol）</li></ul></li><li>当 w<sub>r</sub> &gt; 1时 <ul><li>接收方：陆续接收出错的后续各个帧，但不提交给网络层，知道接收到2号帧以后，加上以后存储的各帧，按顺序交给网络层</li><li>发送方：2号帧超时后，发完2号帧之后，从第6号帧开始，选择性重传</li></ul></li></ul>',68)],g={},o=(0,i(66262).A)(g,[["render",function(e,a){return(0,l.uX)(),(0,l.CE)("div",null,d)}]]),u=JSON.parse('{"path":"/study-notes/Internet/five/","title":"数据链路层","lang":"zh-CN","frontmatter":{"title":"数据链路层","date":"2023-03-12T00:00:00.000Z","category":["计算机网络"],"tag":["计算机网络"],"description":"链路和数据链路 链路 一条点到点的物理线路段，中间没有其它的交换节点，一条链路只是一条通路的一个组成部分 数据链路 除物理链路外，还必须有通信协议来控制这些数据的传输，若把实现这些协议的硬件和软件加到链路上，就构成了数据链路。现常见的方法就是使用适配器（网卡）来实现这些协议的硬件和软件。 数据链路层相当于一个管道，传输的是一条条的帧信息 image-2...","head":[["meta",{"property":"og:url","content":"https://mister-hope.github.io/vuepress-theme-home/study-notes/Internet/five/"}],["meta",{"property":"og:site_name","content":"撄宁的博客"}],["meta",{"property":"og:title","content":"数据链路层"}],["meta",{"property":"og:description","content":"链路和数据链路 链路 一条点到点的物理线路段，中间没有其它的交换节点，一条链路只是一条通路的一个组成部分 数据链路 除物理链路外，还必须有通信协议来控制这些数据的传输，若把实现这些协议的硬件和软件加到链路上，就构成了数据链路。现常见的方法就是使用适配器（网卡）来实现这些协议的硬件和软件。 数据链路层相当于一个管道，传输的是一条条的帧信息 image-2..."}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:locale","content":"zh-CN"}],["meta",{"property":"og:updated_time","content":"2024-07-27T15:11:57.000Z"}],["meta",{"property":"article:author","content":"樱宁"}],["meta",{"property":"article:tag","content":"计算机网络"}],["meta",{"property":"article:published_time","content":"2023-03-12T00:00:00.000Z"}],["meta",{"property":"article:modified_time","content":"2024-07-27T15:11:57.000Z"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"数据链路层\\",\\"image\\":[\\"\\"],\\"datePublished\\":\\"2023-03-12T00:00:00.000Z\\",\\"dateModified\\":\\"2024-07-27T15:11:57.000Z\\",\\"author\\":[{\\"@type\\":\\"Person\\",\\"name\\":\\"樱宁\\",\\"url\\":\\"https://mister-hope.com\\"}]}"]]},"headers":[{"level":2,"title":"链路和数据链路","slug":"链路和数据链路","link":"#链路和数据链路","children":[{"level":3,"title":"链路","slug":"链路","link":"#链路","children":[]},{"level":3,"title":"数据链路","slug":"数据链路","link":"#数据链路","children":[]}]},{"level":2,"title":"数据链路层的主要功能","slug":"数据链路层的主要功能","link":"#数据链路层的主要功能","children":[]},{"level":2,"title":"封装成帧","slug":"封装成帧","link":"#封装成帧","children":[]},{"level":2,"title":"差错控制","slug":"差错控制","link":"#差错控制","children":[{"level":3,"title":"CPC循环冗余检验","slug":"cpc循环冗余检验","link":"#cpc循环冗余检验","children":[]}]},{"level":2,"title":"两种情况的数据链路","slug":"两种情况的数据链路","link":"#两种情况的数据链路","children":[]},{"level":2,"title":"局域网的拓扑结构","slug":"局域网的拓扑结构","link":"#局域网的拓扑结构","children":[]},{"level":2,"title":"CSMA/CD","slug":"csma-cd","link":"#csma-cd","children":[]},{"level":2,"title":"碰撞检测","slug":"碰撞检测","link":"#碰撞检测","children":[]},{"level":2,"title":"以太网","slug":"以太网","link":"#以太网","children":[]},{"level":2,"title":"信道利用率","slug":"信道利用率","link":"#信道利用率","children":[]},{"level":2,"title":"流量控制协议","slug":"流量控制协议","link":"#流量控制协议","children":[{"level":3,"title":"单工停等协议","slug":"单工停等协议","link":"#单工停等协议","children":[]},{"level":3,"title":"连续ARQ","slug":"连续arq","link":"#连续arq","children":[]},{"level":3,"title":"停止等待协议和连续ARQ协议的问题","slug":"停止等待协议和连续arq协议的问题","link":"#停止等待协议和连续arq协议的问题","children":[]},{"level":3,"title":"滑动窗口协议","slug":"滑动窗口协议","link":"#滑动窗口协议","children":[]}]}],"git":{"createdTime":1722093117000,"updatedTime":1722093117000,"contributors":[{"name":"jiang","email":"948742327@qq.com","commits":1}]},"readingTime":{"minutes":5.83,"words":1750},"filePathRelative":"study-notes/Internet/five/README.md","localizedDate":"2023年3月12日","excerpt":"<h2>链路和数据链路</h2>\\n<h3>链路</h3>\\n<p>一条点到点的物理线路段，中间没有其它的交换节点，一条链路只是一条通路的一个组成部分</p>\\n<h3>数据链路</h3>\\n<p>除物理链路外，还必须有通信协议来控制这些数据的传输，若把实现这些协议的硬件和软件加到链路上，就构成了数据链路。现常见的方法就是使用适配器（网卡）来实现这些协议的硬件和软件。</p>\\n<p>数据链路层相当于一个管道，传输的是一条条的帧信息</p>\\n<figure><figcaption>image-20200627162011689</figcaption></figure>\\n<h2>数据链路层的主要功能</h2>","autoDesc":true}')}}]);