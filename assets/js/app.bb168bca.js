"use strict";(self.webpackChunkblogs2=self.webpackChunkblogs2||[]).push([[3524],{2800:(s,i,n)=>{n.d(i,{A:()=>p});var a=n(20641),e=n(50953),t=n(62236),l=n(77017);const p=(0,a.pM)({__name:"BlogHero",setup:s=>(s,i)=>((0,a.uX)(),(0,a.Wv)((0,e.R1)(t.A),null,{bg:(0,a.k6)((()=>[(0,a.bF)((0,e.R1)(l.A))])),_:1}))})},61709:(s,i,n)=>{n.d(i,{l:()=>a});const a={category:{"/":{path:"/category/",map:{博客:{path:"/category/%E5%8D%9A%E5%AE%A2/",indexes:[0]},Python:{path:"/category/python/",indexes:[1]},作者:{path:"/category/%E4%BD%9C%E8%80%85/",indexes:[2]},使用指南:{path:"/category/%E4%BD%BF%E7%94%A8%E6%8C%87%E5%8D%97/",indexes:[3,4,5,6,7]},指南:{path:"/category/%E6%8C%87%E5%8D%97/",indexes:[8]},面试:{path:"/category/%E9%9D%A2%E8%AF%95/",indexes:[9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35]},面试指南:{path:"/category/%E9%9D%A2%E8%AF%95%E6%8C%87%E5%8D%97/",indexes:[36,37]},学习笔记:{path:"/category/%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/",indexes:[38,39,40]},樱桃:{path:"/category/%E6%A8%B1%E6%A1%83/",indexes:[41]},火龙果:{path:"/category/%E7%81%AB%E9%BE%99%E6%9E%9C/",indexes:[42]},水果:{path:"/category/%E6%B0%B4%E6%9E%9C/",indexes:[43,42]},草莓:{path:"/category/%E8%8D%89%E8%8E%93/",indexes:[43]},蔬菜:{path:"/category/%E8%94%AC%E8%8F%9C/",indexes:[44]},文件下载:{path:"/category/%E6%96%87%E4%BB%B6%E4%B8%8B%E8%BD%BD/",indexes:[45]},code:{path:"/category/code/",indexes:[46,47]},开发工具:{path:"/category/%E5%BC%80%E5%8F%91%E5%B7%A5%E5%85%B7/",indexes:[48]},IDEA:{path:"/category/idea/",indexes:[49,50]},代码实践:{path:"/category/%E4%BB%A3%E7%A0%81%E5%AE%9E%E8%B7%B5/",indexes:[51]},redisson:{path:"/category/redisson/",indexes:[52]},分布式锁:{path:"/category/%E5%88%86%E5%B8%83%E5%BC%8F%E9%94%81/",indexes:[52]},Vue系列:{path:"/category/vue%E7%B3%BB%E5%88%97/",indexes:[53,54]},web3:{path:"/category/web3/",indexes:[55]},计算机网络:{path:"/category/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BD%91%E7%BB%9C/",indexes:[56,57,58,59,60,61,62]},Redis:{path:"/category/redis/",indexes:[63]},中间件:{path:"/category/%E4%B8%AD%E9%97%B4%E4%BB%B6/",indexes:[64]},待完成学习:{path:"/category/%E5%BE%85%E5%AE%8C%E6%88%90%E5%AD%A6%E4%B9%A0/",indexes:[64]},黑马:{path:"/category/%E9%BB%91%E9%A9%AC/",indexes:[65,66,67,68,69,70]},JUC:{path:"/category/juc/",indexes:[71,72,73,74,75,76,77,78,79,80,81,82,83,84,85]},线程池:{path:"/category/%E7%BA%BF%E7%A8%8B%E6%B1%A0/",indexes:[86]},GitHub:{path:"/category/github/",indexes:[87]}}}},tag:{"/":{path:"/tag/",map:{禁用:{path:"/tag/%E7%A6%81%E7%94%A8/",indexes:[5]},加密:{path:"/tag/%E5%8A%A0%E5%AF%86/",indexes:[6]},布局:{path:"/tag/%E5%B8%83%E5%B1%80/",indexes:[8]},Markdown:{path:"/tag/markdown/",indexes:[7]},页面配置:{path:"/tag/%E9%A1%B5%E9%9D%A2%E9%85%8D%E7%BD%AE/",indexes:[3]},使用指南:{path:"/tag/%E4%BD%BF%E7%94%A8%E6%8C%87%E5%8D%97/",indexes:[3]},红:{path:"/tag/%E7%BA%A2/",indexes:[44,43,42,41]},小:{path:"/tag/%E5%B0%8F/",indexes:[43,41]},圆:{path:"/tag/%E5%9C%86/",indexes:[44,41]},大:{path:"/tag/%E5%A4%A7/",indexes:[42]},Git:{path:"/tag/git/",indexes:[48]},PDF文件合并:{path:"/tag/pdf%E6%96%87%E4%BB%B6%E5%90%88%E5%B9%B6/",indexes:[51]},redisson:{path:"/tag/redisson/",indexes:[52]},web3:{path:"/tag/web3/",indexes:[55]},计算机网络:{path:"/tag/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BD%91%E7%BB%9C/",indexes:[56,57,58,59,60,61,62]},Redis:{path:"/tag/redis/",indexes:[63]},RocketMQ:{path:"/tag/rocketmq/",indexes:[64]},SpringCloud:{path:"/tag/springcloud/",indexes:[88]},SpringBoot:{path:"/tag/springboot/",indexes:[9]},JVM:{path:"/tag/jvm/",indexes:[89,90,91,92,93]},JUC:{path:"/tag/juc/",indexes:[71,94,95,73,83,84,85]},CAS:{path:"/tag/cas/",indexes:[94,73]},ABA问题:{path:"/tag/aba%E9%97%AE%E9%A2%98/",indexes:[94]},Volatile:{path:"/tag/volatile/",indexes:[71,95,83,84,85]},BlockingQueue:{path:"/tag/blockingqueue/",indexes:[72]},CyclicBarrier:{path:"/tag/cyclicbarrier/",indexes:[96]},Semaphore:{path:"/tag/semaphore/",indexes:[97]},CountDownLatch:{path:"/tag/countdownlatch/",indexes:[98]},OOM:{path:"/tag/oom/",indexes:[74]},Java中的引用:{path:"/tag/java%E4%B8%AD%E7%9A%84%E5%BC%95%E7%94%A8/",indexes:[75]},死锁:{path:"/tag/%E6%AD%BB%E9%94%81/",indexes:[76,78,79,81]},垃圾收集器:{path:"/tag/%E5%9E%83%E5%9C%BE%E6%94%B6%E9%9B%86%E5%99%A8/",indexes:[77]},Linux诊断原因:{path:"/tag/linux%E8%AF%8A%E6%96%AD%E5%8E%9F%E5%9B%A0/",indexes:[80]},Synchronized:{path:"/tag/synchronized/",indexes:[82]},Lock:{path:"/tag/lock/",indexes:[82]},线程池:{path:"/tag/%E7%BA%BF%E7%A8%8B%E6%B1%A0/",indexes:[86]},GitHub:{path:"/tag/github/",indexes:[87]},锁:{path:"/tag/%E9%94%81/",indexes:[99,100,101,102,103,104]},AQS:{path:"/tag/aqs/",indexes:[105]},redis:{path:"/tag/redis/",indexes:[106,107]},spring:{path:"/tag/spring/",indexes:[108]}}}}}},94776:(s,i,n)=>{n.d(i,{M:()=>a});const a=["/about-the-blogs/about-blogs.html","/about-the-blogs/about-learn.html","/about-the-blogs/","/demo/page.html","/demo/","/demo/disable.html","/demo/encrypt.html","/demo/markdown.html","/demo/layout.html","/study-notes/spring-boot/","/study-notes/heima-java-bagu/JVM/","/study-notes/heima-java-bagu/Microservices/","/study-notes/heima-java-bagu/MySQL/","/study-notes/heima-java-bagu/MySQL/more.html","/study-notes/heima-java-bagu/Redis/","/study-notes/heima-java-bagu/Redis/more.html","/study-notes/heima-java-bagu/collection/","/study-notes/heima-java-bagu/collection/more.html","/study-notes/heima-java-bagu/enterprise-scenarios/design-patterns.html","/study-notes/heima-java-bagu/enterprise-scenarios/technical-scenarios.html","/study-notes/heima-java-bagu/frame/","/study-notes/heima-java-bagu/message-middleware/","/study-notes/heima-java-bagu/message-middleware/more.html","/study-notes/heima-java-bagu/frame/mybatis/","/study-notes/heima-java-bagu/frame/spring/","/interview-related/","/interview-related/java-thread.html","/interview-related/jvm.html","/interview-related/mybatis.html","/interview-related/mysql.html","/interview-related/network.html","/interview-related/redis.html","/interview-related/rocketMQ.html","/interview-related/spring.html","/study-notes/heima-java-bagu/concurrent-programming/","/study-notes/heima-java-bagu/concurrent-programming/more.html","/interview-related/collection.html","/interview-related/javase.html","/note-record/note.html","/note-record/","/study-notes/","/posts/cherry.html","/posts/dragonfruit.html","/posts/strawberry.html","/posts/tomato.html","/problem-record/HTTPInputStreamExample.html","/problem-record/miscellaneous-notes.html","/problem-record/delete-more-iif.html","/problem-record/github-tips.html","/problem-record/idea-template.html","/problem-record/idea-tool.html","/problem-record/merge-pdf.html","/problem-record/redission.html","/vue/advanced.html","/vue/basics.html","/web3/","/study-notes/Internet/","/study-notes/Internet/TCP/","/study-notes/Internet/five/","/study-notes/Internet/four/","/study-notes/Internet/http-state/","/study-notes/Internet/https-http/","/study-notes/Internet/one/","/study-notes/Redis/","/study-notes/RocketMQ/","/study-notes/heima-baodian/concurrency/","/study-notes/heima-baodian/framework/","/study-notes/heima-baodian/jvm/","/study-notes/heima-baodian/","/study-notes/heima-baodian/base/","/study-notes/heima-java-bagu/","/study-notes/shangguigu-second/volatile/one.html","/study-notes/shangguigu-second/BlockingQueue/","/study-notes/shangguigu-second/CAS/","/study-notes/shangguigu-second/JVM/five.html","/study-notes/shangguigu-second/JVM/four.html","/study-notes/shangguigu-second/JVM/one.html","/study-notes/shangguigu-second/JVM/six.html","/study-notes/shangguigu-second/JVM/three.html","/study-notes/shangguigu-second/JVM/two.html","/study-notes/shangguigu-second/Linux/","/study-notes/shangguigu-second/SiSuo/","/study-notes/shangguigu-second/Synchronized-Lock/","/study-notes/shangguigu-second/volatile/four.html","/study-notes/shangguigu-second/volatile/three.html","/study-notes/shangguigu-second/volatile/two.html","/study-notes/shangguigu-second/ThreadPool/","/study-notes/shangguigu-second/github/","/study-notes/SpringCloud/","/study-notes/JVM/Memory-GC/","/study-notes/JVM/Performance-Monitoring-Tuning/","/study-notes/JVM/Memory-GC/JVM-RuntimeDataAreas/","/study-notes/JVM/Performance-Monitoring-Tuning/GC-Log/","/study-notes/JVM/Bytecode-ClassLoading/Class-File-Structure/","/study-notes/shangguigu-second/ABA/","/study-notes/shangguigu-second/ArrayList/","/study-notes/shangguigu-second/CountDownLatch_CyclicBarrier_Semaphore/CyclicBarrier.html","/study-notes/shangguigu-second/CountDownLatch_CyclicBarrier_Semaphore/Semaphore.html","/study-notes/shangguigu-second/CountDownLatch_CyclicBarrier_Semaphore/countDownLatch.html","/study-notes/shangguigu-second/lock/five.html","/study-notes/shangguigu-second/lock/four.html","/study-notes/shangguigu-second/lock/one.html","/study-notes/shangguigu-second/lock/six.html","/study-notes/shangguigu-second/lock/three.html","/study-notes/shangguigu-second/lock/two.html","/study-notes/shangguigu-three/AQS/","/study-notes/shangguigu-three/Redis/","/study-notes/shangguigu-three/UUID/","/study-notes/shangguigu-three/Spring/","/intro.html","/problem-record/interview-transcripts.html","/study-notes/JVM/","/study-notes/shangguigu-three/await-signal.html","/study-notes/shangguigu-three/LockSupport/","/study-notes/shangguigu-three/WaitNotify/","/study-notes/JVM/Bytecode-ClassLoading/Bytecode-Instruction-Set/","/study-notes/JVM/Bytecode-ClassLoading/Class-Lifecycle/","/study-notes/JVM/Bytecode-ClassLoading/Class-Lifecycle2/","/study-notes/JVM/Memory-GC/Clas-Loading-Subsystem/","/study-notes/JVM/Memory-GC/Direct-Memory/","/study-notes/JVM/Memory-GC/Execution-Engine/","/study-notes/JVM/Memory-GC/GC-Overview/","/study-notes/JVM/Memory-GC/GC-Period/","/study-notes/JVM/Memory-GC/GC-Relevant-Algorithms/","/study-notes/JVM/Memory-GC/GC-Relevant-Overview/","/study-notes/JVM/Memory-GC/Heap/","/study-notes/JVM/Memory-GC/JVM-Stack/","/study-notes/JVM/Memory-GC/Java-Architecture/","/study-notes/JVM/Memory-GC/Method-Area/","/study-notes/JVM/Memory-GC/Native-Stack/","/study-notes/JVM/Memory-GC/Object-Instantiation/","/study-notes/JVM/Memory-GC/PCounter-Register/","/study-notes/JVM/Memory-GC/StringTable/","/study-notes/JVM/Performance-Monitoring-Tuning/Heap-Memory-Leak/","/study-notes/JVM/Performance-Monitoring-Tuning/JVM-Monitoring-Diagnostic-Tools/","/study-notes/JVM/Performance-Monitoring-Tuning/JVM-Monitoring-Diagnostic-Tools-GUI/","/study-notes/JVM/Performance-Monitoring-Tuning/JVM-Overview/","/study-notes/JVM/Performance-Monitoring-Tuning/JVM-Runtime-Parameters/","/study-notes/JVM/Performance-Monitoring-Tuning/OQL/","/study-notes/JVM/Bytecode-ClassLoading/","/study-notes/shangguigu-three/","/study-notes/shangguigu-three/one.html","/study-notes/shangguigu-three/two.html","/study-notes/shangguigu-three/ReentrantLock/","/problem-record/tool.html"]},53781:(s,i,n)=>{n.d(i,{U:()=>a});const a={article:{"/":{path:"/article/",indexes:[44,3,38,55,65,66,67,68,69,39,63,9,70,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,48,53,54,109,0,1,2,4,5,6,8,7,25,36,26,37,27,28,29,30,31,32,33,40,110,46,52,34,35,45,51,64,86,111,112,89,90,96,97,98,99,100,101,102,105,113,114,115,116,117,118,119,120,121,122,123,124,125,91,126,127,128,129,130,131,132,92,133,134,135,136,137,138,88,139,71,93,56,57,58,59,60,61,62,140,141,142,94,95,72,73,74,75,76,77,78,79,80,81,82,87,103,104,83,84,85,106,143,108,107,47,49,50,144,43,42,41]}},star:{"/":{path:"/star/",indexes:[44,3]}},timeline:{"/":{path:"/timeline/",indexes:[38,55,65,66,67,68,69,39,63,9,70,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,48,53,54,109,0,1,2,4,5,6,8,7,25,36,26,37,27,28,29,30,31,32,33,40,110,46,52,34,35,45,51,64,86,111,112,89,90,96,97,98,99,100,101,102,105,113,114,115,116,117,118,119,120,121,122,123,124,125,91,126,127,128,129,130,131,132,92,133,134,135,136,137,138,88,139,71,93,56,57,58,59,60,61,62,140,141,142,94,95,72,73,74,75,76,77,78,79,80,81,82,87,103,104,83,84,85,106,143,108,107,47,49,44,50,144,43,42,41,3]}}}},33600:(s,i,n)=>{n.d(i,{B:()=>L});var a={};n.r(a);var e={};n.r(e);var t={};n.r(t),n.d(t,{default:()=>c});var l={};n.r(l),n.d(l,{default:()=>w});var p={};n.r(p),n.d(p,{default:()=>I});var h=n(8278),r=n(23812),d=n(13073),k=n(79403),o=n(70596),g=n(38831);const c=(0,h.re)({enhance:({app:s})=>{(0,r.L4)("FontIcon")||s.component("FontIcon",k.A),(0,r.L4)("Badge")||s.component("Badge",o.A),(0,r.L4)("VPCard")||s.component("VPCard",g.A)},setup:()=>{(0,d.r9V)("https://cdn.jsdelivr.net/npm/@fortawesome/fontawesome-free@6/js/brands.min.js",(()=>{}),{attrs:{"data-auto-replace-svg":"nest"}}),(0,d.r9V)("https://cdn.jsdelivr.net/npm/@fortawesome/fontawesome-free@6/js/solid.min.js",(()=>{}),{attrs:{"data-auto-replace-svg":"nest"}}),(0,d.r9V)("https://cdn.jsdelivr.net/npm/@fortawesome/fontawesome-free@6/js/fontawesome.min.js",(()=>{}),{attrs:{"data-auto-replace-svg":"nest"}})},rootComponents:[]});var B=n(26358),y=n(99588),u=n(80355),A=n(31599),m=n(45496),v=n(80457),b=n(47152),E=n(81219),F=n(83027),C=n(32763),f=n(69589);const w=(0,h.re)({enhance:({app:s})=>{s.component("CodeTabs",b.A),s.component("CodeDemo",E.A),s.component("MdDemo",F.A),s.component("Tabs",f.A)},setup:()=>{(0,C.p)()}});var M=n(23004),J=n(29402),S=n(38465),D=n(20641),V=n(47729),x=n(43974);(0,S.M_)((s=>{const i=s.t,n=!1!==s.I,a=s.i;return n?{title:i,content:a?()=>[(0,D.h)(J.GB,{icon:a}),i]:null,order:s.O,index:s.I}:null}));const I=(0,h.re)({enhance:({app:s,router:i})=>{const{scrollBehavior:n}=i.options;i.options.scrollBehavior=async(...s)=>(await J.lE.wait(),n(...s)),(0,J.fk)(s),s.component("HopeIcon",J.GB),s.component("BloggerInfo",V.tI),s.component("SocialMedias",V.rS),s.component("GlobalEncrypt",x.J),s.component("LocalEncrypt",x.n)},setup:()=>{(0,J.PV)(),(0,J.i$)(),(0,V.su)()},layouts:{Layout:J.PE,NotFound:J.Mk,BlogCategory:V.Pn,BlogHome:V.qX,BlogType:V.z7,Timeline:V.Kf}}),L=[a,e,t,B,y,u,A,m,v,l,M,p].map((s=>s.default)).filter(Boolean)},68164:(s,i,n)=>{n.d(i,{J:()=>e,c:()=>a});const a=JSON.parse("{}"),e=Object.fromEntries([["/",{loader:()=>n.e(4470).then(n.bind(n,96948)),meta:{t:"博客主页",i:"home"}}],["/intro.html",{loader:()=>n.e(3912).then(n.bind(n,99416)),meta:{d:1722072119e3,v:"/assets/images/cover3.jpg",e:"\n<p>将你的个人介绍和档案放置在此处。</p>\n",r:{minutes:.08,words:23},t:"介绍页",i:"circle-info",y:"a"}}],["/about-the-blogs/about-blogs.html",{loader:()=>n.e(175).then(n.bind(n,52202)),meta:{d:1722072119e3,c:"博客",e:'<h3>关于博客</h3>\n<p>主要用于记录工作中重要的信息何止是。面得以往</p>\n<h3>优秀真实博客案列</h3>\n<p><a href="https://theme-hope.vuejs.press/zh/demo/projects.html#%E4%BD%BF%E7%94%A8-vuepress-theme-hope-%E7%9A%84%E5%8D%9A%E5%AE%A2" target="_blank" rel="noopener noreferrer">优秀真实博客案列</a></p>\n<h3>必应背景图</h3>\n<p>https://theme-hope.vuejs.press/zh/guide/customize/presets.html</p>',r:{minutes:.29,words:87},t:"介绍",y:"a"}}],["/about-the-blogs/about-learn.html",{loader:()=>n.e(4148).then(n.bind(n,26185)),meta:{d:1722072119e3,c:"Python",e:'<div class="hint-container tip">\n<p class="hint-container-title">提示</p>\n<p>1、 https://www.w3schools.com/</p>\n<blockquote>\n<p>jaignyunfei888@gmail.com</p>\n</blockquote>\n<p>2、 https://www.w3school.com.cn/python/python_intro.asp\n3、 https://www.runoob.com/python3/python3-tutorial.html\n4、 https://docs.python.org/3/tutorial/index.html\n5、 https://www.programiz.com/python-programming/first-program</p>\n</div>',r:{minutes:5.11,words:1532},t:"编程语言",y:"a"}}],["/about-the-blogs/",{loader:()=>n.e(5162).then(n.bind(n,95882)),meta:{d:1722072119e3,c:"作者",r:{minutes:.02,words:6},t:"介绍",y:"a"}}],["/demo/",{loader:()=>n.e(3320).then(n.bind(n,12410)),meta:{d:1722072119e3,c:["使用指南"],r:{minutes:.07,words:22},t:"主要功能与配置演示",i:"laptop-code",y:"a"}}],["/demo/disable.html",{loader:()=>n.e(2756).then(n.bind(n,37383)),meta:{d:1722072119e3,c:["使用指南"],g:["禁用"],e:"<p>你可以通过设置页面的 Frontmatter，在页面禁用功能与布局。</p>\n",r:{minutes:.43,words:128},t:"布局与功能禁用",i:"gears",O:4,y:"a"}}],["/demo/encrypt.html",{loader:()=>n.e(2581).then(n.bind(n,54429)),meta:{d:1722072119e3,c:["使用指南"],g:["加密"],n:!0,r:{minutes:.51,words:154},t:"密码加密的文章",i:"lock",y:"a"}}],["/demo/layout.html",{loader:()=>n.e(6216).then(n.bind(n,46361)),meta:{d:1722072119e3,c:["指南"],g:["布局"],e:'<p>布局包括:</p>\n<ul>\n<li><a href="https://theme-hope.vuejs.press/zh/guide/layout/navbar.html" target="_blank" rel="noopener noreferrer">导航栏</a></li>\n<li><a href="https://theme-hope.vuejs.press/zh/guide/layout/sidebar.html" target="_blank" rel="noopener noreferrer">侧边栏</a></li>\n<li><a href="https://theme-hope.vuejs.press/zh/guide/layout/footer.html" target="_blank" rel="noopener noreferrer">页脚</a></li>\n</ul>',r:{minutes:.53,words:159},t:"布局",i:"object-group",O:2,y:"a"}}],["/demo/markdown.html",{loader:()=>n.e(8711).then(n.bind(n,99618)),meta:{d:1722072119e3,c:["使用指南"],g:["Markdown"],e:"<p>VuePress 主要从 Markdown 文件生成页面。因此，你可以使用它轻松生成文档或博客站点。</p>\n<p>你需要创建并编写 Markdown，以便 VuePress 可以根据文件结构将它们转换为不同的页面。</p>\n",r:{minutes:3.51,words:1053},t:"Markdown 展示",i:"fab fa-markdown",O:2,y:"a"}}],["/demo/page.html",{loader:()=>n.e(645).then(n.bind(n,52242)),meta:{a:"Ms.Hope",d:15778368e5,l:"2020年1月1日",c:["使用指南"],g:["页面配置","使用指南"],u:!0,v:"/assets/images/cover1.jpg",e:"<p><code>more</code> 注释之前的内容被视为文章摘要。</p>\n",r:{minutes:1.76,words:529},t:"页面配置",i:"file",O:3,y:"a"}}],["/interview-related/",{loader:()=>n.e(6616).then(n.bind(n,19581)),meta:{d:1722072119e3,c:"面试",e:'<div class="hint-container tip">\n<p class="hint-container-title">提示</p>\n<p>Be a better version of yourself</p>\n</div>\n<h2>概述</h2>\n<p>该篇章主要是收集的面试题，然后通过学习去完善结果。</p>\n<p>1、mysql索引。分库分表，in，exist的区别\n2、Redis\n3、RocketMQ\n4、基础再过</p>\n<p>1、JVM\n2、数据库\n3、spring\n4、RocketMQ\n5、IO</p>\n<h3>1、MySQL中exists和in的区别</h3>\n<p>https://blog.csdn.net/taomeechildren/article/details/128922688#:~:text=exists%E5%8F%AA%E6%9C%89%E5%86%85%E8%A1%A8%E5%8F%AF%E4%BB%A5%E7%94%A8%E4%B8%8A%E7%B4%A2%E5%BC%95%20%EF%BC%8C%E5%A4%96%E5%B1%82%E5%BE%AA%E7%8E%AF%E5%BF%85%E9%A1%BB%E8%A6%81%E8%B5%B0%E4%B8%80%E4%B8%AA%E9%81%8D%E5%8E%86%E8%BF%87%E7%A8%8B%EF%BC%9B%20%E8%80%8Cin%E5%86%85%E8%A1%A8%E5%92%8C%E5%A4%96%E8%A1%A8%E9%83%BD%E5%8F%AF%E4%BB%A5%E7%94%A8%E4%B8%8A%E7%B4%A2%E5%BC%95%20%EF%BC%8C%E5%9B%A0%E4%B8%BAin%E6%9C%AC%E8%B4%A8%E4%B8%8A%E5%B1%9E%E4%BA%8E%E5%A4%9A%E4%B8%AA%20%E6%9D%A1%E4%BB%B6%E6%9F%A5%E8%AF%A2%20%E7%9A%84%E5%B9%B6%E9%9B%86%20%28or%29%E3%80%82%20%E5%A6%82%E4%BD%95%E9%80%89%E7%94%A8,%EF%BC%9F%20%E5%BD%93%E4%B8%A4%E4%B8%AA%E8%A1%A8%E7%9A%84%E5%A4%A7%E5%B0%8F%E7%9B%B8%E5%BD%93%E6%97%B6%EF%BC%8C%E7%94%A8exists%E5%92%8Cin%E7%9A%84%E6%95%88%E7%8E%87%E5%B7%AE%E5%88%AB%E4%B8%8D%E5%A4%A7%E3%80%82%20%E5%A6%82%E6%9E%9C%E4%B8%A4%E4%B8%AA%E8%A1%A8%E4%B8%80%E4%B8%AA%E5%A4%A7%E4%B8%80%E4%B8%AA%E5%B0%8F%EF%BC%8C%E5%88%99%20%E5%AD%90%E6%9F%A5%E8%AF%A2%E8%A1%A8%20%28%E5%8D%B3%E5%86%85%E8%A1%A8%29%E5%A4%A7%E7%9A%84%E7%94%A8exists%EF%BC%8C%E5%AD%90%E6%9F%A5%E8%AF%A2%E8%A1%A8%20%28%E5%8D%B3%E5%86%85%E8%A1%A8%29%E5%B0%8F%E7%9A%84%E7%94%A8in%20%E3%80%82%20%E5%85%B6%E5%AE%9E%E5%B0%B1%E6%98%AF%E2%80%9D%E5%B0%8F%E8%A1%A8%E9%A9%B1%E5%8A%A8%E5%A4%A7%E8%A1%A8%E2%80%9C%E7%9A%84%E6%80%9D%E6%83%B3%EF%BC%9A%E7%94%A8exist%E6%97%B6%E5%A4%96%E8%A1%A8%E6%98%AF%E9%A9%B1%E5%8A%A8%E8%A1%A8%EF%BC%8C%E7%94%A8in%E6%97%B6%E5%86%85%E8%A1%A8%E6%98%AF%E9%A9%B1%E5%8A%A8%E8%A1%A8%E3%80%82</p>',r:{minutes:2.2,words:659},t:"Java学习&面试指南",y:"a"}}],["/interview-related/collection.html",{loader:()=>n.e(2174).then(n.bind(n,11244)),meta:{d:1722072119e3,c:"面试指南",e:'<div class="hint-container tip">\n<p class="hint-container-title">提示</p>\n<p>Be a better version of yourself</p>\n</div>\n<h2>概述</h2>\n<p>该篇章主要是收集的面试题，然后通过学习去完善结果。</p>\n',r:{minutes:.16,words:49},t:"面试指南-Java集合框架",O:2,y:"a"}}],["/interview-related/java-thread.html",{loader:()=>n.e(4847).then(n.bind(n,56658)),meta:{d:1722072119e3,c:"面试",e:'<div class="hint-container tip">\n<p class="hint-container-title">提示</p>\n<p>Be a better version of yourself</p>\n</div>\n<h2>概述</h2>\n<p>该篇章主要是收集的面试题，然后通过学习去完善结果。</p>\n',r:{minutes:.16,words:47},t:"面试指南-Java并发编程",O:3,y:"a"}}],["/interview-related/javase.html",{loader:()=>n.e(6906).then(n.bind(n,76437)),meta:{d:1722072119e3,c:"面试指南",e:'<div class="hint-container tip">\n<p class="hint-container-title">提示</p>\n<p>Be a better version of yourself</p>\n</div>\n<h2>概述</h2>\n<p>该篇章主要是收集的面试题，然后通过学习去完善结果。</p>\n',r:{minutes:.16,words:47},t:"面试指南-java基础",O:1,y:"a"}}],["/interview-related/jvm.html",{loader:()=>n.e(4391).then(n.bind(n,80208)),meta:{d:1722072119e3,c:"面试",e:'<div class="hint-container tip">\n<p class="hint-container-title">提示</p>\n<p>Be a better version of yourself</p>\n</div>\n<h2>概述</h2>\n<p>该篇章主要是收集的面试题，然后通过学习去完善结果。</p>\n',r:{minutes:.14,words:43},t:"面试指南-JVM",O:4,y:"a"}}],["/interview-related/mybatis.html",{loader:()=>n.e(6753).then(n.bind(n,13012)),meta:{d:1722072119e3,c:"面试",e:'<div class="hint-container tip">\n<p class="hint-container-title">提示</p>\n<p>Be a better version of yourself</p>\n</div>\n<h2>概述</h2>\n<p>该篇章主要是收集的面试题，然后通过学习去完善结果。</p>\n',r:{minutes:.14,words:43},t:"面试指南-MyBatis",O:7,y:"a"}}],["/interview-related/mysql.html",{loader:()=>n.e(5014).then(n.bind(n,84966)),meta:{d:1722072119e3,c:"面试",e:'<div class="hint-container tip">\n<p class="hint-container-title">提示</p>\n<p>Be a better version of yourself</p>\n</div>\n<h2>概述</h2>\n<p>该篇章主要是收集的面试题，然后通过学习去完善结果。</p>\n',r:{minutes:.14,words:43},t:"面试指南-MySQL",O:6,y:"a"}}],["/interview-related/network.html",{loader:()=>n.e(7134).then(n.bind(n,59965)),meta:{d:1722072119e3,c:"面试",e:'<div class="hint-container tip">\n<p class="hint-container-title">提示</p>\n<p>Be a better version of yourself</p>\n</div>\n<h2>概述</h2>\n<p>该篇章主要是收集的面试题，然后通过学习去完善结果。</p>\n',r:{minutes:.16,words:47},t:"面试指南-计算机网络",O:7,y:"a"}}],["/interview-related/redis.html",{loader:()=>n.e(2623).then(n.bind(n,49159)),meta:{d:1722072119e3,c:"面试",e:'<div class="hint-container tip">\n<p class="hint-container-title">提示</p>\n<p>Be a better version of yourself</p>\n</div>\n<h2>概述</h2>\n<p>该篇章主要是收集的面试题，然后通过学习去完善结果。</p>\n',r:{minutes:.14,words:43},t:"面试指南-Redis",O:6,y:"a"}}],["/interview-related/rocketMQ.html",{loader:()=>n.e(2984).then(n.bind(n,85934)),meta:{d:1722072119e3,c:"面试",e:'<div class="hint-container tip">\n<p class="hint-container-title">提示</p>\n<p>Be a better version of yourself</p>\n</div>\n<h2>概述</h2>\n<p>该篇章主要是收集的面试题，然后通过学习去完善结果。</p>\n',r:{minutes:.14,words:43},t:"面试指南-RocketMQ",O:8,y:"a"}}],["/interview-related/spring.html",{loader:()=>n.e(7299).then(n.bind(n,50523)),meta:{d:1722072119e3,c:"面试",e:'<div class="hint-container tip">\n<p class="hint-container-title">提示</p>\n<p>Be a better version of yourself</p>\n</div>\n<h2>概述</h2>\n<p>该篇章主要是收集的面试题，然后通过学习去完善结果。</p>\n',r:{minutes:.14,words:43},t:"面试指南-Spring",O:5,y:"a"}}],["/note-record/",{loader:()=>n.e(7123).then(n.bind(n,63879)),meta:{d:1722093117e3,c:"学习笔记",e:"<p>笔记的总览。将学习的知识点总结和归纳。</p>\n<ul>\n<li>1、你们项目中有没有做过限流 ? 怎么做的 ?\n漏铜算法、令牌桶</li>\n</ul>\n<h2>Redis</h2>\n<h3>1、集群方式</h3>\n<ul>\n<li>主从复制：读写分离。（全量同步，增量同步）。保证不了高可用</li>\n<li>哨兵模式：实现主从集群的自动故障恢复(监控、自动故障恢复、通知)</li>\n<li>分片集群：解决海量数据，高并发。集群中有多个master，每个master保存不同数据。引入了哈希槽的概念</li>\n</ul>\n<h3>2、Redis 的集群方案 - 主从复制 （保证不了高可用）</h3>",r:{minutes:17.55,words:5266},t:"面试总结",y:"a"}}],["/note-record/note.html",{loader:()=>n.e(6283).then(n.bind(n,38766)),meta:{d:1723726675e3,c:"学习笔记",e:'<h2>1、远程工作机会</h2>\n<p><a href="https://eleduck.com/categories/19" target="_blank" rel="noopener noreferrer">远程工作机会：电鸭</a></p>\n<h2>2、字节招聘</h2>\n<p><a href="https://jobs.bytedance.com/referral/pc/position/7268215112959396156/detail?token=MzsxNjYxMzIzNjAwMDA5OzY5NDU2NDExNzc5NDk0MDY3Mjc7MA" target="_blank" rel="noopener noreferrer">字节招聘网址</a></p>',r:{minutes:.14,words:42},t:"一些笔记",y:"a"}}],["/posts/cherry.html",{loader:()=>n.e(2345).then(n.bind(n,93704)),meta:{d:16416864e5,l:"2022年1月9日",c:["樱桃"],g:["红","小","圆"],e:"\n<h2>标题 2</h2>\n<p>这里是内容。</p>\n<h3>标题 3</h3>\n<p>这里是内容。</p>\n",r:{minutes:.11,words:33},t:"樱桃",i:"pen-to-square",y:"a"}}],["/posts/dragonfruit.html",{loader:()=>n.e(5853).then(n.bind(n,7421)),meta:{d:16417728e5,l:"2022年1月10日",c:["火龙果","水果"],g:["红","大"],e:"\n<h2>标题 2</h2>\n<p>这里是内容。</p>\n<h3>标题 3</h3>\n<p>这里是内容。</p>\n",r:{minutes:.12,words:36},t:"火龙果",i:"pen-to-square",y:"a"}}],["/posts/strawberry.html",{loader:()=>n.e(8461).then(n.bind(n,12806)),meta:{d:16418592e5,l:"2022年1月11日",c:["水果","草莓"],g:["红","小"],e:"\n<h2>标题 2</h2>\n<p>这里是内容。</p>\n<h3>标题 3</h3>\n<p>这里是内容。</p>\n",r:{minutes:.11,words:34},t:"草莓",i:"pen-to-square",y:"a"}}],["/posts/tomato.html",{loader:()=>n.e(6218).then(n.bind(n,59468)),meta:{d:16419456e5,l:"2022年1月12日",c:["蔬菜"],g:["红","圆"],u:!0,v:"/assets/images/cover2.jpg",e:"\n<h2>标题 2</h2>\n<p>这里是内容。</p>\n<h3>标题 3</h3>\n<p>这里是内容。</p>\n",r:{minutes:.13,words:38},t:"番茄",i:"pen-to-square",y:"a"}}],["/problem-record/HTTPInputStreamExample.html",{loader:()=>n.e(9800).then(n.bind(n,3174)),meta:{d:16923168e5,l:"2023年8月18日",c:["文件下载"],e:'<h3>根据文件下载地址获取流</h3>\n<div class="language-java line-numbers-mode" data-highlighter="shiki" data-ext="java" data-title="java" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD">import</span><span style="--shiki-light:#C18401;--shiki-dark:#E5C07B"> java.io.IOException</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">;</span></span>\n<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD">import</span><span style="--shiki-light:#C18401;--shiki-dark:#E5C07B"> java.io.InputStream</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">;</span></span>\n<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD">import</span><span style="--shiki-light:#C18401;--shiki-dark:#E5C07B"> java.net.HttpURLConnection</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">;</span></span>\n<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD">import</span><span style="--shiki-light:#C18401;--shiki-dark:#E5C07B"> java.net.URL</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">;</span></span>\n<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD">import</span><span style="--shiki-light:#C18401;--shiki-dark:#E5C07B"> java.net.URLEncoder</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">;</span></span>\n<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD">import</span><span style="--shiki-light:#C18401;--shiki-dark:#E5C07B"> java.nio.charset.StandardCharsets</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">;</span></span>\n<span class="line"></span>\n<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD">public</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD"> class</span><span style="--shiki-light:#C18401;--shiki-dark:#E5C07B"> HTTPInputStreamExample</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF"> {</span></span>\n<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD">    public</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD"> static</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD"> void</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF"> main</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">(</span><span style="--shiki-light:#C18401;--shiki-dark:#E5C07B">String</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">[] </span><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;--shiki-light-font-style:inherit;--shiki-dark-font-style:italic">args</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">)</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF"> {</span></span>\n<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-dark:#7F848E;--shiki-light-font-style:italic;--shiki-dark-font-style:italic">        //String urlStr = "http://172.18.20.15:8080/sfgk/pub/download.do?path=szjh%2F7bf4e83827d9092cbaf54f5e9f9e1ce5%2Fff808081760299d101760299d1250000/民事调解书.doc";</span></span>\n<span class="line"></span>\n<span class="line"><span style="--shiki-light:#C18401;--shiki-dark:#E5C07B">        String</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75"> urlStr</span><span style="--shiki-light:#383A42;--shiki-dark:#56B6C2"> =</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379"> "http://172.25.17.12:9090/jyhzx/wszx/2400/2022/08/26/d4f32f9ea3454264a0d400dedd4179d9/%E6%89%A7%E8%A1%8C%E9%A3%8E%E9%99%A9%E5%91%8A%E7%9F%A5%E4%B9%A6/%E6%89%A7%E8%A1%8C%E9%A3%8E%E9%99%A9%E5%91%8A%E7%9F%A5%E4%B9%A6.docx?X-Amz-Algorithm=AWS4-HMAC-SHA256&amp;X-Amz-Credential=minio%2F20230816%2Fus-east-1%2Fs3%2Faws4_request&amp;X-Amz-Date=20230816T030924Z&amp;X-Amz-Expires=86400&amp;X-Amz-SignedHeaders=host&amp;X-Amz-Signature=ec995e8cbf769c643ec3b1bf56afb029213bd598c35e45de5c4d0fb0c6372837"</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">;</span></span>\n<span class="line"></span>\n<span class="line"></span>\n<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD">        try</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF"> {</span></span>\n<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD">            int</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75"> lastSlashIndex</span><span style="--shiki-light:#383A42;--shiki-dark:#56B6C2"> =</span><span style="--shiki-light:#E45649;--shiki-dark:#E5C07B"> urlStr</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">.</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF">lastIndexOf</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">(</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379">\'/\'</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">);</span></span>\n<span class="line"><span style="--shiki-light:#C18401;--shiki-dark:#E5C07B">            String</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75"> encodedPart</span><span style="--shiki-light:#383A42;--shiki-dark:#56B6C2"> =</span><span style="--shiki-light:#E45649;--shiki-dark:#E5C07B"> urlStr</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">.</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF">substring</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">(lastSlashIndex </span><span style="--shiki-light:#383A42;--shiki-dark:#56B6C2">+</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66"> 1</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">);</span></span>\n<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD">            if</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF"> (</span><span style="--shiki-light:#383A42;--shiki-dark:#56B6C2">!</span><span style="--shiki-light:#E45649;--shiki-dark:#E5C07B">StandardCharsets</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">.</span><span style="--shiki-light:#E45649;--shiki-dark:#E5C07B">US_ASCII</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">.</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF">newEncoder</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">().</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF">canEncode</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">(encodedPart)) {</span></span>\n<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">                encodedPart </span><span style="--shiki-light:#383A42;--shiki-dark:#56B6C2">=</span><span style="--shiki-light:#E45649;--shiki-dark:#E5C07B"> URLEncoder</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">.</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF">encode</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">(encodedPart, </span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379">"UTF-8"</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">);</span></span>\n<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">            }</span></span>\n<span class="line"><span style="--shiki-light:#C18401;--shiki-dark:#E5C07B">            String</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75"> newUrlStr</span><span style="--shiki-light:#383A42;--shiki-dark:#56B6C2"> =</span><span style="--shiki-light:#E45649;--shiki-dark:#E5C07B"> urlStr</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">.</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF">substring</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">(</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66">0</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">, lastSlashIndex </span><span style="--shiki-light:#383A42;--shiki-dark:#56B6C2">+</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66"> 1</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">) </span><span style="--shiki-light:#383A42;--shiki-dark:#56B6C2">+</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF"> encodedPart;</span></span>\n<span class="line"></span>\n<span class="line"><span style="--shiki-light:#C18401;--shiki-dark:#E5C07B">            URL</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75"> url</span><span style="--shiki-light:#383A42;--shiki-dark:#56B6C2"> =</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD"> new</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF"> URL</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">(newUrlStr);</span></span>\n<span class="line"></span>\n<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-dark:#7F848E;--shiki-light-font-style:italic;--shiki-dark-font-style:italic">            // Open a connection to the URL</span></span>\n<span class="line"><span style="--shiki-light:#C18401;--shiki-dark:#E5C07B">            HttpURLConnection</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75"> connection</span><span style="--shiki-light:#383A42;--shiki-dark:#56B6C2"> =</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF"> (HttpURLConnection) </span><span style="--shiki-light:#E45649;--shiki-dark:#E5C07B">url</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">.</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF">openConnection</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">();</span></span>\n<span class="line"></span>\n<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-dark:#7F848E;--shiki-light-font-style:italic;--shiki-dark-font-style:italic">            // Set up the connection properties</span></span>\n<span class="line"><span style="--shiki-light:#E45649;--shiki-dark:#E5C07B">            connection</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">.</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF">setRequestMethod</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">(</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379">"GET"</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">);</span></span>\n<span class="line"><span style="--shiki-light:#E45649;--shiki-dark:#E5C07B">            connection</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">.</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF">setDoInput</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">(</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66">true</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">);</span></span>\n<span class="line"></span>\n<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-dark:#7F848E;--shiki-light-font-style:italic;--shiki-dark-font-style:italic">            // Connect to the URL</span></span>\n<span class="line"><span style="--shiki-light:#E45649;--shiki-dark:#E5C07B">            connection</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">.</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF">connect</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">();</span></span>\n<span class="line"></span>\n<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-dark:#7F848E;--shiki-light-font-style:italic;--shiki-dark-font-style:italic">            // Check if the response code indicates success</span></span>\n<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD">            int</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75"> responseCode</span><span style="--shiki-light:#383A42;--shiki-dark:#56B6C2"> =</span><span style="--shiki-light:#E45649;--shiki-dark:#E5C07B"> connection</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">.</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF">getResponseCode</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">();</span></span>\n<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD">            if</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF"> (responseCode </span><span style="--shiki-light:#383A42;--shiki-dark:#56B6C2">==</span><span style="--shiki-light:#E45649;--shiki-dark:#E5C07B"> HttpURLConnection</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">.</span><span style="--shiki-light:#E45649;--shiki-dark:#E5C07B">HTTP_OK</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">) {</span></span>\n<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-dark:#7F848E;--shiki-light-font-style:italic;--shiki-dark-font-style:italic">                // Get the InputStream from the connection</span></span>\n<span class="line"><span style="--shiki-light:#C18401;--shiki-dark:#E5C07B">                InputStream</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75"> inputStream</span><span style="--shiki-light:#383A42;--shiki-dark:#56B6C2"> =</span><span style="--shiki-light:#E45649;--shiki-dark:#E5C07B"> connection</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">.</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF">getInputStream</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">();</span></span>\n<span class="line"></span>\n<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-dark:#7F848E;--shiki-light-font-style:italic;--shiki-dark-font-style:italic">                // Use the inputStream as needed (e.g., read/write data)</span></span>\n<span class="line"></span>\n<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-dark:#7F848E;--shiki-light-font-style:italic;--shiki-dark-font-style:italic">                // Don\'t forget to close the inputStream when you\'re done</span></span>\n<span class="line"><span style="--shiki-light:#E45649;--shiki-dark:#E5C07B">                inputStream</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">.</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF">close</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">();</span></span>\n<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">            } </span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD">else</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF"> {</span></span>\n<span class="line"><span style="--shiki-light:#E45649;--shiki-dark:#E5C07B">                System</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">.</span><span style="--shiki-light:#E45649;--shiki-dark:#E5C07B">out</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">.</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF">println</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">(</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379">"HTTP request failed with response code: "</span><span style="--shiki-light:#383A42;--shiki-dark:#56B6C2"> +</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF"> responseCode);</span></span>\n<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">            }</span></span>\n<span class="line"></span>\n<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-dark:#7F848E;--shiki-light-font-style:italic;--shiki-dark-font-style:italic">            // Disconnect and clean up the connection</span></span>\n<span class="line"><span style="--shiki-light:#E45649;--shiki-dark:#E5C07B">            connection</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">.</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF">disconnect</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">();</span></span>\n<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">        } </span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD">catch</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF"> (</span><span style="--shiki-light:#C18401;--shiki-dark:#E5C07B">IOException</span><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;--shiki-light-font-style:inherit;--shiki-dark-font-style:italic"> e</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">) {</span></span>\n<span class="line"><span style="--shiki-light:#E45649;--shiki-dark:#E5C07B">            e</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">.</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF">printStackTrace</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">();</span></span>\n<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">        }</span></span>\n<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">    }</span></span>\n<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">}</span></span></code></pre>\n<div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>',r:{minutes:.91,words:273},t:"根据文件下载地址获取流",y:"a"}}],["/problem-record/delete-more-iif.html",{loader:()=>n.e(2930).then(n.bind(n,30250)),meta:{d:16685568e5,l:"2022年11月16日",c:["code"],e:'<h2>策略模式 + 工厂模式</h2>\n<figure><figcaption>img_1.png</figcaption></figure>\n<p>1、策略类工厂  <code>StrategyFactory</code></p>\n<div class="language-java line-numbers-mode" data-highlighter="shiki" data-ext="java" data-title="java" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"></span>\n<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-dark:#7F848E;--shiki-light-font-style:italic;--shiki-dark-font-style:italic">/**</span></span>\n<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-dark:#7F848E;--shiki-light-font-style:italic;--shiki-dark-font-style:italic"> * StrategyFactory</span></span>\n<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-dark:#7F848E;--shiki-light-font-style:italic;--shiki-dark-font-style:italic"> * @description 策略类工厂</span></span>\n<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-dark:#7F848E;--shiki-light-font-style:italic;--shiki-dark-font-style:italic"> * </span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;--shiki-light-font-style:italic;--shiki-dark-font-style:italic">@author</span><span style="--shiki-light:#A0A1A7;--shiki-dark:#7F848E;--shiki-light-font-style:italic;--shiki-dark-font-style:italic"> jiangyunfei</span></span>\n<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-dark:#7F848E;--shiki-light-font-style:italic;--shiki-dark-font-style:italic"> * @date 2023/11/16 10:54</span></span>\n<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-dark:#7F848E;--shiki-light-font-style:italic;--shiki-dark-font-style:italic"> * </span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;--shiki-light-font-style:italic;--shiki-dark-font-style:italic">@version</span><span style="--shiki-light:#A0A1A7;--shiki-dark:#7F848E;--shiki-light-font-style:italic;--shiki-dark-font-style:italic"> 1.0</span></span>\n<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-dark:#7F848E;--shiki-light-font-style:italic;--shiki-dark-font-style:italic"> */</span></span>\n<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD">public</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD"> class</span><span style="--shiki-light:#C18401;--shiki-dark:#E5C07B"> StrategyFactory</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF"> {</span></span>\n<span class="line"></span>\n<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-dark:#7F848E;--shiki-light-font-style:italic;--shiki-dark-font-style:italic">    /**</span></span>\n<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-dark:#7F848E;--shiki-light-font-style:italic;--shiki-dark-font-style:italic">     * 私有构造函数，防止实例化</span></span>\n<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-dark:#7F848E;--shiki-light-font-style:italic;--shiki-dark-font-style:italic">     */</span></span>\n<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD">    private</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF"> StrategyFactory</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">()</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF"> {}</span></span>\n<span class="line"></span>\n<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD">    public</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD"> static</span><span style="--shiki-light:#C18401;--shiki-dark:#E5C07B"> Strategy</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF"> execute</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">(</span><span style="--shiki-light:#C18401;--shiki-dark:#E5C07B">Integer</span><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;--shiki-light-font-style:inherit;--shiki-dark-font-style:italic"> levelCode</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">){</span></span>\n<span class="line"><span style="--shiki-light:#C18401;--shiki-dark:#E5C07B">        Strategy</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75"> strategy</span><span style="--shiki-light:#383A42;--shiki-dark:#56B6C2"> =</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66"> null</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">;</span></span>\n<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD">        switch</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF"> (levelCode){</span></span>\n<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD">            case</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66"> 1</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD">:</span></span>\n<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">                strategy </span><span style="--shiki-light:#383A42;--shiki-dark:#56B6C2">=</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD"> new</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF"> SpringActivity</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">();</span></span>\n<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD">                break</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">;</span></span>\n<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD">            case</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66"> 2</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD">:</span></span>\n<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">                strategy </span><span style="--shiki-light:#383A42;--shiki-dark:#56B6C2">=</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD"> new</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF"> SummerActivity</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">();</span></span>\n<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD">                break</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">;</span></span>\n<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD">            case</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66"> 3</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD">:</span></span>\n<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">                strategy </span><span style="--shiki-light:#383A42;--shiki-dark:#56B6C2">=</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD"> new</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF"> AutumnActivity</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">();</span></span>\n<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD">                break</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">;</span></span>\n<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD">            case</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66"> 4</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD">:</span></span>\n<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">                strategy </span><span style="--shiki-light:#383A42;--shiki-dark:#56B6C2">=</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD"> new</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF"> WinterActivity</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">();</span></span>\n<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD">                break</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">;</span></span>\n<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD">            default:</span></span>\n<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD">                throw</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD"> new</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF"> IllegalArgumentException</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">(</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379">"活动编号错误:"</span><span style="--shiki-light:#383A42;--shiki-dark:#56B6C2">+</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">levelCode);</span></span>\n<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">        }</span></span>\n<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD">        return</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF"> strategy;</span></span>\n<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">    }</span></span>\n<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">}</span></span></code></pre>\n<div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>',r:{minutes:2.38,words:715},t:"如何干掉过多的 if else",y:"a"}}],["/problem-record/github-tips.html",{loader:()=>n.e(9404).then(n.bind(n,77389)),meta:{d:1722074851e3,c:"开发工具",g:["Git"],e:'<p>我使用 Github 已经有 6 年多了，今天毫无保留地把自己觉得比较有用的 Github 小技巧送给关注 JavaGuide 的各位小伙伴。</p>\n<h2>一键生成 Github 简历 &amp; Github 年报</h2>\n<p>通过 <a href="https://resume.github.io/" target="_blank" rel="noopener noreferrer">https://resume.github.io/</a> 这个网站你可以一键生成一个在线的 Github 简历。</p>\n<p>当时我参加的校招的时候，个人信息那里就放了一个在线的 Github 简历。我觉得这样会让面试官感觉你是一个内行，会提高一些印象分。</p>',r:{minutes:6.27,words:1881},t:"Github 实用小技巧总结",y:"a"}}],["/problem-record/idea-template.html",{loader:()=>n.e(3776).then(n.bind(n,64129)),meta:{d:16504128e5,l:"2022年4月20日",c:["IDEA"],e:"<blockquote>\n<p>其他关于IDEA的使用技巧：https://gitee.com/SnailClimb/awesome-idea-tutorial</p>\n</blockquote>\n<h2>1、关闭IDEA格式化注释</h2>\n<blockquote>\n<p>IDEA在格式化模板的时候会把注释一起格式化，导致排好序的方法或者类注释顺序错乱。</p>\n</blockquote>\n<p>设置方法：打开IDEAFile-&gt; Setting -&gt; Editor -&gt; Code Style -&gt; Java -&gt; JavaDoc，找到Enable JavaDoc Formatting，将勾选取消掉即可。</p>",r:{minutes:1.65,words:494},t:"IDEA注释模板",y:"a"}}],["/problem-record/idea-tool.html",{loader:()=>n.e(7868).then(n.bind(n,31528)),meta:{d:16419456e5,l:"2022年1月12日",c:["IDEA"],e:'<h3>1、有关工具使用网址</h3>\n<p><a href="https://idea.javaguide.cn/" target="_blank" rel="noopener noreferrer">IDEA 高效使用指南</a></p>\n',r:{minutes:.11,words:34},t:"IDEA 高效使用指南",O:2,y:"a"}}],["/problem-record/interview-transcripts.html",{loader:()=>n.e(6621).then(n.bind(n,88542)),meta:{d:17220384e5,l:"2024年7月27日",e:"<h3>1、面试被问到的问题</h3>\n<h3>2、如何做好准备</h3>\n<h3>针对简历准备问题 TODO</h3>\n<p>1、简历可以在增加一个一张网的项目经验\n2、考虑activiti 工作流是否添加\n3、针对简历准备相应的问题回答。</p>\n<p>比如项目参与不笨，参与部分的业务，以及技术</p>\n<p>遇到的问题，解决方案，办法等等</p>\n<p>个人优势：</p>\n<ol>\n<li>精通Java编程语言，具备扎实的面向对象设计和编程能力，始终遵循行业最佳实践，致力于编写高效、可维护的代码。</li>\n<li>熟练应用Java核心API，包括高级集合框架（如HashMap、ArrayList）、IO流处理和反射机制，以优化程序性能和扩展性。</li>\n<li>深入理解JVM架构，包括类加载、内存管理和垃圾回收机制，并具备丰富的调优经验，确保系统稳定性和高效运行。</li>\n<li>掌握Java并发编程技术，包括Java内存模型（JMM）、volatile关键字、原子操作（如CAS）以及多种锁机制（如synchronized、ReentrantLock、ReadWriteLock）。在多线程环境下，我能够高效解决复杂问题，保证系统的高并发能力。</li>\n<li>熟练使用Spring系列框架（Spring、Spring Boot、Spring Cloud）及MyBatis，深入理解其设计理念和核心概念，能够快速开发稳定、可扩展的企业级应用。</li>\n<li>熟练操作MySQL、PostgreSQL及Redis数据库，擅长SQL语句优化，确保数据处理的高效性和准确性。</li>\n<li>掌握RocketMQ中间件，理解其设计原理和应用场景，能够设计并实现高效可靠的消息队列解决方案。</li>\n<li>熟悉常用数据结构与算法，能够灵活运用多种设计模式，优化程序结构并提升系统性能。</li>\n<li>具备持续学习和技术创新能力，拥有出色的团队协作与沟通技巧，能够有效传授知识，快速定位并解决技术难题，推动团队技术进步。</li>\n</ol>",r:{minutes:3.22,words:966},t:"面试经历",O:1,y:"a"}}],["/problem-record/merge-pdf.html",{loader:()=>n.e(6255).then(n.bind(n,10419)),meta:{d:16915392e5,l:"2023年8月9日",c:["代码实践"],g:["PDF文件合并"],e:"<h3>1、背景</h3>\n<p>需要根据选中的列表数据，获取其对应的附件信息（PDF文件），合并成一个PDF文件并可以打印。</p>\n<h3>2、开发过程</h3>\n<p>因为项目是一个老项目，且是高度封装的框架，一般请求不合适。采用原始的Ajax请求，后台是servelet定义接口。\n开始是想用框架自带的请求方式，发相不行。而且框架自动生成的方法，无法使用HttpServletResponse作为方法参数。\n所以摒弃框架自带的方式，使用原始的Ajax请求，后台是servelet定义接口，后台通过调试，Ajax不行，直接使用printJS即可。</p>\n<h3>3、外部插件</h3>\n<p>前端：https://printjs.crabbly.com/<br>\n后端：pdfbox PDFMergerUtility （https://iowiki.com/pdfbox/pdfbox_quick_guide.html）</p>",r:{minutes:3.23,words:968},t:"合并PDF，打印预览",y:"a"}}],["/problem-record/miscellaneous-notes.html",{loader:()=>n.e(6048).then(n.bind(n,93506)),meta:{d:17220384e5,l:"2024年7月27日",c:["code"],e:'<h2>1、在springboot中,生成word文件，包含表格形式。</h2>\n<p>使用Apache POI库，它是一个Java API，用于处理Microsoft Office格式的文件。\n以下是一个使用Apache POI将查询结果转换为Word文件表格形式的简单示例：</p>\n<blockquote>\n<p>参考文档：http://deepoove.com/poi-tl/apache-poi-guide.html</p>\n<ol>\n<li>首先，将以下依赖项添加到您的Maven项目中，以使用Apache POI库：</li>\n</ol>\n</blockquote>\n<div class="language-xml line-numbers-mode" data-highlighter="shiki" data-ext="xml" data-title="xml" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">&lt;</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75">dependency</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">&gt;</span></span>\n<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">  &lt;</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75">groupId</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">&gt;org.apache.poi&lt;/</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75">groupId</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">&gt;</span></span>\n<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">  &lt;</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75">artifactId</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">&gt;poi&lt;/</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75">artifactId</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">&gt;</span></span>\n<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">  &lt;</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75">version</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">&gt;5.2.0&lt;/</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75">version</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">&gt;</span></span>\n<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">&lt;/</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75">dependency</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">&gt;</span></span>\n<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">&lt;</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75">dependency</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">&gt;</span></span>\n<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">  &lt;</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75">groupId</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">&gt;org.apache.poi&lt;/</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75">groupId</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">&gt;</span></span>\n<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">  &lt;</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75">artifactId</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">&gt;poi-ooxml&lt;/</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75">artifactId</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">&gt;</span></span>\n<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">  &lt;</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75">version</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">&gt;5.2.0&lt;/</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75">version</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">&gt;</span></span>\n<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">&lt;/</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75">dependency</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">&gt;</span></span></code></pre>\n<div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>',r:{minutes:3.85,words:1154},t:"SpringBoot生成Word文档",y:"a"}}],["/problem-record/redission.html",{loader:()=>n.e(6098).then(n.bind(n,17089)),meta:{d:17160768e5,l:"2024年5月19日",c:["redisson","分布式锁"],g:["redisson"],e:'<h2>项目中redisson分布式锁的使用</h2>\n<div class="hint-container tip">\n<p class="hint-container-title">提示</p>\n<p>Redisson 分布式锁在处理分布式系统中的并发问题时非常有用。通过确保关键代码块在任何时候只有一个实例在执行，可以有效避免数据不一致和竞争条件。常见的使用场景包括资源访问控制、任务调度、库存管理、分布式事务、分布式队列、限流和熔断以及缓存更新等。</p>\n<p>可参考：https://doc.ruoyi.vip/ruoyi-vue/document/cjjc.html#%E9%9B%86%E6%88%90redisson%E5%AE%9E%E7%8E%B0redis%E5%88%86%E5%B8%83%E5%BC%8F%E9%94%81</p>\n</div>',r:{minutes:.98,words:294},t:"redisson分布式锁的使用",y:"a"}}],["/problem-record/tool.html",{loader:()=>n.e(3048).then(n.bind(n,20255)),meta:{d:16419456e5,l:"2022年1月12日",e:'<h3>博客文章转换成 Markdown</h3>\n<ol>\n<li>将博客文章打开控制台，找到\'article_content\',’复制到outerHTML‘.</li>\n<li>markdown转换工具：<a href="https://tool.lu/markdown/#" target="_blank" rel="noopener noreferrer">https://tool.lu/markdown/#</a></li>\n</ol>\n<h3>yarn升级</h3>\n<p>他需要单独升级，不能用npm\nhttps://yarnpkg.com/getting-started/install</p>',r:{minutes:.21,words:63},t:"工具",O:0,y:"a"}}],["/study-notes/",{loader:()=>n.e(9064).then(n.bind(n,19096)),meta:{d:1722072119e3,c:"学习笔记",r:{minutes:.04,words:12},t:"学习笔记首页",y:"a"}}],["/vue/advanced.html",{loader:()=>n.e(8383).then(n.bind(n,40182)),meta:{d:1722074851e3,c:"Vue系列",e:"<h3>关于博客</h3>\n",r:{minutes:.04,words:12},t:"Vue进阶",y:"a"}}],["/vue/basics.html",{loader:()=>n.e(222).then(n.bind(n,89833)),meta:{d:1722074851e3,c:"Vue系列",e:"<h3>关于博客</h3>\n<p>this.$nextTick</p>\n<p>DOM（文档对象模型，Document Object Model）是一个跨平台和语言独立的接口，它允许程序和脚本动态地访问和更新文档的内容、结构和样式。在网页浏览器中，DOM通常指的是HTML和XML文档的编程接口。\n以下是DOM的一些基本概念：</p>\n<ol>\n<li><strong>文档</strong>：在Web浏览器中，文档通常指的是网页，即HTML或XML文件。DOM将文档表示为一个树形结构，称为DOM树。</li>\n<li><strong>对象</strong>：在DOM中，文档的每一个元素、属性和文本都被视为一个对象。例如，HTML中的每个标签（如<code>&lt;div&gt;</code>、<code>&lt;p&gt;</code>、<code>&lt;a&gt;</code>等）都是一个对象，称为元素节点；每个属性（如<code>id</code>、<code>class</code>、<code>href</code>等）也是一个对象，称为属性节点；标签内的文本也是一个对象，称为文本节点。</li>\n<li><strong>模型</strong>：DOM提供了一个模型，即一套规则，用于描述如何通过对象来表示文档的结构，以及如何对这些对象进行操作。\n以下是DOM的一些主要功能：</li>\n</ol>",r:{minutes:1.48,words:443},t:"Vue基础",y:"a"}}],["/web3/",{loader:()=>n.e(696).then(n.bind(n,95542)),meta:{d:1722493873e3,c:["web3"],g:["web3"],e:'<div class="hint-container tip">\n<p class="hint-container-title">提示</p>\n<p>该篇主要是收集web3的一些学习方法和途径，比较凌乱。后面再梳理清晰的学习步骤。</p>\n<p>该篇主要作用，制定学习计划。</p>\n</div>\n<h2>1、推荐的学习路径</h2>\n<p><a href="https://learnblockchain.cn/article/7074" target="_blank" rel="noopener noreferrer">Web3.0 推荐的学习路径</a></p>\n<h2>2、招聘网站</h2>',r:{minutes:12.97,words:3891},t:"web3.0 总览",y:"a"}}],["/study-notes/Internet/",{loader:()=>n.e(8600).then(n.bind(n,71419)),meta:{d:16785792e5,l:"2023年3月12日",c:["计算机网络"],g:["计算机网络"],e:'<h2>目录：</h2>\n<ul>\n<li><a href="/blog/study-notes/Internet/one/" target="_blank">三次握手和四次挥手</a></li>\n<li><a href="/blog/study-notes/Internet/https-http/" target="_blank">https和http</a></li>\n<li><a href="/blog/study-notes/Internet/TCP/" target="_blank">TCP中的拥塞控制和流量控制</a></li>\n<li><a href="/blog/study-notes/Internet/four/" target="_blank">物理层</a></li>\n<li><a href="/blog/study-notes/Internet/five/" target="_blank">数据链路层</a></li>\n<li><a href="/blog/study-notes/Internet/http-state/" target="_blank">http中的状态码</a></li>\n</ul>',r:{minutes:.23,words:70},t:"计算机网络",y:"a"}}],["/study-notes/JVM/",{loader:()=>n.e(1448).then(n.bind(n,36307)),meta:{d:16790976e5,l:"2023年3月18日",e:'<h2>介绍</h2>\n<div class="hint-container tip">\n<p class="hint-container-title">提示</p>\n<p>该文章包含JVM基础入门篇全部内容以及宋红康老师JVM教程全套笔记。\n来源Bilibili尚硅谷宋红康老师JVM教程：<a href="https://www.bilibili.com/video/BV1PJ411n7xZ" target="_blank" rel="noopener noreferrer">硅谷2020最新版宋红康JVM教程</a><br>\n笔记补充：https://gitee.com/vectorx/NOTE_JVM/tree/main , https://www.yuque.com/u21195183/jvm</p>\n<p>最细致的JVM讲解（更多可参考书籍）</p>\n<p>基础入门视频：https://www.bilibili.com/video/BV1jJ411t71s?p=1&amp;vd_source=7138dfc78c49f602f8d3ed8cfbf0513d</p>\n</div>',r:{minutes:31.7,words:9511},t:"JVM",y:"a"}}],["/study-notes/Redis/",{loader:()=>n.e(9872).then(n.bind(n,47454)),meta:{d:1722093117e3,c:["Redis"],g:["Redis"],r:{minutes:.02,words:6},t:"Redis",y:"a"}}],["/study-notes/RocketMQ/",{loader:()=>n.e(3103).then(n.bind(n,12544)),meta:{d:16890336e5,l:"2023年7月11日",c:["中间件","待完成学习"],g:["RocketMQ"],e:'<div class="hint-container tip">\n<p class="hint-container-title">提示</p>\n<p>RocketMQ官网：<a href="https://rocketmq.apache.org/zh/" target="_blank" rel="noopener noreferrer">https://rocketmq.apache.org/zh/</a>\n教程：https://www.bilibili.com/video/BV1cf4y157sz/?spm_id_from=333.337.search-card.all.click&amp;vd_source=7138dfc78c49f602f8d3ed8cfbf0513d<br>\n笔记来源：https://gitee.com/bright-boy/technical-notes/tree/master/study-notes/rocketmq</p>\n<blockquote>\n<p>另一款优秀中间件：https://www.macrozheng.com/project/pulsar_start.html#pulsar%E7%AE%80%E4%BB%8B</p>\n</blockquote>\n</div>',r:{minutes:122.07,words:36622},t:"RocketMQ学习笔记",y:"a"}}],["/study-notes/SpringCloud/",{loader:()=>n.e(6057).then(n.bind(n,20463)),meta:{d:16790112e5,l:"2023年3月17日",g:["SpringCloud"],e:'<h3>SpringCloud学习实操</h3>\n<blockquote>\n<p>来源Bilibili尚硅谷周阳老师学习视频：<a href="https://www.bilibili.com/video/BV18E411x7eT" target="_blank" rel="noopener noreferrer">尚硅谷2020最新版SpringCloud(H版&amp;alibaba)框架</a>\n源码-github（待完成）:https://github.com/cuckoocry/spring-cloud2020.git</p>\n</blockquote>\n',r:{minutes:.17,words:51},t:"SpringCloud",y:"a"}}],["/study-notes/heima-baodian/",{loader:()=>n.e(2632).then(n.bind(n,82800)),meta:{d:1722263928e3,c:"黑马",e:'<div class="hint-container tip">\n<p class="hint-container-title">提示</p>\n<p>视频来源：\n<a href="https://www.bilibili.com/video/BV15b4y117RJ?p=44&amp;spm_id_from=pageDriver&amp;vd_source=7138dfc78c49f602f8d3ed8cfbf0513d" target="_blank" rel="noopener noreferrer">Java面试宝典）</a></p>\n<p>Java面试教程\n<a href="https://www.bilibili.com/video/BV15b4y117RJ/" target="_blank" rel="noopener noreferrer">在线学习地址：</a>\n<a href="https://pan.baidu.com/s/1_xvzyGGOapVOUr3bZ-Vepw" target="_blank" rel="noopener noreferrer">资料领取地址：</a>\n提取码：1234</p>\n<p><a href="https://gitee.com/cuckoocry/heima-demo" target="_blank" rel="noopener noreferrer">代码地址【经过整理组合】</a></p>\n</div>',r:{minutes:.29,words:88},t:"黑马宝典",y:"a"}}],["/study-notes/heima-java-bagu/",{loader:()=>n.e(6808).then(n.bind(n,90762)),meta:{d:1722091391e3,c:"黑马",e:'<div class="hint-container tip">\n<p class="hint-container-title">提示</p>\n<p>视频来源：\n<a href="https://www.bilibili.com/video/BV1yT411H7YK/?vd_source=7138dfc78c49f602f8d3ed8cfbf0513d" target="_blank" rel="noopener noreferrer">新版Java面试专题视频教程，java八股文面试全套真题+深度详解（含大厂高频面试真题）</a></p>\n<p>2023新版Java面试\n在线观看：\nhttps://www.bilibili.com/video/BV1yT411H7YK/\n资料链接：\nhttps://pan.baidu.com/s/1NQZDW-9_VCnEUXcXp_G-bA?pwd=9987\n提取码：9987</p>\n<p>Java面试教程\n在线学习：\nhttps://www.bilibili.com/video/BV15b4y117RJ/\n资料领取：\nhttps://pan.baidu.com/s/1_xvzyGGOapVOUr3bZ-Vepw\n提取码：1234</p>\n<p><a href="https://gitee.com/cuckoocry/heima-demo" target="_blank" rel="noopener noreferrer">代码地址【经过整理组合】</a></p>\n</div>',r:{minutes:.45,words:136},t:"黑马面试题",y:"a"}}],["/study-notes/shangguigu-three/",{loader:()=>n.e(7036).then(n.bind(n,13465)),meta:{d:16784928e5,l:"2023年3月11日",e:'<blockquote>\n<p>来源Bilibili尚硅谷周阳老师学习视频：<a href="https://www.bilibili.com/video/BV1Hy4y1B78T" target="_blank" rel="noopener noreferrer">尚硅谷Java大厂面试题第三季</a>\n笔记参考：https://gitee.com/gpc12138/LearningNotes\n目录：\n"ReentrantLock/",\n"",\n"",\n"await-signal",\n"",\n"AQS/",\n"Spring/",\n"Redis/",\n"UUID/"</p>\n</blockquote>',r:{minutes:.45,words:135},t:"大厂面试题第三季",y:"a"}}],["/study-notes/shangguigu-three/await-signal.html",{loader:()=>n.e(8031).then(n.bind(n,14484)),meta:{d:16790976e5,l:"2023年3月18日",e:'<h2>await - signal限制</h2>\n<p>方式2：使用JUC包中Condition的await()方法让线程等待，使用signal()方法唤醒线程</p>\n<div class="language- line-numbers-mode" data-highlighter="shiki" data-ext="" data-title="" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span>/**</span></span>\n<span class="line"><span> * @Author xiaofeipeng</span></span>\n<span class="line"><span> * @Date 2023/3/07</span></span>\n<span class="line"><span> * @Description: 要求: t1线程等待3秒钟，3秒钟后t2线程唤醒t1线程继续工作</span></span>\n<span class="line"><span> * &lt;p&gt;</span></span>\n<span class="line"><span> */</span></span>\n<span class="line"><span>public class LockSupportDemo {</span></span>\n<span class="line"><span></span></span>\n<span class="line"><span>    static Lock lock = new ReentrantLock();</span></span>\n<span class="line"><span>    static Condition condition = lock.newCondition();</span></span>\n<span class="line"><span></span></span>\n<span class="line"><span></span></span>\n<span class="line"><span>    public static void main(String[] args) {</span></span>\n<span class="line"><span></span></span>\n<span class="line"><span>        new Thread(() -&gt; {</span></span>\n<span class="line"><span>            lock.lock();</span></span>\n<span class="line"><span>            try {</span></span>\n<span class="line"><span>                System.out.println(Thread.currentThread().getName() + "\\t" + "------come in");</span></span>\n<span class="line"><span>                try {</span></span>\n<span class="line"><span>                    condition.await();</span></span>\n<span class="line"><span>                } catch (InterruptedException e) {</span></span>\n<span class="line"><span>                    e.printStackTrace();</span></span>\n<span class="line"><span>                }</span></span>\n<span class="line"><span>                System.out.println(Thread.currentThread().getName() + "\\t" + "------被唤醒");</span></span>\n<span class="line"><span>            } finally {</span></span>\n<span class="line"><span>                lock.unlock();</span></span>\n<span class="line"><span>            }</span></span>\n<span class="line"><span>        }, "A").start();</span></span>\n<span class="line"><span></span></span>\n<span class="line"><span>        new Thread(() -&gt; {</span></span>\n<span class="line"><span>            lock.lock();</span></span>\n<span class="line"><span>            try {</span></span>\n<span class="line"><span>                condition.signal();</span></span>\n<span class="line"><span>                System.out.println(Thread.currentThread().getName() + "\\t" + "------通知");</span></span>\n<span class="line"><span>            } finally {</span></span>\n<span class="line"><span>                lock.unlock();</span></span>\n<span class="line"><span>            }</span></span>\n<span class="line"><span>        }, "B").start();</span></span>\n<span class="line"><span></span></span>\n<span class="line"><span>    }</span></span>\n<span class="line"><span></span></span>\n<span class="line"><span>}</span></span></code></pre>\n<div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>',r:{minutes:1.33,words:398},t:"await - signal限制",y:"a"}}],["/study-notes/shangguigu-three/one.html",{loader:()=>n.e(1636).then(n.bind(n,8247)),meta:{d:16784928e5,l:"2023年3月11日",e:'<h3>java字符串常量池：</h3>\n<pre><code>public class StringPool58Demo  {\n    public static void main(String[] args) {\n\n        String str1 = new StringBuilder("58").append("tongcheng").toString();\n        System.out.println(str1);\n        System.out.println(str1.intern());\n        System.out.println(str1 == str1.intern()); // true\n\n        System.out.println();\n\n        String str2 = new StringBuilder("ja").append("va").toString();\n        System.out.println(str2);\n        System.out.println(str2.intern());\n        System.out.println(str2 == str2.intern()); // false\n        \n       //只有Java为false,其他全部是true\n    }\n}\n</code></pre>',r:{minutes:4.08,words:1225},t:"字符串常量Java内部加载",y:"a"}}],["/study-notes/shangguigu-three/two.html",{loader:()=>n.e(1538).then(n.bind(n,17199)),meta:{d:16784928e5,l:"2023年3月11日",e:'<blockquote>\n<p>https://leetcode.cn/problems/two-sum/</p>\n</blockquote>\n<h2>闲聊力扣算法第一题（两数求和）</h2>\n<p>给定一个整数数组 nums 和一个整数目标值 target，请你在该数组中找出 和为目标值 的那 两个 整数，并返回它们的数组下标。</p>\n<p>你可以假设每种输入只会对应一个答案。但是，数组中同一个元素不能使用两遍。</p>\n<p>你可以按任意顺序返回答案。</p>\n<div class="language- line-numbers-mode" data-highlighter="shiki" data-ext="" data-title="" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span></span></span>\n<span class="line"><span>输入：nums = [2,7,11,15], target = 9</span></span>\n<span class="line"><span>输出：[0,1]</span></span>\n<span class="line"><span>解释：因为 nums[0] + nums[1] == 9 ，返回 [0, 1] 。</span></span></code></pre>\n<div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>',r:{minutes:1.12,words:337},t:"闲聊力扣算法第一题",y:"a"}}],["/study-notes/spring-boot/",{loader:()=>n.e(651).then(n.bind(n,62218)),meta:{d:1722093117e3,c:"面试",g:["SpringBoot"],e:'<div class="hint-container tip">\n<p class="hint-container-title">提示</p>\n<p>SpringBoot 面试题专栏</p>\n</div>\n<h3>1、简单介绍⼀下 Spring?有啥缺点?</h3>\n<p>Spring 是重量级企业开发框架 <code>Enterprise JavaBean（EJB</code>） 的替代品，<code>Spring</code> 为企业级 <code>Java</code> 开发提供了⼀种相对简单的⽅法，通过 <code>依赖注⼊</code> 和 <code>⾯向切⾯编程</code> ，用简单的 Java 对象（Plain Old Java Object，POJO） 实现了 EJB的功能。</p>',r:{minutes:39.79,words:11938},t:"SpringBoot 常⻅⾯试题总结（JavaGuid收费篇）",y:"a"}}],["/study-notes/Internet/TCP/",{loader:()=>n.e(5664).then(n.bind(n,71226)),meta:{d:16785792e5,l:"2023年3月12日",c:["计算机网络"],g:["计算机网络"],e:"<h2>流量控制</h2>\n<h3>什么是流量控制</h3>\n<p>如果发送者发送数据过快，接收者来不及接收，那么就会出现分组丢失，为了避免分组丢失，控制发送者的发送速度，使得接收者来得及接收，这就是流量控制。</p>\n<p>流量控制的目的是：防止分组丢失，是构成TCP可靠性的一方面。</p>\n<h3>如何实现流量控制</h3>\n<p>由滑动窗口协议（连续ARQ协议）实现，滑动窗口协议即保证了分组无差错，有序接收，也实现了流量控制。主要的方式就是接收方返回的ACK会包含自己的接受窗口大小，并利用大小来控制发送方的数据发送。</p>\n<h2>拥塞控制</h2>\n<h3>什么是拥塞控制</h3>\n",r:{minutes:5.2,words:1560},t:"TCP中的流量控制和拥塞控制",y:"a"}}],["/study-notes/Internet/five/",{loader:()=>n.e(1733).then(n.bind(n,53464)),meta:{d:16785792e5,l:"2023年3月12日",c:["计算机网络"],g:["计算机网络"],e:"<h2>链路和数据链路</h2>\n<h3>链路</h3>\n<p>一条点到点的物理线路段，中间没有其它的交换节点，一条链路只是一条通路的一个组成部分</p>\n<h3>数据链路</h3>\n<p>除物理链路外，还必须有通信协议来控制这些数据的传输，若把实现这些协议的硬件和软件加到链路上，就构成了数据链路。现常见的方法就是使用适配器（网卡）来实现这些协议的硬件和软件。</p>\n<p>数据链路层相当于一个管道，传输的是一条条的帧信息</p>\n<figure><figcaption>image-20200627162011689</figcaption></figure>\n<h2>数据链路层的主要功能</h2>",r:{minutes:5.83,words:1750},t:"数据链路层",y:"a"}}],["/study-notes/Internet/four/",{loader:()=>n.e(8321).then(n.bind(n,21509)),meta:{d:16785792e5,l:"2023年3月12日",c:["计算机网络"],g:["计算机网络"],e:"<h2>两种分层结构</h2>\n<h3>OSI体系结构</h3>\n<ul>\n<li>应用层</li>\n<li>表示层</li>\n<li>会话层</li>\n<li>运输层</li>\n<li>网络层</li>\n<li>数据链路层</li>\n<li>物理层</li>\n</ul>\n<h3>TCP/IP体系结构</h3>\n<ul>\n<li>应用层</li>\n<li>运输层（TCP、UDP）</li>\n<li>网络层（IP）</li>\n<li>数据链路层</li>\n<li>物理层</li>\n</ul>\n<h2>物理层</h2>\n<h3>基本概念</h3>\n<p>物理层解决如何在连接各种计算机的传输媒体上传输数据比特流，而不是指具体的传输媒体，尽可能的屏蔽掉传输媒体和通信手段的差异。</p>",r:{minutes:4.66,words:1397},t:"计算机网络分层结构 - 物理层",y:"a"}}],["/study-notes/Internet/http-state/",{loader:()=>n.e(8873).then(n.bind(n,47219)),meta:{d:16785792e5,l:"2023年3月12日",c:["计算机网络"],g:["计算机网络"],e:"<h2>状态码的作用</h2>\n<p>状态码的职责是当客户端向服务器发送请求时，描述返回的请求结果，借助状态码，用户可以知道服务器端是正常处理了请求，还是出现了错误。</p>\n<table>\n<thead>\n<tr>\n<th></th>\n<th>类别</th>\n<th>原因</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>1XX</td>\n<td>信息性状态码</td>\n<td>接收到的请求正在处理中</td>\n</tr>\n<tr>\n<td>2XX</td>\n<td>成功状态码</td>\n<td>请求正常处理完毕</td>\n</tr>\n<tr>\n<td>3XX</td>\n<td>重定向状态码</td>\n<td>需要附加操作以完成请求</td>\n</tr>\n<tr>\n<td>4XX</td>\n<td>客户端错误码</td>\n<td>服务器无法处理请求</td>\n</tr>\n<tr>\n<td>5XX</td>\n<td>服务器错误码</td>\n<td>服务器处理请求出错</td>\n</tr>\n</tbody>\n</table>",r:{minutes:2.26,words:677},t:"HTTP中的状态码",y:"a"}}],["/study-notes/Internet/https-http/",{loader:()=>n.e(8753).then(n.bind(n,21475)),meta:{d:16785792e5,l:"2023年3月12日",c:["计算机网络"],g:["计算机网络"],e:"<h2>http</h2>\n<p>http是一种无状态协议。无状态是指客户机和服务器之间不需要建立持久连接，这意味着当一个客户端向服务器发出请求，然后服务器返回响应（response），连接就被关闭了，在服务器端不保留连接的有关信息，HTTP遵循请求/应答模型。客户机向服务器发送请求，服务器处理请求并返回适当的应答。所有HTTP连接都构成一套请求和应答。</p>\n<h2>https</h2>\n<p>HTTPS是以安全为目标的HTTP通道，简单将就是HTTP的安全版。即HTTP下加入SSL层，HTTPS的安全基础是SSL。其所用的端口是443，过程大致如下：</p>\n<h3>获取连接证书</h3>",r:{minutes:4.98,words:1493},t:"http和https",y:"a"}}],["/study-notes/Internet/one/",{loader:()=>n.e(2567).then(n.bind(n,71397)),meta:{d:16785792e5,l:"2023年3月12日",c:["计算机网络"],g:["计算机网络"],e:"<h2>三次握手</h2>\n<h3>概念</h3>\n<p>为什么需要握手：握手的作用就是为了同步一些信息，比如最大滑动窗口</p>\n<p>TCP：是一个可靠的连接，也就是客户端和服务器双方必须感知对方的存在，也就是需要经历一个建立连接的过程</p>\n<p>用三次握手建立TCP连接，连接有三个阶段</p>\n<ul>\n<li>建立连接</li>\n<li>数据传输</li>\n<li>连接释放</li>\n</ul>\n<p>连接的管理就是使连接的建立和释放都能正常地进行，连接阶段过程中要解决以下三个问题</p>\n<ul>\n<li>要使每一方都能确知对方的存在</li>\n<li>要允许双方协商一些参数</li>\n<li>能够对运输实体分配资源</li>\n</ul>",r:{minutes:6.2,words:1860},t:"三次握手和四次挥手",y:"a"}}],["/study-notes/JVM/Bytecode-ClassLoading/",{loader:()=>n.e(3293).then(n.bind(n,14704)),meta:{d:16790112e5,l:"2023年3月17日",e:'<h2>介绍</h2>\n<blockquote>\n<p>来源Bilibili尚硅谷宋红康老师JVM教程：<a href="https://www.bilibili.com/video/BV1PJ411n7xZ" target="_blank" rel="noopener noreferrer">硅谷2020最新版宋红康JVM教程</a>\n笔记补充：https://gitee.com/vectorx/NOTE_JVM/tree/main</p>\n</blockquote>\n<h2>目录</h2>\n<ul>\n<li><a href="/blog/study-notes/JVM/Bytecode-ClassLoading/Class-File-Structure/" target="_blank">class文件结构</a></li>\n<li><a href="/blog/study-notes/JVM/Bytecode-ClassLoading/Bytecode-Instruction-Set/" target="_blank">字节码指令集</a></li>\n<li><a href="/blog/study-notes/JVM/Bytecode-ClassLoading/Class-Lifecycle/" target="_blank">类的加载过程（类的生命周期）详解</a></li>\n<li><a href="/blog/study-notes/JVM/Bytecode-ClassLoading/Class-Lifecycle2/" target="_blank">再谈类的加载器</a></li>\n</ul>',r:{minutes:.31,words:94},t:"字节码与类的加载篇",y:"a"}}],["/study-notes/JVM/Memory-GC/",{loader:()=>n.e(9555).then(n.bind(n,43376)),meta:{d:16790976e5,l:"2023年3月18日",g:["JVM"],e:'<h2>介绍</h2>\n<blockquote>\n<p>来源Bilibili尚硅谷宋红康老师JVM教程：<a href="https://www.bilibili.com/video/BV1PJ411n7xZ" target="_blank" rel="noopener noreferrer">硅谷2020最新版宋红康JVM教程</a>\n笔记补充：https://gitee.com/vectorx/NOTE_JVM/tree/main</p>\n</blockquote>\n<h2>目录</h2>\n<h3>内存与垃圾回收篇</h3>\n<ul>\n<li><a href="/blog/study-notes/JVM/Memory-GC/Java-Architecture/" target="_blank">JVM与Java体系结构</a></li>\n<li><a href="/blog/study-notes/JVM/Memory-GC/Clas-Loading-Subsystem/" target="_blank">类加载子系统</a></li>\n<li><a href="/blog/study-notes/JVM/Memory-GC/JVM-RuntimeDataAreas/" target="_blank">运行时数据区概述及线程</a></li>\n<li><a href="/blog/study-notes/JVM/Memory-GC/PCounter-Register/" target="_blank">程序计数器</a></li>\n<li><a href="/blog/study-notes/JVM/Memory-GC/JVM-Stack/" target="_blank">虚拟机栈</a></li>\n<li><a href="/blog/study-notes/JVM/Memory-GC/Native-Stack/" target="_blank">本地方法接口</a></li>\n<li><a href="/blog/study-notes/JVM/Memory-GC/Heap/" target="_blank">堆</a></li>\n<li><a href="/blog/study-notes/JVM/Memory-GC/Method-Area/" target="_blank">方法区</a></li>\n<li><a href="/blog/study-notes/JVM/Memory-GC/Object-Instantiation/" target="_blank">对象实例化内存布局与访问定位</a></li>\n<li><a href="/blog/study-notes/JVM/Memory-GC/Direct-Memory/" target="_blank">直接内存</a></li>\n<li><a href="/blog/study-notes/JVM/Memory-GC/Execution-Engine/" target="_blank">执行引擎</a></li>\n<li><a href="/blog/study-notes/JVM/Memory-GC/StringTable/" target="_blank">StringTable</a></li>\n<li><a href="/blog/study-notes/JVM/Memory-GC/GC-Overview/" target="_blank">垃圾回收概述</a></li>\n<li><a href="/blog/study-notes/JVM/Memory-GC/GC-Relevant-Algorithms/" target="_blank">垃圾回收相关算法</a></li>\n<li><a href="/blog/study-notes/JVM/Memory-GC/GC-Relevant-Overview/" target="_blank">垃圾回收相关概念</a></li>\n<li><a href="/blog/study-notes/JVM/Memory-GC/GC-Period/" target="_blank">垃圾回收器</a></li>\n</ul>',r:{minutes:.62,words:187},t:"内存与垃圾回收篇",y:"a"}}],["/study-notes/JVM/Performance-Monitoring-Tuning/",{loader:()=>n.e(8060).then(n.bind(n,27390)),meta:{d:16790976e5,l:"2023年3月18日",g:["JVM"],e:'<h2>介绍</h2>\n<blockquote>\n<p>来源Bilibili尚硅谷宋红康老师JVM教程：<a href="https://www.bilibili.com/video/BV1PJ411n7xZ" target="_blank" rel="noopener noreferrer">硅谷2020最新版宋红康JVM教程</a>\n笔记补充：https://gitee.com/vectorx/NOTE_JVM/tree/main</p>\n</blockquote>\n<h2>目录</h2>\n<ul>\n<li><a href="/blog/study-notes/JVM/Performance-Monitoring-Tuning/JVM-Overview/" target="_blank">概述</a></li>\n<li><a href="/blog/study-notes/JVM/Performance-Monitoring-Tuning/JVM-Monitoring-Diagnostic-Tools/" target="_blank">JVM监控及诊断工具-命令行篇</a></li>\n<li><a href="/blog/study-notes/JVM/Performance-Monitoring-Tuning/JVM-Monitoring-Diagnostic-Tools-GUI/" target="_blank">JVM监控及诊断工具-GUI篇</a></li>\n<li><a href="/blog/study-notes/JVM/Performance-Monitoring-Tuning/JVM-Runtime-Parameters/" target="_blank">JVM运行时参数</a></li>\n<li><a href="/blog/study-notes/JVM/Performance-Monitoring-Tuning/GC-Log/" target="_blank">分析GC日志</a></li>\n<li><a href="/blog/study-notes/JVM/Performance-Monitoring-Tuning/OQL/" target="_blank">使用OQL语言查询对象信息</a></li>\n<li><a href="/blog/study-notes/JVM/Performance-Monitoring-Tuning/Heap-Memory-Leak/" target="_blank">浅堆深堆与内存泄露</a></li>\n</ul>',r:{minutes:.43,words:128},t:"性能监控与调优篇",y:"a"}}],["/study-notes/heima-baodian/base/",{loader:()=>n.e(2584).then(n.bind(n,44113)),meta:{d:1722263928e3,c:["黑马"],e:"<blockquote>\n<p><em><strong>基础篇要点：算法、数据结构、基础设计模式</strong></em></p>\n</blockquote>\n<h2>1. 二分查找</h2>\n<p><strong>要求</strong></p>\n<ul>\n<li>能够用自己语言描述二分查找算法</li>\n<li>能够手写二分查找代码</li>\n<li>能够解答一些变化后的考法</li>\n</ul>\n<p><strong>算法描述</strong></p>\n<ol>\n<li>\n<p>前提：有已排序数组 A（假设已经做好）</p>\n</li>\n<li>\n<p>定义左边界 L、右边界 R，确定搜索范围，循环执行二分查找（3、4两步）</p>\n</li>\n<li>\n<p>获取中间索引 M = Floor((L+R) /2)</p>\n</li>\n<li>\n<p>中间索引的值  A[M] 与待搜索的值 T 进行比较</p>\n<p>① A[M] == T 表示找到，返回中间索引</p>\n<p>② A[M] &gt; T，中间值右侧的其它元素都大于 T，无需比较，中间索引左边去找，M - 1 设置为右边界，重新查找</p>\n<p>③ A[M] &lt; T，中间值左侧的其它元素都小于 T，无需比较，中间索引右边去找， M + 1 设置为左边界，重新查找</p>\n</li>\n<li>\n<p>当 L &gt; R 时，表示没有找到，应结束循环</p>\n</li>\n</ol>",r:{minutes:20.15,words:6045},t:"黑马宝典 - 基础篇",y:"a"}}],["/study-notes/heima-baodian/concurrency/",{loader:()=>n.e(956).then(n.bind(n,29829)),meta:{d:172232787e4,c:["黑马"],e:"<h2>1. 线程状态</h2>\n<p><strong>要求</strong></p>\n<ul>\n<li>掌握 Java 线程六种状态</li>\n<li>掌握 Java 线程状态转换</li>\n<li>能理解五种状态与六种状态两种说法的区别</li>\n</ul>\n<p><strong>六种状态及转换</strong></p>\n<figure><figcaption>image-20210831090722658</figcaption></figure>\n<p>分别是</p>\n<ul>\n<li>新建\n<ul>\n<li>当一个线程对象被创建，但还未调用 start 方法时处于<strong>新建</strong>状态</li>\n<li>此时未与操作系统底层线程关联</li>\n</ul>\n</li>\n<li>可运行\n<ul>\n<li>调用了 start 方法，就会由<strong>新建</strong>进入<strong>可运行</strong></li>\n<li>此时与底层线程关联，由操作系统调度执行</li>\n</ul>\n</li>\n<li>终结\n<ul>\n<li>线程内代码已经执行完毕，由<strong>可运行</strong>进入<strong>终结</strong></li>\n<li>此时会取消与底层线程关联</li>\n</ul>\n</li>\n<li>阻塞\n<ul>\n<li>当获取锁失败后，由<strong>可运行</strong>进入 Monitor 的阻塞队列<strong>阻塞</strong>，此时不占用 cpu 时间</li>\n<li>当持锁线程释放锁时，会按照一定规则唤醒阻塞队列中的<strong>阻塞</strong>线程，唤醒后的线程进入<strong>可运行</strong>状态</li>\n</ul>\n</li>\n<li>等待\n<ul>\n<li>当获取锁成功后，但由于条件不满足，调用了 wait() 方法，此时从<strong>可运行</strong>状态释放锁进入 Monitor 等待集合<strong>等待</strong>，同样不占用 cpu 时间</li>\n<li>当其它持锁线程调用 notify() 或 notifyAll() 方法，会按照一定规则唤醒等待集合中的<strong>等待</strong>线程，恢复为<strong>可运行</strong>状态</li>\n</ul>\n</li>\n<li>有时限等待\n<ul>\n<li>当获取锁成功后，但由于条件不满足，调用了 wait(long) 方法，此时从<strong>可运行</strong>状态释放锁进入 Monitor 等待集合进行<strong>有时限等待</strong>，同样不占用 cpu 时间</li>\n<li>当其它持锁线程调用 notify() 或 notifyAll() 方法，会按照一定规则唤醒等待集合中的<strong>有时限等待</strong>线程，恢复为<strong>可运行</strong>状态，并重新去竞争锁</li>\n<li>如果等待超时，也会从<strong>有时限等待</strong>状态恢复为<strong>可运行</strong>状态，并重新去竞争锁</li>\n<li>还有一种情况是调用 sleep(long) 方法也会从<strong>可运行</strong>状态进入<strong>有时限等待</strong>状态，但与 Monitor 无关，不需要主动唤醒，超时时间到自然恢复为<strong>可运行</strong>状态</li>\n</ul>\n</li>\n</ul>",r:{minutes:12.43,words:3729},t:"黑马宝典 - 并发篇",y:"a"}}],["/study-notes/heima-baodian/framework/",{loader:()=>n.e(2187).then(n.bind(n,12328)),meta:{d:172232787e4,c:["黑马"],e:"<h2>1. Spring refresh 流程</h2>\n<p><strong>要求</strong></p>\n<ul>\n<li>掌握 refresh 的 12 个步骤</li>\n</ul>\n<p><strong>Spring refresh 概述</strong></p>\n<p>refresh 是 AbstractApplicationContext 中的一个方法，负责初始化 ApplicationContext 容器，容器必须调用 refresh 才能正常工作。它的内部主要会调用 12 个方法，我们把它们称为 refresh 的 12 个步骤：</p>\n<ol>\n<li>\n<p>prepareRefresh</p>\n</li>\n<li>\n<p>obtainFreshBeanFactory</p>\n</li>\n<li>\n<p>prepareBeanFactory</p>\n</li>\n<li>\n<p>postProcessBeanFactory</p>\n</li>\n<li>\n<p>invokeBeanFactoryPostProcessors</p>\n</li>\n<li>\n<p>registerBeanPostProcessors</p>\n</li>\n<li>\n<p>initMessageSource</p>\n</li>\n<li>\n<p>initApplicationEventMulticaster</p>\n</li>\n<li>\n<p>onRefresh</p>\n</li>\n<li>\n<p>registerListeners</p>\n</li>\n<li>\n<p>finishBeanFactoryInitialization</p>\n</li>\n<li>\n<p>finishRefresh</p>\n</li>\n</ol>",r:{minutes:26.86,words:8058},t:"黑马宝典 - 框架篇",y:"a"}}],["/study-notes/heima-baodian/jvm/",{loader:()=>n.e(88).then(n.bind(n,21990)),meta:{d:172232787e4,c:["黑马"],e:"<h2>1. JVM 内存结构</h2>\n<p><strong>要求</strong></p>\n<ul>\n<li>掌握 JVM 内存结构划分</li>\n<li>尤其要知道方法区、永久代、元空间的关系</li>\n</ul>\n<p><strong>结合一段 java 代码的执行理解内存划分</strong></p>\n<figure><figcaption>image-20210831165728217</figcaption></figure>\n<ul>\n<li>执行 javac 命令编译源代码为字节码</li>\n<li>执行 java 命令\n<ol>\n<li>创建 JVM，调用类加载子系统加载 class，将类的信息存入<strong>方法区</strong></li>\n<li>创建 main 线程，使用的内存区域是 <strong>JVM 虚拟机栈</strong>，开始执行 main 方法代码</li>\n<li>如果遇到了未见过的类，会继续触发类加载过程，同样会存入<strong>方法区</strong></li>\n<li>需要创建对象，会使用<strong>堆</strong>内存来存储对象</li>\n<li>不再使用的对象，会由<strong>垃圾回收器</strong>在内存不足时回收其内存</li>\n<li>调用方法时，方法内的局部变量、方法参数所使用的是  <strong>JVM 虚拟机栈</strong>中的栈帧内存</li>\n<li>调用方法时，先要到<strong>方法区</strong>获得到该方法的字节码指令，由<strong>解释器</strong>将字节码指令解释为机器码执行</li>\n<li>调用方法时，会将要执行的指令行号读到<strong>程序计数器</strong>，这样当发生了线程切换，恢复时就可以从中断的位置继续</li>\n<li>对于非 java 实现的方法调用，使用内存称为<strong>本地方法栈</strong>（见说明）</li>\n<li>对于热点方法调用，或者频繁的循环代码，由 <strong>JIT 即时编译器</strong>将这些代码编译成机器码缓存，提高执行性能</li>\n</ol>\n</li>\n</ul>",r:{minutes:19.45,words:5836},t:"黑马宝典 - 虚拟机篇",y:"a"}}],["/study-notes/heima-java-bagu/JVM/",{loader:()=>n.e(7256).then(n.bind(n,84318)),meta:{d:1722091391e3,c:"面试",e:'<div class="hint-container tip">\n<p class="hint-container-title">提示</p>\n<p>视频来源：\n<a href="https://www.bilibili.com/video/BV1yT411H7YK/?vd_source=7138dfc78c49f602f8d3ed8cfbf0513d" target="_blank" rel="noopener noreferrer">新版Java面试专题视频教程，java八股文面试全套真题+深度详解（含大厂高频面试真题）</a></p>\n</div>\n<figure><figcaption>img_2</figcaption></figure>',r:{minutes:52.93,words:15878},t:"JVM相关面试题",y:"a"}}],["/study-notes/heima-java-bagu/Microservices/",{loader:()=>n.e(3999).then(n.bind(n,22873)),meta:{d:1722091391e3,c:"面试",e:"<h3>Spring Cloud 5大组件有哪些？</h3>\n<p>早期我们一般认为的Spring Cloud五大组件是</p>\n<ul>\n<li>Eureka   : 注册中心</li>\n<li>Ribbon  : 负载均衡</li>\n<li>Feign     : 远程调用</li>\n<li>Hystrix :  服务熔断</li>\n<li>Zuul/Gateway  : 网关</li>\n</ul>\n<p>随着SpringCloudAlibba在国内兴起 , 我们项目中使用了一些阿里巴巴的组件</p>\n<ul>\n<li>注册中心/配置中心 Nacos</li>\n<li>负载均衡 Ribbon</li>\n<li>服务调用 Feign</li>\n<li>服务保护 sentinel</li>\n<li>服务网关 Gateway</li>\n</ul>",r:{minutes:10.65,words:3196},t:"微服务面试题-参考回答.md",y:"a"}}],["/study-notes/heima-java-bagu/MySQL/",{loader:()=>n.e(7725).then(n.bind(n,48366)),meta:{d:1722091391e3,c:"面试",e:'<div class="hint-container tip">\n<p class="hint-container-title">提示</p>\n<p>视频来源：<a href="https://www.bilibili.com/video/BV1yT411H7YK/?vd_source=7138dfc78c49f602f8d3ed8cfbf0513d" target="_blank" rel="noopener noreferrer">新版Java面试专题视频教程，java八股文面试全套真题+深度详解（含大厂高频面试真题）</a></p>\n</div>\n<h2>总体介绍：</h2>\n<figure><figcaption>总体介绍</figcaption></figure>',r:{minutes:11.72,words:3517},t:"MySQL篇",y:"a"}}],["/study-notes/heima-java-bagu/MySQL/more.html",{loader:()=>n.e(6556).then(n.bind(n,92062)),meta:{d:1722091391e3,c:"面试",e:"<h3>1、 MySQL中，如何定位慢查询?</h3>\n<ol>\n<li>当时做压测的时候有的接口非常的慢，接口的响应时间超过了2秒以上，因为我们当时的系统部署了运维的监控系统 <code>Skywalking</code> ，在展示的报表中可以看到是哪一个接口比较慢，并且可以分析这个接口哪部分比较慢，这里可以看到SQL的具体的执行时间，所以可以定位是哪个sql出了问题。</li>\n<li>如果，项目中没有这种运维的监控系统，其实在MySQL中也提供了慢日志查询的功能，可以在MySQL的系统配置文件中开启这个慢日志的功能，并且也可以设置SQL执行超过多少时间来记录到一个日志文件中，我记得上一个项目配置的是2秒，只要SQL执行的时间超过了2秒就会记录到日志文件中，我们就可以在日志文件找到执行比较慢的SQL了。</li>\n</ol>",r:{minutes:12.57,words:3770},t:"MySQL面试题-参考回答",y:"a"}}],["/study-notes/heima-java-bagu/Redis/",{loader:()=>n.e(1760).then(n.bind(n,47468)),meta:{d:1722091391e3,c:"面试",e:'<div class="hint-container tip">\n<p class="hint-container-title">提示</p>\n<p>视频来源：<a href="https://www.bilibili.com/video/BV1yT411H7YK/?vd_source=7138dfc78c49f602f8d3ed8cfbf0513d" target="_blank" rel="noopener noreferrer">新版Java面试专题视频教程，java八股文面试全套真题+深度详解（含大厂高频面试真题）</a></p>\n<p>Redis更多详细整体知识：https://www.bilibili.com/video/BV1cr4y1671t/?spm_id_from=333.337.search-card.all.click</p>\n</div>',r:{minutes:17.66,words:5298},t:"Redis篇",y:"a"}}],["/study-notes/heima-java-bagu/Redis/more.html",{loader:()=>n.e(6663).then(n.bind(n,61494)),meta:{d:1722091391e3,c:"面试",e:"<blockquote>\n<p><strong>面试官</strong>：什么是缓存穿透 ? 怎么解决 ?</p>\n<p><strong>候选人</strong>：</p>\n<p>嗯~~，我想一下</p>\n<p>缓存穿透是指查询一个一定<strong>不存在</strong>的数据，如果从存储层查不到数据则不写入缓存，这将导致这个不存在的数据每次请求都要到 DB 去查询，可能导致 DB 挂掉。这种情况大概率是遭到了攻击。</p>\n<p>解决方案的话，我们通常都会用布隆过滤器来解决它</p>\n</blockquote>\n<blockquote>\n<p><strong>面试官</strong>：好的，你能介绍一下布隆过滤器吗？</p>\n<p><strong>候选人</strong>：</p>\n<p>嗯，是这样~</p>\n<p>布隆过滤器主要是用于检索一个元素是否在一个集合中。我们当时使用的是redisson实现的布隆过滤器。</p>\n<p>它的底层主要是先去初始化一个比较大数组，里面存放的二进制0或1。在一开始都是0，当一个key来了之后经过3次hash计算，模于数组长度找到数据的下标然后把数组中原来的0改为1，这样的话，三个数组的位置就能标明一个key的存在。查找的过程也是一样的。</p>\n<p>当然是有缺点的，布隆过滤器有可能会产生一定的误判，我们一般可以设置这个误判率，大概不会超过5%，其实这个误判是必然存在的，要不就得增加数组的长度，其实已经算是很合适了，5%以内的误判率一般的项目也能接受，不至于高并发下压倒数据库。</p>\n<p><strong>面试官</strong>：什么是缓存击穿 ? 怎么解决 ?</p>\n<p><strong>候选人</strong>：</p>\n<p>嗯！！</p>\n<p>缓存击穿的意思是对于设置了过期时间的key，缓存在某个时间点过期的时候，恰好这时间点对这个Key有大量的并发请求过来，这些请求发现缓存过期一般都会从后端 DB 加载数据并回设到缓存，这个时候大并发的请求可能会瞬间把 DB 压垮。</p>\n<p>解决方案有两种方式：</p>\n<p>第一可以使用互斥锁：当缓存失效时，不立即去load db，先使用如 Redis 的 setnx 去设置一个互斥锁，当操作成功返回时再进行 load db的操作并回设缓存，否则重试get缓存的方法</p>\n<p>第二种方案可以设置当前key逻辑过期，大概是思路如下：</p>\n<p>①：在设置key的时候，设置一个过期时间字段一块存入缓存中，不给当前key设置过期时间</p>\n<p>②：当查询的时候，从redis取出数据后判断时间是否过期</p>\n<p>③：如果过期则开通另外一个线程进行数据同步，当前线程正常返回数据，这个数据不是最新</p>\n<p>当然两种方案各有利弊：</p>\n<p>如果选择数据的强一致性，建议使用分布式锁的方案，性能上可能没那么高，锁需要等，也有可能产生死锁的问题</p>\n<p>如果选择key的逻辑删除，则优先考虑的高可用性，性能比较高，但是数据同步这块做不到强一致。</p>\n<p><strong>面试官</strong>：什么是缓存雪崩 ? 怎么解决 ?</p>\n<p><strong>候选人</strong>：</p>\n<p>嗯！！</p>\n<p>缓存雪崩意思是设置缓存时采用了相同的过期时间，导致缓存在某一时刻同时失效，请求全部转发到DB，DB 瞬时压力过重雪崩。与缓存击穿的区别：雪崩是很多key，击穿是某一个key缓存。</p>\n<p>解决方案主要是可以将缓存失效时间分散开，比如可以在原有的失效时间基础上增加一个随机值，比如1-5分钟随机，这样每一个缓存的过期时间的重复率就会降低，就很难引发集体失效的事件。</p>\n<p><strong>面试官</strong>：redis做为缓存，mysql的数据如何与redis进行同步呢？（双写一致性）</p>\n<p><strong>候选人</strong>：嗯！就说我最近做的这个项目，里面有xxxx（<strong>根据自己的简历上写</strong>）的功能，需要让数据库与redis高度保持一致，因为要求时效性比较高，我们当时采用的读写锁保证的强一致性。</p>\n<p>我们采用的是redisson实现的读写锁，在读的时候添加共享锁，可以保证读读不互斥，读写互斥。当我们更新数据的时候，添加排他锁，它是读写，读读都互斥，这样就能保证在写数据的同时是不会让其他线程读数据的，避免了脏数据。这里面需要注意的是读方法和写方法上需要使用同一把锁才行。</p>\n<p><strong>面试官</strong>：那这个排他锁是如何保证读写、读读互斥的呢？</p>\n<p><strong>候选人</strong>：其实排他锁底层使用也是setnx，保证了同时只能有一个线程操作锁住的方法</p>\n<p><strong>面试官</strong>：你听说过延时双删吗？为什么不用它呢？</p>\n<p><strong>候选人</strong>：延迟双删，如果是写操作，我们先把缓存中的数据删除，然后更新数据库，最后再延时删除缓存中的数据，其中这个延时多久不太好确定，在延时的过程中可能会出现脏数据，并不能保证强一致性，所以没有采用它。</p>\n<p><strong>面试官</strong>：redis做为缓存，mysql的数据如何与redis进行同步呢？（双写一致性）</p>\n<p><strong>候选人</strong>：嗯！就说我最近做的这个项目，里面有xxxx（<strong>根据自己的简历上写</strong>）的功能，数据同步可以有一定的延时（符合大部分业务）</p>\n<p>我们当时采用的阿里的canal组件实现数据同步：不需要更改业务代码，部署一个canal服务。canal服务把自己伪装成mysql的一个从节点，当mysql数据更新以后，canal会读取binlog数据，然后在通过canal的客户端获取到数据，更新缓存即可。</p>\n<p><strong>面试官</strong>：redis做为缓存，数据的持久化是怎么做的？</p>\n<p><strong>候选人</strong>：在Redis中提供了两种数据持久化的方式：1、RDB  2、AOF</p>\n<p><strong>面试官</strong>：这两种持久化方式有什么区别呢？</p>\n<p><strong>候选人</strong>：RDB是一个快照文件，它是把redis内存存储的数据写到磁盘上，当redis实例宕机恢复数据的时候，方便从RDB的快照文件中恢复数据。</p>\n<p>AOF的含义是追加文件，当redis操作写命令的时候，都会存储这个文件中，当redis实例宕机恢复数据的时候，会从这个文件中再次执行一遍命令来恢复数据</p>\n<p><strong>面试官</strong>：这两种方式，哪种恢复的比较快呢？</p>\n<p><strong>候选人</strong>：RDB因为是二进制文件，在保存的时候体积也是比较小的，它恢复的比较快，但是它有可能会丢数据，我们通常在项目中也会使用AOF来恢复数据，虽然AOF恢复的速度慢一些，但是它丢数据的风险要小很多，在AOF文件中可以设置刷盘策略，我们当时设置的就是每秒批量写入一次命令</p>\n<p><strong>面试官</strong>：Redis的数据过期策略有哪些 ?</p>\n<p><strong>候选人</strong>：</p>\n<p>嗯~，在redis中提供了两种数据过期删除策略</p>\n<p>第一种是惰性删除，在设置该key过期时间后，我们不去管它，当需要该key时，我们在检查其是否过期，如果过期，我们就删掉它，反之返回该key。</p>\n<p>第二种是 定期删除，就是说每隔一段时间，我们就对一些key进行检查，删除里面过期的key</p>\n<p>定期清理的两种模式：</p>\n<ul>\n<li>SLOW模式是定时任务，执行频率默认为10hz，每次不超过25ms，以通过修改配置文件redis.conf 的 <strong>hz</strong> 选项来调整这个次数</li>\n<li>FAST模式执行频率不固定，每次事件循环会尝试执行，但两次间隔不低于2ms，每次耗时不超过1ms</li>\n</ul>\n<p>Redis的过期删除策略：<strong>惰性删除 + 定期删除</strong>两种策略进行配合使用。</p>\n<p><strong>面试官</strong>：Redis的数据淘汰策略有哪些 ?</p>\n<p><strong>候选人</strong>：</p>\n<p>嗯，这个在redis中提供了很多种，默认是noeviction，不删除任何数据，内部不足直接报错</p>\n<p>是可以在redis的配置文件中进行设置的，里面有两个非常重要的概念，一个是LRU，另外一个是LFU</p>\n<p>LRU的意思就是最少最近使用，用当前时间减去最后一次访问时间，这个值越大则淘汰优先级越高。</p>\n<p>LFU的意思是最少频率使用。会统计每个key的访问频率，值越小淘汰优先级越高</p>\n<p>我们在项目设置的allkeys-lru，挑选最近最少使用的数据淘汰，把一些经常访问的key留在redis中</p>\n<p><strong>面试官</strong>：数据库有1000万数据 ,Redis只能缓存20w数据, 如何保证Redis中的数据都是热点数据 ?</p>\n<p><strong>候选人</strong>：</p>\n<p>嗯，我想一下~~</p>\n<p>可以使用 allkeys-lru （挑选最近最少使用的数据淘汰）淘汰策略，那留下来的都是经常访问的热点数据</p>\n<p><strong>面试官</strong>：Redis的内存用完了会发生什么？</p>\n<p><strong>候选人</strong>：</p>\n<p>嗯~，这个要看redis的数据淘汰策略是什么，如果是默认的配置，redis内存用完以后则直接报错。我们当时设置的 allkeys-lru 策略。把最近最常访问的数据留在缓存中。</p>\n<p><strong>面试官</strong>：Redis分布式锁如何实现 ?</p>\n<p><strong>候选人</strong>：嗯，在redis中提供了一个命令setnx(SET if not exists)</p>\n<p>由于redis的单线程的，用了命令之后，只能有一个客户端对某一个key设置值，在没有过期或删除key的时候是其他客户端是不能设置这个key的</p>\n<p><strong>面试官</strong>：好的，那你如何控制Redis实现分布式锁有效时长呢？</p>\n<p><strong>候选人</strong>：嗯，的确，redis的setnx指令不好控制这个问题，我们当时采用的redis的一个框架redisson实现的。</p>\n<p>在redisson中需要手动加锁，并且可以控制锁的失效时间和等待时间，当锁住的一个业务还没有执行完成的时候，在redisson中引入了一个看门狗机制，就是说每隔一段时间就检查当前业务是否还持有锁，如果持有就增加加锁的持有时间，当业务执行完成之后需要使用释放锁就可以了</p>\n<p>还有一个好处就是，在高并发下，一个业务有可能会执行很快，先客户1持有锁的时候，客户2来了以后并不会马上拒绝，它会自旋不断尝试获取锁，如果客户1释放之后，客户2就可以马上持有锁，性能也得到了提升。</p>\n<p><strong>面试官</strong>：好的，redisson实现的分布式锁是可重入的吗？</p>\n<p><strong>候选人</strong>：嗯，是可以重入的。这样做是为了避免死锁的产生。这个重入其实在内部就是判断是否是当前线程持有的锁，如果是当前线程持有的锁就会计数，如果释放锁就会在计算上减一。在存储数据的时候采用的hash结构，大key可以按照自己的业务进行定制，其中小key是当前线程的唯一标识，value是当前线程重入的次数</p>\n<p><strong>面试官</strong>：redisson实现的分布式锁能解决主从一致性的问题吗</p>\n<p><strong>候选人</strong>：这个是不能的，比如，当线程1加锁成功后，master节点数据会异步复制到slave节点，此时当前持有Redis锁的master节点宕机，slave节点被提升为新的master节点，假如现在来了一个线程2，再次加锁，会在新的master节点上加锁成功，这个时候就会出现两个节点同时持有一把锁的问题。</p>\n<p>我们可以利用redisson提供的红锁来解决这个问题，它的主要作用是，不能只在一个redis实例上创建锁，应该是在多个redis实例上创建锁，并且要求在大多数redis节点上都成功创建锁，红锁中要求是redis的节点数量要过半。这样就能避免线程1加锁成功后master节点宕机导致线程2成功加锁到新的master节点上的问题了。</p>\n<p>但是，如果使用了红锁，因为需要同时在多个节点上都添加锁，性能就变的很低了，并且运维维护成本也非常高，所以，我们一般在项目中也不会直接使用红锁，并且官方也暂时废弃了这个红锁</p>\n<p><strong>面试官</strong>：好的，如果业务非要保证数据的强一致性，这个该怎么解决呢？</p>\n<p>**候选人：**嗯~，redis本身就是支持高可用的，做到强一致性，就非常影响性能，所以，如果有强一致性要求高的业务，建议使用zookeeper实现的分布式锁，它是可以保证强一致性的。</p>\n<p><strong>面试官</strong>：Redis集群有哪些方案, 知道嘛 ?</p>\n<p><strong>候选人</strong>：嗯~~，在Redis中提供的集群方案总共有三种：主从复制、哨兵模式、Redis分片集群</p>\n<p><strong>面试官</strong>：那你来介绍一下主从同步</p>\n<p><strong>候选人</strong>：嗯，是这样的，单节点Redis的并发能力是有上限的，要进一步提高Redis的并发能力，可以搭建主从集群，实现读写分离。一般都是一主多从，主节点负责写数据，从节点负责读数据，主节点写入数据之后，需要把数据同步到从节点中</p>\n<p><strong>面试官</strong>：能说一下，主从同步数据的流程</p>\n<p><strong>候选人</strong>：嗯~~，好！主从同步分为了两个阶段，一个是全量同步，一个是增量同步</p>\n<p>全量同步是指从节点第一次与主节点建立连接的时候使用全量同步，流程是这样的：</p>\n<p>第一：从节点请求主节点同步数据，其中从节点会携带自己的replication id和offset偏移量。</p>\n<p>第二：主节点判断是否是第一次请求，主要判断的依据就是，主节点与从节点是否是同一个replication id，如果不是，就说明是第一次同步，那主节点就会把自己的replication id和offset发送给从节点，让从节点与主节点的信息保持一致。</p>\n<p>第三：在同时主节点会执行bgsave，生成rdb文件后，发送给从节点去执行，从节点先把自己的数据清空，然后执行主节点发送过来的rdb文件，这样就保持了一致</p>\n<p>当然，如果在rdb生成执行期间，依然有请求到了主节点，而主节点会以命令的方式记录到缓冲区，缓冲区是一个日志文件，最后把这个日志文件发送给从节点，这样就能保证主节点与从节点完全一致了，后期再同步数据的时候，都是依赖于这个日志文件，这个就是全量同步</p>\n<p>增量同步指的是，当从节点服务重启之后，数据就不一致了，所以这个时候，从节点会请求主节点同步数据，主节点还是判断不是第一次请求，不是第一次就获取从节点的offset值，然后主节点从命令日志中获取offset值之后的数据，发送给从节点进行数据同步</p>\n<p><strong>面试官</strong>：怎么保证Redis的高并发高可用</p>\n<p><strong>候选人</strong>：首先可以搭建主从集群，再加上使用redis中的哨兵模式，哨兵模式可以实现主从集群的自动故障恢复，里面就包含了对主从服务的监控、自动故障恢复、通知；如果master故障，Sentinel会将一个slave提升为master。当故障实例恢复后也以新的master为主；同时Sentinel也充当Redis客户端的服务发现来源，当集群发生故障转移时，会将最新信息推送给Redis的客户端，所以一般项目都会采用哨兵的模式来保证redis的高并发高可用</p>\n<p><strong>面试官</strong>：你们使用redis是单点还是集群，哪种集群</p>\n<p><strong>候选人</strong>：嗯！，我们当时使用的是主从（1主1从）加哨兵。一般单节点不超过10G内存，如果Redis内存不足则可以给不同服务分配独立的Redis主从节点。尽量不做分片集群。因为集群维护起来比较麻烦，并且集群之间的心跳检测和数据通信会消耗大量的网络带宽，也没有办法使用lua脚本和事务</p>\n<p><strong>面试官</strong>：redis集群脑裂，该怎么解决呢？</p>\n<p><strong>候选人</strong>：嗯！ 这个在项目很少见，不过脑裂的问题是这样的，我们现在用的是redis的哨兵模式集群的</p>\n<p>有的时候由于网络等原因可能会出现脑裂的情况，就是说，由于redis master节点和redis salve节点和sentinel处于不同的网络分区，使得sentinel没有能够心跳感知到master，所以通过选举的方式提升了一个salve为master，这样就存在了两个master，就像大脑分裂了一样，这样会导致客户端还在old master那里写入数据，新节点无法同步数据，当网络恢复后，sentinel会将old master降为salve，这时再从新master同步数据，这会导致old master中的大量数据丢失。</p>\n<p>关于解决的话，我记得在redis的配置中可以设置：第一可以设置最少的salve节点个数，比如设置至少要有一个从节点才能同步数据，第二个可以设置主从数据复制和同步的延迟时间，达不到要求就拒绝请求，就可以避免大量的数据丢失</p>\n<p><strong>面试官</strong>：redis的分片集群有什么作用</p>\n<p><strong>候选人</strong>：分片集群主要解决的是，海量数据存储的问题，集群中有多个master，每个master保存不同数据，并且还可以给每个master设置多个slave节点，就可以继续增大集群的高并发能力。同时每个master之间通过ping监测彼此健康状态，就类似于哨兵模式了。当客户端请求可以访问集群任意节点，最终都会被转发到正确节点</p>\n<p><strong>面试官</strong>：Redis分片集群中数据是怎么存储和读取的？</p>\n<p><strong>候选人</strong>：</p>\n<p>嗯~，在redis集群中是这样的</p>\n<p>Redis 集群引入了哈希槽的概念，有 16384 个哈希槽，集群中每个主节点绑定了一定范围的哈希槽范围， key通过 CRC16 校验后对 16384 取模来决定放置哪个槽，通过槽找到对应的节点进行存储。</p>\n<p>取值的逻辑是一样的</p>\n<p><strong>面试官</strong>：Redis是单线程的，但是为什么还那么快？</p>\n<p><strong>候选人</strong>：</p>\n<p>嗯，这个有几个原因吧~~~</p>\n<p>1、完全基于内存的，C语言编写</p>\n<p>2、采用单线程，避免不必要的上下文切换可竞争条件</p>\n<p>3、使用多路I/O复用模型，非阻塞IO</p>\n<p>例如：bgsave 和 bgrewriteaof  都是在<strong>后台</strong>执行操作，不影响主线程的正常使用，不会产生阻塞</p>\n<p><strong>面试官</strong>：能解释一下I/O多路复用模型？</p>\n<p><strong>候选人</strong>：嗯~~，I/O多路复用是指利用单个线程来同时监听多个Socket ，并在某个Socket可读、可写时得到通知，从而避免无效的等待，充分利用CPU资源。目前的I/O多路复用都是采用的epoll模式实现，它会在通知用户进程Socket就绪的同时，把已就绪的Socket写入用户空间，不需要挨个遍历Socket来判断是否就绪，提升了性能。</p>\n<p>其中Redis的网络模型就是使用I/O多路复用结合事件的处理器来应对多个Socket请求，比如，提供了连接应答处理器、命令回复处理器，命令请求处理器；</p>\n<p>在Redis6.0之后，为了提升更好的性能，在命令回复处理器使用了多线程来处理回复事件，在命令请求处理器中，将命令的转换使用了多线程，增加命令转换速度，在命令执行的时候，依然是单线程</p>\n</blockquote>",r:{minutes:17.48,words:5243},t:"Redis面试参考回答",y:"a"}}],["/study-notes/heima-java-bagu/collection/",{loader:()=>n.e(1061).then(n.bind(n,66665)),meta:{d:1722091391e3,c:"面试",e:'<div class="hint-container tip">\n<p class="hint-container-title">提示</p>\n<p>视频来源：\n<a href="https://www.bilibili.com/video/BV1yT411H7YK?p=69&amp;vd_source=7138dfc78c49f602f8d3ed8cfbf0513d" target="_blank" rel="noopener noreferrer">集合篇</a></p>\n</div>\n<h2>Java集合框架体系 - 介绍</h2>\n<figure><figcaption>img.png</figcaption></figure>',r:{minutes:23.68,words:7103},t:"常见集合(手打)",y:"a"}}],["/study-notes/heima-java-bagu/collection/more.html",{loader:()=>n.e(452).then(n.bind(n,38056)),meta:{d:1722091391e3,c:"面试",e:"<h2>导学</h2>\n<p>这次课程主要涉及到的是List和Map相关的面试题，比较高频就是</p>\n<ul>\n<li>\n<p>ArrayList</p>\n</li>\n<li>\n<p>LinkedList</p>\n</li>\n<li>\n<p>HashMap</p>\n</li>\n<li>\n<p>ConcurrentHashMap</p>\n</li>\n</ul>\n<figure><figcaption>image-20230427162524322</figcaption></figure>\n<ul>\n<li>ArrayList底层实现是数组</li>\n<li>LinkedList底层实现是双向链表</li>\n<li>HashMap的底层实现使用了众多数据结构，包含了数组、链表、散列表、红黑树等</li>\n</ul>",r:{minutes:42.08,words:12625},t:"Java集合相关面试题",y:"a"}}],["/study-notes/heima-java-bagu/concurrent-programming/",{loader:()=>n.e(7052).then(n.bind(n,37248)),meta:{d:1697328e6,l:"2023年10月15日",c:"面试",e:'<div class="hint-container tip">\n<p class="hint-container-title">提示</p>\n<p><a href="https://www.bilibili.com/video/BV1yT411H7YK?p=86&amp;spm_id_from=pageDriver&amp;vd_source=7138dfc78c49f602f8d3ed8cfbf0513d" target="_blank" rel="noopener noreferrer">多线程相关面试题视频</a></p>\n<p><a href="https://pan.baidu.com/disk/main?from=homeFlow&amp;login_type=weixin&amp;_at_=1697339186893#/index?category=all&amp;path=%2F%E9%BB%91%E9%A9%AC%E9%9D%A2%E8%AF%952023%2F08-%E5%B9%B6%E5%8F%91%E7%BC%96%E7%A8%8B%E7%AF%87%2F%E4%BB%A3%E7%A0%81" target="_blank" rel="noopener noreferrer">代码资源</a></p>\n<p><a href="https://gitee.com/cuckoocry/heima-demo" target="_blank" rel="noopener noreferrer">代码地址【经过整理组合】</a></p>\n</div>',r:{minutes:43.18,words:12953},t:"多线程相关面试题(手打)",y:"a"}}],["/study-notes/heima-java-bagu/concurrent-programming/more.html",{loader:()=>n.e(7371).then(n.bind(n,10918)),meta:{d:1697328e6,l:"2023年10月15日",c:"面试",e:'<div class="hint-container tip">\n<p class="hint-container-title">提示</p>\n<p><code>文档说明</code></p>\n<blockquote>\n<p>在文档中对所有的面试题都进行了<strong>难易程度</strong>和<strong>出现频率</strong>的等级说明</p>\n<p>星数越多代表权重越大，最多五颗星（☆☆☆☆☆） 最少一颗星（☆）</p>\n</blockquote>\n</div>\n<h2>1.线程的基础知识</h2>\n<h3>1.1 线程和进程的区别？</h3>\n<blockquote>\n<p>难易程度：☆☆</p>\n<p>出现频率：☆☆☆</p>\n</blockquote>',r:{minutes:64.27,words:19281},t:"Java多线程相关面试题",y:"a"}}],["/study-notes/heima-java-bagu/enterprise-scenarios/design-patterns.html",{loader:()=>n.e(2262).then(n.bind(n,5083)),meta:{d:1722091391e3,c:"面试",e:'<div class="hint-container tip">\n<p class="hint-container-title">提示</p>\n<p>视频来源：\n<a href="https://www.bilibili.com/video/BV1yT411H7YK/?vd_source=7138dfc78c49f602f8d3ed8cfbf0513d" target="_blank" rel="noopener noreferrer">新版Java面试专题视频教程，java八股文面试全套真题+深度详解（含大厂高频面试真题）</a></p>\n</div>\n<h2>前言</h2>\n<p>在平时的开发中，涉及到设计模式的有两块内容，第一个是我们平时使用的框架（比如spring、mybatis等），第二个是我们自己开发业务使用的设计模式。</p>',r:{minutes:20.2,words:6060},t:"01-设计模式",y:"a"}}],["/study-notes/heima-java-bagu/enterprise-scenarios/technical-scenarios.html",{loader:()=>n.e(6921).then(n.bind(n,30885)),meta:{d:1722091391e3,c:"面试",e:'<div class="hint-container tip">\n<p class="hint-container-title">提示</p>\n<p>视频来源：\n<a href="https://www.bilibili.com/video/BV1yT411H7YK/?vd_source=7138dfc78c49f602f8d3ed8cfbf0513d" target="_blank" rel="noopener noreferrer">新版Java面试专题视频教程，java八股文面试全套真题+深度详解（含大厂高频面试真题）</a></p>\n</div>\n<h2>常见技术场景</h2>\n<h3>1.单点登录这块怎么实现的</h3>',r:{minutes:10.35,words:3106},t:"02-常见技术场景",y:"a"}}],["/study-notes/heima-java-bagu/frame/",{loader:()=>n.e(4126).then(n.bind(n,73259)),meta:{d:1722091391e3,c:"面试",e:'<div class="hint-container tip">\n<p class="hint-container-title">提示</p>\n<p>视频来源：<a href="https://www.bilibili.com/video/BV1yT411H7YK/?vd_source=7138dfc78c49f602f8d3ed8cfbf0513d" target="_blank" rel="noopener noreferrer">新版Java面试专题视频教程，java八股文面试全套真题+深度详解（含大厂高频面试真题）</a></p>\n</div>\n<p>总览：</p>\n<figure><figcaption>img.png</figcaption></figure>',r:{minutes:10.23,words:3068},t:"框架篇概览",y:"a"}}],["/study-notes/heima-java-bagu/message-middleware/",{loader:()=>n.e(5067).then(n.bind(n,71373)),meta:{d:1722091391e3,c:"面试",e:'<div class="hint-container tip">\n<p class="hint-container-title">提示</p>\n</div>\n<h2>总览</h2>\n<p>TODO  RocketMQ</p>\n',r:{minutes:.05,words:14},t:"消息中间件",y:"a"}}],["/study-notes/heima-java-bagu/message-middleware/more.html",{loader:()=>n.e(7938).then(n.bind(n,59791)),meta:{d:1722091391e3,c:"面试",e:"<h3>1、RabbitMQ-如何保证消息不丢失</h3>\n<p>我们当时MYSQL和Redis的数据双写一致性就是采用RabbitMQ实现同步的，这里面就要求了消息的高可用性，我们要保证消息的不丢失。主要从三个层面考虑</p>\n<p>1、第一个是开启生产者确认机制，确保生产者的消息能到达队列，如果报错可以先记录到日志中，再去修复数据</p>\n<p>2、第二个是开启持久化功能，确保消息未消费前在队列中不会丢失，其中的交换机、队列、和消息都要做持久化</p>\n<p>3、第三个是开启消费者确认机制为auto，由spring确认消息处理成功后完成ack，当然也需要设置一定的重试次数，我们当时设置了3次，如果重试3次还没有收到消息，就将失败后的消息投递到异常交换机，交由人工处理</p>",r:{minutes:9.51,words:2852},t:"消息中间件面试题-参考回答",y:"a"}}],["/study-notes/shangguigu-second/ABA/",{loader:()=>n.e(3265).then(n.bind(n,3130)),meta:{d:16784928e5,l:"2023年3月11日",g:["JUC","CAS","ABA问题"],e:"<h2>连环套路</h2>\n<p>从AtomicInteger引出下面的问题</p>\n<p>CAS -&gt; Unsafe -&gt; CAS底层思想 -&gt; ABA -&gt; 原子引用更新 -&gt; 如何规避ABA问题</p>\n<h2>ABA问题是什么</h2>\n<p>狸猫换太子</p>\n<figure><figcaption>image-20200311212442057</figcaption></figure>\n<p>假设现在有两个线程，分别是T1 和 T2，然后T1执行某个操作的时间为10秒，T2执行某个时间的操作是2秒，最开始AB两个线程，分别从主内存中获取A值，但是因为B的执行速度更快，他先把A的值改成B，然后在修改成A，然后执行完毕，T1线程在10秒后，执行完毕，判断内存中的值为A，并且和自己预期的值一样，它就认为没有人更改了主内存中的值，就快乐的修改成B，但是实际上 可能中间经历了 ABCDEFA 这个变换，也就是中间的值经历了狸猫换太子。</p>",r:{minutes:13.98,words:4194},t:"3、原子类AtomicInteger的ABA问题",y:"a"}}],["/study-notes/shangguigu-second/ArrayList/",{loader:()=>n.e(3894).then(n.bind(n,75892)),meta:{d:16784928e5,l:"2023年3月11日",g:["JUC","Volatile"],e:'<h2>前言</h2>\n<p>1、当我们执行下面语句的时候，底层进行了什么操作</p>\n<div class="language- line-numbers-mode" data-highlighter="shiki" data-ext="" data-title="" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span>new ArrayList&lt;Integer&gt;();</span></span></code></pre>\n<div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0"><div class="line-number"></div></div></div>',r:{minutes:3.73,words:1119},t:"4、Collection线程不安全的举例",y:"a"}}],["/study-notes/shangguigu-second/BlockingQueue/",{loader:()=>n.e(3629).then(n.bind(n,50517)),meta:{d:16784928e5,l:"2023年3月11日",c:["JUC"],g:["BlockingQueue"],e:"<h3>队列</h3>\n<p>队列就可以想成是一个数组，从一头进入，一头出去，排队买饭</p>\n<h3>阻塞队列</h3>\n<p>BlockingQueue   阻塞队列，排队拥堵，首先它是一个队列，而一个阻塞队列在数据结构中所起的作用大致如下图所示：</p>\n<figure><figcaption>image-20200316152120272</figcaption></figure>\n<p>线程1往阻塞队列中添加元素，而线程2从阻塞队列中移除元素</p>\n<ul>\n<li><code>当阻塞队列是空时，从队列中获取元素的操作将会被阻塞</code></li>\n<li><code>当阻塞队列是满时，从队列中添加元素的操作将会被阻塞</code></li>\n</ul>",r:{minutes:10.69,words:3206},t:"7、阻塞队列",y:"a"}}],["/study-notes/shangguigu-second/CAS/",{loader:()=>n.e(6614).then(n.bind(n,1458)),meta:{d:16784928e5,l:"2023年3月11日",c:["JUC"],g:["JUC","CAS"],e:"<h2>概念</h2>\n<p>CAS的全称是Compare-And-Swap，它是CPU并发原语</p>\n<p>它的功能是判断内存某个位置的值是否为预期值，如果是则更改为新的值，这个过程是原子的</p>\n<p>CAS并发原语体现在Java语言中就是sun.misc.Unsafe类的各个方法。调用UnSafe类中的CAS方法，JVM会帮我们实现出CAS汇编指令，这是一种完全依赖于硬件的功能，通过它实现了原子操作，再次强调，由于CAS是一种系统原语，原语属于操作系统用于范畴，是由若干条指令组成，用于完成某个功能的一个过程，并且原语的执行必须是连续的，在执行过程中不允许被中断，也就是说CAS是一条CPU的原子指令，不会造成所谓的数据不一致的问题，也就是说CAS是线程安全的。</p>",r:{minutes:6.53,words:1959},t:"2、CAS底层原理",y:"a"}}],["/study-notes/shangguigu-second/CountDownLatch_CyclicBarrier_Semaphore/CyclicBarrier.html",{loader:()=>n.e(8800).then(n.bind(n,78221)),meta:{d:16790976e5,l:"2023年3月18日",g:["CyclicBarrier"],e:'<h2>概念</h2>\n<p>和CountDownLatch相反，需要集齐七颗龙珠，召唤神龙。也就是做加法，开始是0，加到某个值的时候就执行。</p>\n<p>CyclicBarrier的字面意思就是可循环（cyclic）使用的屏障（Barrier）。它要求做的事情是，让一组线程到达一个屏障（也可以叫同步点）时被阻塞，直到最后一个线程到达屏障时，屏障才会开门，所有被屏障拦截的线程才会继续干活，线程进入屏障通过CyclicBarrier的await方法</p>\n<h2>案例</h2>\n<p>集齐7个龙珠，召唤神龙的Demo，我们需要首先创建CyclicBarrier</p>\n<div class="language- line-numbers-mode" data-highlighter="shiki" data-ext="" data-title="" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span>/**</span></span>\n<span class="line"><span>* 定义一个循环屏障，参数1：需要累加的值，参数2 需要执行的方法</span></span>\n<span class="line"><span>*/</span></span>\n<span class="line"><span>CyclicBarrier cyclicBarrier = new CyclicBarrier(7, () -&gt; {</span></span>\n<span class="line"><span>\tSystem.out.println("召唤神龙");</span></span>\n<span class="line"><span>});</span></span></code></pre>\n<div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>',r:{minutes:1.52,words:457},t:"CyclicBarrier",y:"a"}}],["/study-notes/shangguigu-second/CountDownLatch_CyclicBarrier_Semaphore/Semaphore.html",{loader:()=>n.e(1220).then(n.bind(n,11754)),meta:{d:16790976e5,l:"2023年3月18日",g:["Semaphore"],e:'<h2>概念</h2>\n<p>信号量主要用于两个目的</p>\n<ul>\n<li>一个是用于共享资源的互斥使用</li>\n<li>另一个用于并发线程数的控制</li>\n</ul>\n<h2>代码</h2>\n<p>我们模拟一个抢车位的场景，假设一共有6个车，3个停车位</p>\n<p>那么我们首先需要定义信号量为3，也就是3个停车位</p>\n<div class="language- line-numbers-mode" data-highlighter="shiki" data-ext="" data-title="" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span>/**</span></span>\n<span class="line"><span>* 初始化一个信号量为3，默认是false 非公平锁， 模拟3个停车位</span></span>\n<span class="line"><span>*/</span></span>\n<span class="line"><span>Semaphore semaphore = new Semaphore(3, false);</span></span></code></pre>\n<div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>',r:{minutes:1.62,words:486},t:"Semaphore",y:"a"}}],["/study-notes/shangguigu-second/CountDownLatch_CyclicBarrier_Semaphore/countDownLatch.html",{loader:()=>n.e(1243).then(n.bind(n,86053)),meta:{d:16790976e5,l:"2023年3月18日",g:["CountDownLatch"],e:"<h2>概念</h2>\n<p>让一些线程阻塞直到另一些线程完成一系列操作才被唤醒</p>\n<p>CountDownLatch主要有两个方法，当一个或多个线程调用await方法时，调用线程就会被阻塞。其它线程调用CountDown方法会将计数器减1（调用CountDown方法的线程不会被阻塞），当计数器的值变成零时，因调用await方法被阻塞的线程会被唤醒，继续执行</p>\n<h2>场景</h2>\n<p>现在有这样一个场景，假设一个自习室里有7个人，其中有一个是班长，班长的主要职责就是在其它6个同学走了后，关灯，锁教室门，然后走人，因此班长是需要最后一个走的，那么有什么方法能够控制班长这个线程是最后一个执行，而其它线程是随机执行的</p>",r:{minutes:2.25,words:675},t:"CountDownLatch",y:"a"}}],["/study-notes/shangguigu-second/JVM/five.html",{loader:()=>n.e(3294).then(n.bind(n,96865)),meta:{d:16784928e5,l:"2023年3月11日",c:["JUC"],g:["OOM"],e:"<h2>经典错误</h2>\n<p>JVM中常见的两个错误</p>\n<p>StackoverFlowError ：栈溢出</p>\n<p>OutofMemoryError: java heap space：堆溢出</p>\n<p>除此之外，还有以下的错误</p>\n<ul>\n<li>java.lang.StackOverflowError</li>\n<li>java.lang.OutOfMemoryError：java heap space</li>\n<li>java.lang.OutOfMemoryError：GC overhead limit exceeeded</li>\n<li>java.lang.OutOfMemoryError：Direct buffer memory</li>\n<li>java.lang.OutOfMemoryError：unable to create new native thread</li>\n<li>java.lang.OutOfMemoryError：Metaspace</li>\n</ul>",r:{minutes:6.69,words:2006},t:"Java内存溢出OOM",y:"a"}}],["/study-notes/shangguigu-second/JVM/four.html",{loader:()=>n.e(6282).then(n.bind(n,26771)),meta:{d:16784928e5,l:"2023年3月11日",c:["JUC"],g:["Java中的引用"],e:'<h2>前言</h2>\n<p>在原来的时候，我们谈到一个类的实例化</p>\n<div class="language- line-numbers-mode" data-highlighter="shiki" data-ext="" data-title="" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span>Person p = new Person()</span></span></code></pre>\n<div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0"><div class="line-number"></div></div></div>',r:{minutes:9.46,words:2837},t:"Java中的引用",y:"a"}}],["/study-notes/shangguigu-second/JVM/one.html",{loader:()=>n.e(7840).then(n.bind(n,77593)),meta:{d:16784928e5,l:"2023年3月11日",c:["JUC"],g:["死锁"],e:"<p>JVM前提学习视频：\nhttps://www.bilibili.com/video/BV1TJ411R75F/?spm_id_from=333.337.search-card.all.click&amp;vd_source=7138dfc78c49f602f8d3ed8cfbf0513d（没了）<br>\nhttps://www.bilibili.com/video/BV1jJ411t71s/?spm_id_from=333.788.recommend_more_video.4&amp;vd_source=7138dfc78c49f602f8d3ed8cfbf0513d<br>\n相应笔记： https://blog.csdn.net/q961250375/article/details/107499173</p>",r:{minutes:.86,words:258},t:"JVM体系结构",y:"a"}}],["/study-notes/shangguigu-second/JVM/six.html",{loader:()=>n.e(3880).then(n.bind(n,48152)),meta:{d:16784928e5,l:"2023年3月11日",c:["JUC"],g:["垃圾收集器"],e:"<h2>GC垃圾回收算法和垃圾收集器关系</h2>\n<blockquote>\n<p>天上飞的理念，要有落地的实现（垃圾收集器就是GC垃圾回收算法的实现）</p>\n<p>GC算法是内存回收的方法论，垃圾收集器就是算法的落地实现</p>\n</blockquote>\n<p>GC算法主要有以下几种</p>\n<ul>\n<li>引用计数（几乎不用，无法解决循环引用的问题）</li>\n<li>复制拷贝（用于新生代）</li>\n<li>标记清除（用于老年代）</li>\n<li>标记整理（用于老年代）</li>\n</ul>\n<p>因为目前为止还没有完美的收集器出现，更没有万能的收集器，只是针对具体应用最合适的收集器，进行分代收集（那个代用什么收集器）</p>",r:{minutes:18.74,words:5623},t:"垃圾收集器",y:"a"}}],["/study-notes/shangguigu-second/JVM/three.html",{loader:()=>n.e(6704).then(n.bind(n,45111)),meta:{d:16784928e5,l:"2023年3月11日",c:["JUC"],g:["死锁"],e:'<h2>前言</h2>\n<p>你说你做过JVM调优和参数配置，请问如何盘点查看JVM系统默认值</p>\n<p>使用jps和jinfo进行查看</p>\n<div class="language- line-numbers-mode" data-highlighter="shiki" data-ext="" data-title="" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span>-Xms：初始堆空间</span></span>\n<span class="line"><span>-Xmx：堆最大值</span></span>\n<span class="line"><span>-Xss：栈空间</span></span></code></pre>\n<div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>',r:{minutes:8.38,words:2514},t:"JVM调优和参数配置",y:"a"}}],["/study-notes/shangguigu-second/JVM/two.html",{loader:()=>n.e(4670).then(n.bind(n,7697)),meta:{d:16784928e5,l:"2023年3月11日",c:["JUC"],g:["死锁"],e:"<h2>JVM垃圾回收的时候如何确定垃圾？是否知道什么是GC Roots</h2>\n<blockquote>\n<p>友链：https://www.pdai.tech/md/java/jvm/java-jvm-gc.html#gc---java-%E5%9E%83%E5%9C%BE%E5%9B%9E%E6%94%B6%E5%9F%BA%E7%A1%80%E7%9F%A5%E8%AF%86</p>\n</blockquote>\n<h3>什么是垃圾</h3>\n<p>简单来说就是内存中已经不再被使用的空间就是垃圾</p>\n<h3>如何判断一个对象是否可以被回收</h3>\n<h4>引用计数法</h4>\n<p>Java中，引用和对象是有关联的。如果要操作对象则必须用引用进行。</p>",r:{minutes:3.39,words:1016},t:"GC Roots",y:"a"}}],["/study-notes/shangguigu-second/Linux/",{loader:()=>n.e(1821).then(n.bind(n,69308)),meta:{d:16784928e5,l:"2023年3月11日",c:["JUC"],g:["Linux诊断原因"],e:"<h2>命令集合</h2>\n<p>1、整机系统性能：top  查看,（ %CPU、%MEM 、load average）,按1查看不同CPU。看id，空闲率</p>\n<p>2、内存: free  -m</p>\n<p>3、硬盘: df -h</p>\n<p>4、CPU ： vmstat -n 2 3</p>\n<p>5、 磁盘io：iostat -xdk 2 3  看：r/s  w/s,每秒的读写速率，判断sql调优否。</p>\n<p>6、 其他命令：chmod、ifconfig、</p>\n<h3>整机：top，查看整机系统性能</h3>\n<figure><figcaption>image-20200326162329550</figcaption></figure>",r:{minutes:4.32,words:1297},t:"Linux诊断原因",y:"a"}}],["/study-notes/shangguigu-second/SiSuo/",{loader:()=>n.e(2334).then(n.bind(n,53064)),meta:{d:16784928e5,l:"2023年3月11日",c:["JUC"],g:["死锁"],e:"<p>死锁是指两个或多个以上的进程在执行过程中，因争夺资源而造成一种<code>互相等待的现象</code>，若无外力干涉那他们都将无法推进下去。如果资源充足，进程的资源请求都能够得到满足，死锁出现的可能性就很低，否则就会因争夺有限的资源而陷入死锁。</p>\n<figure><figcaption>image-20200318175441578</figcaption></figure>\n<h2>产生死锁的原因</h2>\n<ul>\n<li>系统资源不足</li>\n<li>进程运行推进的顺序不对</li>\n<li>资源分配不当</li>\n</ul>\n<h2>死锁产生的四个必要条件</h2>\n<ul>\n<li>互斥\n<ul>\n<li>解决方法：把互斥的共享资源封装成可同时访问</li>\n</ul>\n</li>\n<li>占有且等待\n<ul>\n<li>解决方法：进程请求资源时，要求它不占有任何其它资源，也就是它必须一次性申请到所有的资源，这种方式会导致资源效率低。</li>\n</ul>\n</li>\n<li>非抢占式\n<ul>\n<li>解决方法：如果进程不能立即分配资源，要求它不占有任何其他资源，也就是只能够同时获得所有需要资源时，才执行分配操作</li>\n</ul>\n</li>\n<li>循环等待\n<ul>\n<li>解决方法：对资源进行排序，要求进程按顺序请求资源。</li>\n</ul>\n</li>\n</ul>",r:{minutes:2.93,words:879},t:"10、死锁编码及定位分析",y:"a"}}],["/study-notes/shangguigu-second/Synchronized-Lock/",{loader:()=>n.e(4473).then(n.bind(n,97918)),meta:{d:16784928e5,l:"2023年3月11日",c:["JUC"],g:["Synchronized","Lock"],e:"<p>早期的时候我们对线程的主要操作为：</p>\n<ul>\n<li>synchronized wait  notify</li>\n</ul>\n<p>然后后面出现了替代方案</p>\n<ul>\n<li>lock await  signal</li>\n</ul>\n<figure><figcaption>image-20200317101210376</figcaption></figure>\n<h2>问题</h2>\n<h3>synchronized 和 lock 有什么区别？用新的lock有什么好处？举例说明</h3>\n<ul>\n<li>synchronized 和 lock 有什么区别？用新的lock有什么好处？举例说明</li>\n</ul>",r:{minutes:3.91,words:1172},t:"8、Synchronized和Lock的区别",y:"a"}}],["/study-notes/shangguigu-second/ThreadPool/",{loader:()=>n.e(3871).then(n.bind(n,19752)),meta:{d:16818624e5,l:"2023年4月19日",c:"线程池",g:["线程池"],e:'<h2>1、前言</h2>\n<p>获取多线程的方法，我们都知道有三种，还有一种是实现Callable接口</p>\n<ul>\n<li>实例化Thread类</li>\n<li>实现Runnable接口</li>\n<li>实现Callable接口</li>\n<li>使用线程池获取</li>\n</ul>\n<h3>1.1、Callable接口</h3>\n<p>Callable接口，是一种让线程执行完成后，能够返回结果的</p>\n<p>在说到Callable接口的时候，我们不得不提到Runnable接口</p>\n<div class="language- line-numbers-mode" data-highlighter="shiki" data-ext="" data-title="" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span>/**</span></span>\n<span class="line"><span> * 实现Runnable接口</span></span>\n<span class="line"><span> */</span></span>\n<span class="line"><span>class MyThread implements Runnable {</span></span>\n<span class="line"><span></span></span>\n<span class="line"><span>    @Override</span></span>\n<span class="line"><span>    public void run() {</span></span>\n<span class="line"><span></span></span>\n<span class="line"><span>    }</span></span>\n<span class="line"><span>}</span></span></code></pre>\n<div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>',r:{minutes:19.96,words:5989},t:"9、线程池（Java中有哪些方法获取多线程）",y:"a"}}],["/study-notes/shangguigu-second/github/",{loader:()=>n.e(3214).then(n.bind(n,95093)),meta:{d:16784928e5,l:"2023年3月11日",c:["GitHub"],g:["GitHub"],e:"<p>使用Github优秀框架 + 源码 提升自己</p>\n<p>https://github.com/FlyCloudRiver<br>\nhttps://gitee.com/cuckoocry/projects?scope=personal&amp;&amp;sort=</p>\n<h2>常用词含义</h2>\n<ul>\n<li>watch：会持续收到该项目的动态</li>\n<li>fork：复制某个仓库到自己的Github仓库中</li>\n<li>star：可以理解为点赞</li>\n<li>clone：将项目下载至本地</li>\n<li>follow：关注你感兴趣的作者，会收到他们的动态</li>\n</ul>",r:{minutes:1.33,words:398},t:"GitHub学习",y:"a"}}],["/study-notes/shangguigu-second/lock/five.html",{loader:()=>n.e(6432).then(n.bind(n,76681)),meta:{d:16790976e5,l:"2023年3月18日",g:["锁"],e:"<h2>前言</h2>\n<p>首先我们要分析下这道题，这简单的一个问题，其实里面还是包含了很多信息的，要想回答好这个问题，面试者至少要知道一下概念：</p>\n<ul>\n<li>Java内存模型</li>\n<li>并发编程有序性问题</li>\n<li>指令重排</li>\n<li>synchronized锁</li>\n<li>可重入锁</li>\n<li>排它锁</li>\n<li>as-if-serial语义</li>\n<li>单线程&amp;多线程</li>\n</ul>\n<h2>标准解答</h2>\n<p>为了进一步提升计算机各方面能力，在硬件层面做了很多优化，如处理器优化和指令重排等，但是这些技术的引入就会导致有序性问题。</p>",r:{minutes:2.37,words:712},t:"为什么Synchronized无法禁止指令重排，却能保证有序性",y:"a"}}],["/study-notes/shangguigu-second/lock/four.html",{loader:()=>n.e(9088).then(n.bind(n,31591)),meta:{d:16790976e5,l:"2023年3月18日",g:["锁"],e:"<p>自旋锁：spinlock，是指尝试获取锁的线程不会立即阻塞，而是，这样的好处是减少线程上下文切换的消耗，缺点是循环会消耗CPU</p>\n<p>原来提到的比较并交换，底层使用的就是自旋，自旋就是多次尝试，多次访问，不会阻塞的状态就是自旋。</p>\n<figure><figcaption>image-20200315154143781</figcaption></figure>\n<h2>优缺点</h2>\n<p>优点：循环比较获取直到成功为止，没有类似于wait的阻塞</p>\n<p>缺点：当不断自旋的线程越来越多的时候，会因为执行while循环不断的消耗CPU资源</p>\n<h2>手写自旋锁</h2>",r:{minutes:2.35,words:705},t:"Java锁之自旋锁",y:"a"}}],["/study-notes/shangguigu-second/lock/one.html",{loader:()=>n.e(7174).then(n.bind(n,62126)),meta:{d:16790976e5,l:"2023年3月18日",g:["锁"],e:"<h2>概念</h2>\n<p><strong>独占锁：指该锁一次只能被一个线程所持有。对ReentrantLock和Synchronized而言都是独占锁。</strong></p>\n<p>共享锁：指该锁可以被多个线程锁持有</p>\n<p>对ReentrantReadWriteLock其读锁是共享，其写锁是独占</p>\n<p>写的时候只能一个人写，但是读的时候，可以多个人同时读</p>\n<h2>为什么会有写锁和读锁</h2>\n<p>原来我们使用ReentrantLock创建锁的时候，是独占锁，也就是说一次只能一个线程访问，但是有一个读写分离场景，读的时候想同时进行，因此原来独占锁的并发性就没这么好了，因为读锁并不会造成数据不一致的问题，因此可以多个人共享读</p>",r:{minutes:5.99,words:1797},t:"独占锁（写锁） / 共享锁（读锁） / 互斥锁",y:"a"}}],["/study-notes/shangguigu-second/lock/six.html",{loader:()=>n.e(3178).then(n.bind(n,58990)),meta:{d:16790976e5,l:"2023年3月18日",g:["锁"],e:"<h2>乐观锁</h2>\n<h3>概念</h3>\n<p>乐观锁：顾名思义，就是十分乐观，它总是认为不会出现问题，无论干什么都不去上锁~，如果出现了问题，再次更新值测试，这里使用了version字段。</p>\n<p>也就是每次更新的时候同时维护一个version字段</p>\n<h3>乐观锁实现方式</h3>\n<ul>\n<li>取出记录时，获取当前的version</li>\n<li>更新时，带上这个version</li>\n<li>执行更新时，set version = newVersion where version = oldVersion</li>\n<li>如果version不对，就更新失败</li>\n</ul>",r:{minutes:1.08,words:323},t:"乐观锁和悲观锁",y:"a"}}],["/study-notes/shangguigu-second/lock/three.html",{loader:()=>n.e(5610).then(n.bind(n,1047)),meta:{d:16784928e5,l:"2023年3月11日",g:["锁"],e:'<h2>概念</h2>\n<p>可重入锁就是递归锁</p>\n<p>指的是同一线程外层函数获得锁之后，内层递归函数仍然能获取到该锁的代码，在同一线程在外层方法获取锁的时候，在进入内层方法会自动获取锁</p>\n<p>也就是说：</p>\n<p><strong>ReentrantLock / Synchronized 就是一个典型的可重入锁</strong></p>\n<h2>代码</h2>\n<p>可重入锁就是，在一个method1方法中加入一把锁，方法2也加锁了，那么他们拥有的是同一把锁</p>\n<div class="language- line-numbers-mode" data-highlighter="shiki" data-ext="" data-title="" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span>public synchronized void method1() {</span></span>\n<span class="line"><span>\tmethod2();</span></span>\n<span class="line"><span>}</span></span>\n<span class="line"><span></span></span>\n<span class="line"><span>public synchronized void method2() {</span></span>\n<span class="line"><span></span></span>\n<span class="line"><span>}</span></span></code></pre>\n<div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>',r:{minutes:4.16,words:1249},t:"可重入锁(又名递归锁) ReentrantLock",y:"a"}}],["/study-notes/shangguigu-second/lock/two.html",{loader:()=>n.e(9660).then(n.bind(n,89980)),meta:{d:16784928e5,l:"2023年3月11日",g:["锁"],e:'<h2>概念</h2>\n<h3>公平锁</h3>\n<p>是指多个线程按照申请锁的顺序来获取锁，类似于排队买饭，先来后到，先来先服务，就是公平的，也就是队列</p>\n<h3>非公平锁</h3>\n<p>是指多个线程获取锁的顺序，并不是按照申请锁的顺序，有可能申请的线程比先申请的线程优先获取锁，在高并发环境下，有可能造成优先级翻转，或者饥饿的线程（也就是某个线程一直得不到锁）</p>\n<h2>如何创建</h2>\n<p>并发包中ReentrantLock的创建可以指定析构函数的boolean类型来得到公平锁或者非公平锁，默认是非公平锁</p>\n<div class="language- line-numbers-mode" data-highlighter="shiki" data-ext="" data-title="" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span>/**</span></span>\n<span class="line"><span>* 创建一个可重入锁，true 表示公平锁，false 表示非公平锁。默认非公平锁</span></span>\n<span class="line"><span>*/</span></span>\n<span class="line"><span>Lock lock = new ReentrantLock(true);</span></span></code></pre>\n<div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>',r:{minutes:1.42,words:426},t:"Java锁之公平锁和非公平锁",y:"a"}}],["/study-notes/shangguigu-second/volatile/four.html",{loader:()=>n.e(5149).then(n.bind(n,46704)),meta:{d:16784928e5,l:"2023年3月11日",c:["JUC"],g:["JUC","Volatile"],e:'<h2>单例模式DCL代码</h2>\n<p>首先回顾一下，单线程下的单例模式代码</p>\n<div class="language- line-numbers-mode" data-highlighter="shiki" data-ext="" data-title="" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span>/**</span></span>\n<span class="line"><span> * SingletonDemo（单例模式）</span></span>\n<span class="line"><span> *</span></span>\n<span class="line"><span> * @author: 阿飞</span></span>\n<span class="line"><span> * @create: 2020-03-10-16:40</span></span>\n<span class="line"><span> */</span></span>\n<span class="line"><span>public class SingletonDemo {</span></span>\n<span class="line"><span></span></span>\n<span class="line"><span>    private static SingletonDemo instance = null;</span></span>\n<span class="line"><span></span></span>\n<span class="line"><span>    private SingletonDemo () {</span></span>\n<span class="line"><span>        System.out.println(Thread.currentThread().getName() + "\\t 我是构造方法SingletonDemo");</span></span>\n<span class="line"><span>    }</span></span>\n<span class="line"><span></span></span>\n<span class="line"><span>    public static SingletonDemo getInstance() {</span></span>\n<span class="line"><span>        if(instance == null) {</span></span>\n<span class="line"><span>            instance = new SingletonDemo();</span></span>\n<span class="line"><span>        }</span></span>\n<span class="line"><span>        return instance;</span></span>\n<span class="line"><span>    }</span></span>\n<span class="line"><span></span></span>\n<span class="line"><span>    public static void main(String[] args) {</span></span>\n<span class="line"><span>        // 这里的 == 是比较内存地址</span></span>\n<span class="line"><span>        System.out.println(SingletonDemo.getInstance() == SingletonDemo.getInstance());</span></span>\n<span class="line"><span>        System.out.println(SingletonDemo.getInstance() == SingletonDemo.getInstance());</span></span>\n<span class="line"><span>        System.out.println(SingletonDemo.getInstance() == SingletonDemo.getInstance());</span></span>\n<span class="line"><span>        System.out.println(SingletonDemo.getInstance() == SingletonDemo.getInstance());</span></span>\n<span class="line"><span>    }</span></span>\n<span class="line"><span>}</span></span></code></pre>\n<div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>',r:{minutes:4,words:1201},t:"Volatile的应用",O:4,y:"a"}}],["/study-notes/shangguigu-second/volatile/one.html",{loader:()=>n.e(4013).then(n.bind(n,14273)),meta:{d:16790112e5,l:"2023年3月17日",c:["JUC"],g:["JUC","Volatile"],e:"<h2>谈谈对Volatile的理解</h2>\n<ul>\n<li>JUC（java.util.concurrent）\n<ul>\n<li>进程和线程\n<ul>\n<li>进程：后台运行的程序（我们打开的一个软件，就是进程）</li>\n<li>线程：轻量级的进程，并且一个进程包含多个线程（同在一个软件内，同时运行窗口，就是线程）</li>\n</ul>\n</li>\n<li>并发和并行\n<ul>\n<li>并发：同时访问某个东西，就是并发</li>\n<li>并行：一起做某些事情，就是并行</li>\n</ul>\n</li>\n</ul>\n</li>\n<li>JUC下的三个包\n<ul>\n<li>java.util.concurrent\n<ul>\n<li>java.util.concurrent.atomic</li>\n<li>java.util.concurrent.locks</li>\n</ul>\n</li>\n</ul>\n</li>\n</ul>",r:{minutes:6.41,words:1922},t:"Volatile和JMM内存模型的可见性",O:1,y:"a"}}],["/study-notes/shangguigu-second/volatile/three.html",{loader:()=>n.e(5761).then(n.bind(n,6570)),meta:{d:16784928e5,l:"2023年3月11日",c:["JUC"],g:["JUC","Volatile"],e:'<p>计算机在执行程序时，为了提高性能，编译器和处理器常常会对指令重排，一般分为以下三种：</p>\n<div class="language- line-numbers-mode" data-highlighter="shiki" data-ext="" data-title="" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span>源代码 -&gt; 编译器优化的重排 -&gt; 指令并行的重排 -&gt; 内存系统的重排 -&gt; 最终执行指令</span></span></code></pre>\n<div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0"><div class="line-number"></div></div></div>',r:{minutes:4.07,words:1222},t:"Volatile禁止指令重排",O:3,y:"a"}}],["/study-notes/shangguigu-second/volatile/two.html",{loader:()=>n.e(4559).then(n.bind(n,81344)),meta:{d:16784928e5,l:"2023年3月11日",c:["JUC"],g:["JUC","Volatile"],e:"<h2>前言</h2>\n<p>通过前面对JMM的介绍，我们知道，各个线程对主内存中共享变量的操作都是各个线程各自拷贝到自己的工作内存进行操作后在写回到主内存中的。</p>\n<p>这就可能存在一个线程AAA修改了共享变量X的值，但是还未写入主内存时，另外一个线程BBB又对主内存中同一共享变量X进行操作，但此时A线程工作内存中共享变量X对线程B来说是不可见，这种工作内存与主内存同步延迟现象就造成了可见性问题。</p>\n<h2>原子性</h2>\n<p>不可分割，完整性，也就是说某个线程正在做某个具体业务时，中间不可以被加塞或者被分割，需要具体完成，要么同时成功，要么同时失败。</p>\n<p>数据库也经常提到事务具备原子性</p>",r:{minutes:19.43,words:5829},t:"Volatile不保证原子性",O:2,y:"a"}}],["/study-notes/shangguigu-three/AQS/",{loader:()=>n.e(168).then(n.bind(n,15122)),meta:{d:16790976e5,l:"2023年3月18日",g:["AQS"],e:"<h2>AbstractQueuedSynchronizer    AQS</h2>\n<h3>前置知识</h3>\n<ol>\n<li>公平锁和非公平锁  ： ReentrantLock有公平锁和非公平锁</li>\n<li>可重入锁.</li>\n<li>LockSupport</li>\n<li>自旋锁</li>\n<li>数据结构之链表</li>\n<li>设计模式之模板设计模式</li>\n</ol>\n<h3>1、是什么</h3>\n<p><code>抽象的队列同步器（AbstractQueuedSynchronizer 简称为AQS）</code></p>\n<p>技术解释：\n是用来构建锁或者其它同步器组件的<strong>重量级基础框架及整个JUC体系的基石</strong>，通过内置的FIFO<strong>队列</strong>来完成资源获取线程的排队工作，并通过一个<strong>int类型变量</strong>表示持有锁的状态。\n抽象的队列同步器：模板模式，是JUC内容中最重要的基石。</p>",r:{minutes:21.14,words:6342},t:"AQS",y:"a"}}],["/study-notes/shangguigu-three/LockSupport/",{loader:()=>n.e(5646).then(n.bind(n,80991)),meta:{d:16790976e5,l:"2023年3月18日",e:"<h2>LockSupport是什么</h2>\n<ol>\n<li>为什么要学习LockSupport\n<ol>\n<li>Java -------jvm</li>\n<li>JUC ------- AQS ------&gt; （前置知识、可重入锁、LockSupport）</li>\n</ol>\n</li>\n<li>学习方法\n<ol>\n<li>是什么</li>\n<li>能干吗</li>\n<li>去哪下</li>\n<li>怎么玩</li>\n</ol>\n</li>\n<li>AB -&gt; after/ before</li>\n</ol>\n<h3><strong>AB -&gt; after/ before</strong></h3>",r:{minutes:2.66,words:797},t:"LockSupport",y:"a"}}],["/study-notes/shangguigu-three/Redis/",{loader:()=>n.e(7452).then(n.bind(n,63278)),meta:{d:16784928e5,l:"2023年3月11日",g:["redis"],e:'<h2>1、Redis 6.0.8</h2>\n<blockquote>\n<p>笔记参考：https://blog.csdn.net/oneby1314/article/details/113789412</p>\n</blockquote>\n<h3>1.1、Redis 6.0.8 版本</h3>\n<blockquote>\n<p><strong>官网地址</strong></p>\n</blockquote>\n<ol>\n<li>\n<p>官网地址：<a href="https://redis.io/" target="_blank" rel="noopener noreferrer">https://redis.io/</a></p>\n</li>\n<li>\n<p>中文官网地址：<a href="http://www.redis.cn/" target="_blank" rel="noopener noreferrer">http://www.redis.cn/</a></p>\n</li>\n</ol>',r:{minutes:58.8,words:17640},t:"Redis",y:"a"}}],["/study-notes/shangguigu-three/ReentrantLock/",{loader:()=>n.e(7837).then(n.bind(n,53641)),meta:{d:16784928e5,l:"2023年3月11日",e:"<h2>定义</h2>\n<p>可重入锁又名递归锁，是指在同一个线程在外层方法获取锁的时候，再进入该线程的的内层方法会自动获取锁（前提是锁对象得是同一个对象），不会因为之前已经获取过还没释放而阻塞。</p>\n<p>Java中ReentrantLock和synchronized都是可重入锁，可重入锁的一个优点是可一定程度避免死锁。</p>\n<p>将字分开解释：</p>\n<ul>\n<li>可：可以</li>\n<li>重：再次</li>\n<li>入：进入</li>\n<li>锁：同步锁</li>\n<li>进入什么？ - 进入同步域（即同步代码块/方法或显示锁锁定的代码）</li>\n</ul>\n<p>一个线程中的多个流程可以获取同一把锁，持有这把同步锁可以再次进入。</p>",r:{minutes:2.84,words:851},t:"可重入锁理论",y:"a"}}],["/study-notes/shangguigu-three/Spring/",{loader:()=>n.e(6504).then(n.bind(n,12633)),meta:{d:16784928e5,l:"2023年3月11日",g:["spring"],e:'<h2>Spring</h2>\n<blockquote>\n<p>相关视频：<a href="https://www.bilibili.com/video/BV1Hy4y1B78T?p=28&amp;vd_source=7138dfc78c49f602f8d3ed8cfbf0513d" target="_blank" rel="noopener noreferrer">https://www.bilibili.com/video/BV1Hy4y1B78T?p=28&amp;vd_source=7138dfc78c49f602f8d3ed8cfbf0513d</a><br>\n前提知识：<a href="https://www.pdai.tech/md/spring/spring-x-framework-introduce.html#%E4%BB%80%E4%B9%88%E6%98%AFspring" target="_blank" rel="noopener noreferrer">https://www.pdai.tech/md/spring/spring-x-framework-introduce.html#%E4%BB%80%E4%B9%88%E6%98%AFspring</a></p>\n</blockquote>',r:{minutes:20.15,words:6045},t:"Spring",y:"a"}}],["/study-notes/shangguigu-three/UUID/",{loader:()=>n.e(1730).then(n.bind(n,53812)),meta:{d:16784928e5,l:"2023年3月11日",g:["redis"],e:"<h2>问题</h2>\n<h3>为什么需要分布式全局唯一ID以及分布式ID的业务需求</h3>\n<p>在复杂分布式系统中，往往需要对大量的数据和消息进行唯一标识，如在美团点评的金融、支付、餐饮、酒店</p>\n<p>猫眼电影等产品的系统中数据逐渐增长，对数据库分库分表后需要有一个唯一ID来标识一条数据或信息；</p>\n<p>特别Ian的订单、骑手、优惠券都需要有唯一ID做标识</p>\n<p>此时一个能够生成全局唯一ID的系统是非常必要的</p>\n<figure><figcaption>image-20200418080900190</figcaption></figure>\n<h3>ID生成规则部分硬性要求</h3>",r:{minutes:11.05,words:3314},t:"集群高并发情况下如何保证分布式唯一全局Id生成",y:"a"}}],["/study-notes/shangguigu-three/WaitNotify/",{loader:()=>n.e(2341).then(n.bind(n,33095)),meta:{d:16790976e5,l:"2023年3月18日",e:'<p>3种让线程等待和唤醒的方法</p>\n<ul>\n<li>方式1：使用Object中的wait()方法让线程等待，使用object中的notify()方法唤醒线程</li>\n<li>方式2：使用JUC包中Condition的await()方法让线程等待，使用signal()方法唤醒线程</li>\n<li>方式3：LockSupport类可以阻塞当前线程以及唤醒指定被阻塞的线程</li>\n</ul>\n<h2>wait - Notify限制</h2>\n<p>Object类中的wait和notify方法实现线程等待和唤醒</p>\n<div class="language- line-numbers-mode" data-highlighter="shiki" data-ext="" data-title="" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span></span></span>\n<span class="line"><span>public class LockSupportDemo {</span></span>\n<span class="line"><span>    static Object objectLock = new Object();</span></span>\n<span class="line"><span></span></span>\n<span class="line"><span>    public static void main(String[] args) {</span></span>\n<span class="line"><span>        new Thread(() -&gt; {</span></span>\n<span class="line"><span>            synchronized (objectLock) {</span></span>\n<span class="line"><span>                System.out.println(Thread.currentThread().getName() + "\\t" + "------come in");</span></span>\n<span class="line"><span>                try {</span></span>\n<span class="line"><span>                    objectLock.wait();</span></span>\n<span class="line"><span>                } catch (InterruptedException e) {</span></span>\n<span class="line"><span>                    e.printStackTrace();</span></span>\n<span class="line"><span>                }</span></span>\n<span class="line"><span>            }</span></span>\n<span class="line"><span>            System.out.println(Thread.currentThread().getName() + "\\t" + "-----被唤醒");</span></span>\n<span class="line"><span>        }, "A").start();</span></span>\n<span class="line"><span></span></span>\n<span class="line"><span>        new Thread(() -&gt; {</span></span>\n<span class="line"><span>            synchronized (objectLock) {</span></span>\n<span class="line"><span>                objectLock.notify();</span></span>\n<span class="line"><span>                System.out.println(Thread.currentThread().getName() + "\\t" + "-----通知");</span></span>\n<span class="line"><span>            }</span></span>\n<span class="line"><span>        }, "B").start();</span></span>\n<span class="line"><span>    }</span></span>\n<span class="line"><span>}</span></span></code></pre>\n<div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>',r:{minutes:2.54,words:763},t:"线程等待唤醒机制",y:"a"}}],["/study-notes/JVM/Bytecode-ClassLoading/Bytecode-Instruction-Set/",{loader:()=>n.e(4753).then(n.bind(n,30806)),meta:{d:16790976e5,l:"2023年3月18日",e:"\n<p><br>\n<br>\n</p>\n<h1>2. 加载与存储指令</h1>\n<p>\n</p>\n<hr>\n<h2>2.1. 局部变量压栈指令</h2>\n<blockquote>\n<p>iload 从局部变量中装载int类型值</p>\n<p>lload 从局部变量中装载long类型值</p>\n<p>fload 从局部变量中装载float类型值</p>\n<p>dload 从局部变量中装载double类型值</p>\n<p>aload 从局部变量中装载引用类型值（refernce）</p>\n<p>iload_0 从局部变量0中装载int类型值</p>\n<p>iload_1 从局部变量1中装载int类型值</p>\n<p>iload_2 从局部变量2中装载int类型值</p>\n<p>iload_3 从局部变量3中装载int类型值</p>\n<p>lload_0 从局部变量0中装载long类型值</p>\n<p>lload_1 从局部变量1中装载long类型值</p>\n<p>lload_2 从局部变量2中装载long类型值</p>\n<p>lload_3 从局部变量3中装载long类型值</p>\n<p>fload_0 从局部变量0中装载float类型值</p>\n<p>fload_1 从局部变量1中装载float类型值</p>\n<p>fload_2 从局部变量2中装载float类型值</p>\n<p>fload_3 从局部变量3中装载float类型值</p>\n<p>dload_0 从局部变量0中装载double类型值</p>\n<p>dload_1 从局部变量1中装载double类型值</p>\n<p>dload_2 从局部变量2中装载double类型值</p>\n<p>dload_3 从局部变量3中装载double类型值</p>\n<p>aload_0 从局部变量0中装载引用类型值</p>\n<p>aload_1 从局部变量1中装载引用类型值</p>\n<p>aload_2 从局部变量2中装载引用类型值</p>\n<p>aload_3 从局部变量3中装载引用类型值</p>\n<p>iaload 从数组中装载int类型值</p>\n<p>laload 从数组中装载long类型值</p>\n<p>faload 从数组中装载float类型值</p>\n<p>daload 从数组中装载double类型值</p>\n<p>aaload 从数组中装载引用类型值</p>\n<p>baload 从数组中装载byte类型或boolean类型值</p>\n<p>caload 从数组中装载char类型值</p>\n<p>saload 从数组中装载short类型值</p>\n</blockquote>",r:{minutes:20.07,words:6020},t:"字节码指令",y:"a"}}],["/study-notes/JVM/Bytecode-ClassLoading/Class-File-Structure/",{loader:()=>n.e(2059).then(n.bind(n,99551)),meta:{d:16790112e5,l:"2023年3月17日",g:["JVM"],e:'<h2>1.1. Class 字节码文件结构</h2>\n<div class="language-js line-numbers-mode" data-highlighter="shiki" data-ext="js" data-title="js" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">&lt;</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75">table</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">&gt;</span></span>\n<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">    &lt;</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75">tbody</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">&gt;  </span></span>\n<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">        &lt;</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75">tr</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">&gt;</span></span>\n<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">            &lt;</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75">th</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">&gt;&lt;/</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75">th</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">&gt; </span></span>\n<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">            &lt;</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75">th</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">&gt;类型&lt;/</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75">th</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">&gt; </span></span>\n<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">            &lt;</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75">th</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">&gt;名称&lt;/</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75">th</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">&gt; </span></span>\n<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">            &lt;</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75">th</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">&gt;说明&lt;/</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75">th</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">&gt; </span></span>\n<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">            &lt;</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75">th</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">&gt;长度&lt;/</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75">th</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">&gt; </span></span>\n<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">            &lt;</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75">th</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">&gt;数量&lt;/</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75">th</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">&gt; </span></span>\n<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">       &lt;/</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75">tr</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">&gt;</span></span>\n<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">       &lt;</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75">tr</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">&gt;</span></span>\n<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">            &lt;</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75">td</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">&gt;魔数&lt;/</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75">td</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">&gt;</span></span>\n<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">            &lt;</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75">td</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">&gt;u4&lt;/</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75">td</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">&gt;</span></span>\n<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">            &lt;</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75">td</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">&gt;magic&lt;/</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75">td</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">&gt;</span></span>\n<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">            &lt;</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75">td</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">&gt;魔数,识别Class文件格式&lt;/</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75">td</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">&gt;</span></span>\n<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">            &lt;</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75">td</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">&gt;4个字节&lt;/</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75">td</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">&gt;     </span></span>\n<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">            &lt;</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75">td</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">&gt;1&lt;/</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75">td</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">&gt;</span></span>\n<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">       &lt;/</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75">tr</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">&gt;</span></span>\n<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">       &lt;</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75">tr</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">&gt;</span></span>\n<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">            &lt;</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75">td</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;--shiki-light-font-style:inherit;--shiki-dark-font-style:italic"> rowspan</span><span style="--shiki-light:#383A42;--shiki-dark:#56B6C2">=</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379">"2"</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">&gt;版本号&lt;/</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75">td</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">&gt;</span></span>\n<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">            &lt;</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75">td</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">&gt;u2&lt;/</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75">td</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">&gt;</span></span>\n<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">            &lt;</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75">td</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">&gt;minor_version&lt;/</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75">td</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">&gt;</span></span>\n<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">            &lt;</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75">td</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">&gt;副版本号(小版本)&lt;/</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75">td</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">&gt;</span></span>\n<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">            &lt;</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75">td</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">&gt;2个字节&lt;/</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75">td</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">&gt;     </span></span>\n<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">            &lt;</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75">td</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">&gt;1&lt;/</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75">td</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">&gt;</span></span>\n<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">       &lt;/</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75">tr</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">&gt;</span></span>\n<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">       &lt;</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75">tr</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">&gt;</span></span>\n<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">            &lt;</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75">td</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">&gt;u2&lt;/</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75">td</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">&gt;</span></span>\n<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">            &lt;</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75">td</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">&gt;major_version&lt;/</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75">td</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">&gt;</span></span>\n<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">            &lt;</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75">td</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">&gt;主版本号(大版本)&lt;/</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75">td</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">&gt;</span></span>\n<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">            &lt;</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75">td</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">&gt;2个字节&lt;/</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75">td</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">&gt;     </span></span>\n<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">            &lt;</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75">td</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">&gt;1&lt;/</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75">td</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">&gt;</span></span>\n<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">        &lt;/</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75">tr</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">&gt;\t</span></span>\n<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">        &lt;</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75">tr</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">&gt;</span></span>\n<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">            &lt;</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75">td</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;--shiki-light-font-style:inherit;--shiki-dark-font-style:italic"> rowspan</span><span style="--shiki-light:#383A42;--shiki-dark:#56B6C2">=</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379">"2"</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">&gt;常量池集合&lt;/</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75">td</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">&gt;</span></span>\n<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">            &lt;</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75">td</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">&gt;u2&lt;/</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75">td</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">&gt;</span></span>\n<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">            &lt;</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75">td</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">&gt;constant_pool_count&lt;/</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75">td</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">&gt;</span></span>\n<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">            &lt;</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75">td</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">&gt;常量池计数器&lt;/</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75">td</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">&gt;</span></span>\n<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">            &lt;</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75">td</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">&gt;2个字节&lt;/</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75">td</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">&gt;     </span></span>\n<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">            &lt;</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75">td</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">&gt;1&lt;/</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75">td</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">&gt;</span></span>\n<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">        &lt;/</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75">tr</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">&gt;</span></span>\n<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">        &lt;</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75">tr</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">&gt;</span></span>\n<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">            &lt;</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75">td</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">&gt;cp_info&lt;/</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75">td</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">&gt;</span></span>\n<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">            &lt;</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75">td</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">&gt;constant_pool&lt;/</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75">td</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">&gt;</span></span>\n<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">            &lt;</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75">td</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">&gt;常量池表&lt;/</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75">td</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">&gt;</span></span>\n<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">            &lt;</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75">td</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">&gt;n个字节&lt;/</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75">td</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">&gt;     </span></span>\n<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">            &lt;</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75">td</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">&gt;constant_pool_count - 1&lt;/</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75">td</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">&gt;</span></span>\n<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">        &lt;/</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75">tr</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">&gt;</span></span>\n<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">        &lt;</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75">tr</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">&gt;</span></span>\n<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">            &lt;</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75">td</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">&gt;访问标识&lt;/</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75">td</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">&gt;</span></span>\n<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">            &lt;</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75">td</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">&gt;u2&lt;/</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75">td</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">&gt;</span></span>\n<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">            &lt;</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75">td</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">&gt;access_flags&lt;/</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75">td</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">&gt;</span></span>\n<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">            &lt;</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75">td</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">&gt;访问标识&lt;/</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75">td</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">&gt;</span></span>\n<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">            &lt;</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75">td</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">&gt;2个字节&lt;/</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75">td</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">&gt;     </span></span>\n<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">            &lt;</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75">td</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">&gt;1&lt;/</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75">td</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">&gt;</span></span>\n<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">        &lt;/</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75">tr</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">&gt;\t</span></span>\n<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">        &lt;</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75">tr</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">&gt;</span></span>\n<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">            &lt;</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75">td</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;--shiki-light-font-style:inherit;--shiki-dark-font-style:italic"> rowspan</span><span style="--shiki-light:#383A42;--shiki-dark:#56B6C2">=</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379">"4"</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">&gt;索引集合&lt;/</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75">td</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">&gt;</span></span>\n<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">            &lt;</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75">td</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">&gt;u2&lt;/</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75">td</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">&gt;</span></span>\n<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">            &lt;</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75">td</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">&gt;this_class&lt;/</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75">td</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">&gt;</span></span>\n<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">            &lt;</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75">td</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">&gt;类索引&lt;/</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75">td</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">&gt;</span></span>\n<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">            &lt;</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75">td</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">&gt;2个字节&lt;/</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75">td</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">&gt;     </span></span>\n<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">            &lt;</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75">td</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">&gt;1&lt;/</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75">td</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">&gt;</span></span>\n<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">        &lt;/</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75">tr</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">&gt;</span></span>\n<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">        &lt;</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75">tr</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">&gt;</span></span>\n<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">            &lt;</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75">td</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">&gt;u2&lt;/</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75">td</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">&gt;</span></span>\n<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">            &lt;</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75">td</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">&gt;super_class&lt;/</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75">td</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">&gt;</span></span>\n<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">            &lt;</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75">td</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">&gt;父类索引&lt;/</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75">td</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">&gt;</span></span>\n<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">            &lt;</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75">td</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">&gt;2个字节&lt;/</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75">td</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">&gt;     </span></span>\n<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">            &lt;</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75">td</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">&gt;1&lt;/</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75">td</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">&gt;</span></span>\n<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">        &lt;/</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75">tr</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">&gt;</span></span>\n<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">        &lt;</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75">tr</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">&gt;</span></span>\n<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">            &lt;</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75">td</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">&gt;u2&lt;/</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75">td</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">&gt;</span></span>\n<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">            &lt;</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75">td</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">&gt;interfaces_count&lt;/</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75">td</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">&gt;</span></span>\n<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">            &lt;</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75">td</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">&gt;接口计数器&lt;/</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75">td</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">&gt;</span></span>\n<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">            &lt;</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75">td</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">&gt;2个字节&lt;/</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75">td</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">&gt;     </span></span>\n<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">            &lt;</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75">td</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">&gt;1&lt;/</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75">td</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">&gt;</span></span>\n<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">        &lt;/</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75">tr</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">&gt;</span></span>\n<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">        &lt;</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75">tr</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">&gt;</span></span>\n<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">            &lt;</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75">td</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">&gt;u2&lt;/</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75">td</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">&gt;</span></span>\n<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">            &lt;</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75">td</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">&gt;interfaces&lt;/</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75">td</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">&gt;</span></span>\n<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">            &lt;</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75">td</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">&gt;接口索引集合&lt;/</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75">td</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">&gt;</span></span>\n<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">            &lt;</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75">td</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">&gt;2个字节&lt;/</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75">td</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">&gt;     </span></span>\n<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">            &lt;</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75">td</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">&gt;interfaces_count&lt;/</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75">td</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">&gt;</span></span>\n<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">        &lt;/</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75">tr</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">&gt;    </span></span>\n<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">        &lt;</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75">tr</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">&gt;</span></span>\n<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">            &lt;</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75">td</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;--shiki-light-font-style:inherit;--shiki-dark-font-style:italic"> rowspan</span><span style="--shiki-light:#383A42;--shiki-dark:#56B6C2">=</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379">"2"</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">&gt;字段表集合&lt;/</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75">td</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">&gt;</span></span>\n<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">            &lt;</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75">td</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">&gt;u2&lt;/</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75">td</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">&gt;</span></span>\n<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">            &lt;</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75">td</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">&gt;fields_count&lt;/</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75">td</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">&gt;</span></span>\n<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">            &lt;</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75">td</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">&gt;字段计数器&lt;/</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75">td</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">&gt;</span></span>\n<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">            &lt;</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75">td</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">&gt;2个字节&lt;/</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75">td</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">&gt;     </span></span>\n<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">            &lt;</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75">td</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">&gt;1&lt;/</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75">td</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">&gt;</span></span>\n<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">        &lt;/</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75">tr</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">&gt;</span></span>\n<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">        &lt;</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75">tr</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">&gt;</span></span>\n<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">            &lt;</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75">td</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">&gt;field_info&lt;/</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75">td</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">&gt;</span></span>\n<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">            &lt;</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75">td</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">&gt;fields&lt;/</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75">td</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">&gt;</span></span>\n<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">            &lt;</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75">td</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">&gt;字段表&lt;/</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75">td</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">&gt;</span></span>\n<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">            &lt;</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75">td</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">&gt;n个字节&lt;/</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75">td</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">&gt;     </span></span>\n<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">            &lt;</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75">td</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">&gt;fields_count&lt;/</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75">td</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">&gt;</span></span>\n<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">        &lt;/</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75">tr</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">&gt;\t</span></span>\n<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">        &lt;</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75">tr</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">&gt;</span></span>\n<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">            &lt;</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75">td</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;--shiki-light-font-style:inherit;--shiki-dark-font-style:italic"> rowspan</span><span style="--shiki-light:#383A42;--shiki-dark:#56B6C2">=</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379">"2"</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">&gt;方法表集合&lt;/</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75">td</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">&gt;</span></span>\n<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">            &lt;</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75">td</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">&gt;u2&lt;/</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75">td</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">&gt;</span></span>\n<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">            &lt;</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75">td</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">&gt;methods_count&lt;/</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75">td</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">&gt;</span></span>\n<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">            &lt;</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75">td</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">&gt;方法计数器&lt;/</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75">td</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">&gt;</span></span>\n<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">            &lt;</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75">td</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">&gt;2个字节&lt;/</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75">td</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">&gt;     </span></span>\n<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">            &lt;</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75">td</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">&gt;1&lt;/</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75">td</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">&gt;</span></span>\n<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">        &lt;/</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75">tr</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">&gt;</span></span>\n<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">        &lt;</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75">tr</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">&gt;</span></span>\n<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">            &lt;</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75">td</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">&gt;method_info&lt;/</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75">td</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">&gt;</span></span>\n<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">            &lt;</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75">td</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">&gt;methods&lt;/</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75">td</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">&gt;</span></span>\n<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">            &lt;</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75">td</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">&gt;方法表&lt;/</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75">td</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">&gt;</span></span>\n<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">            &lt;</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75">td</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">&gt;n个字节&lt;/</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75">td</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">&gt;     </span></span>\n<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">            &lt;</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75">td</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">&gt;methods_count&lt;/</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75">td</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">&gt;</span></span>\n<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">        &lt;/</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75">tr</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">&gt;</span></span>\n<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">        &lt;</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75">tr</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">&gt;</span></span>\n<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">            &lt;</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75">td</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;--shiki-light-font-style:inherit;--shiki-dark-font-style:italic"> rowspan</span><span style="--shiki-light:#383A42;--shiki-dark:#56B6C2">=</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379">"2"</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">&gt;属性表集合&lt;/</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75">td</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">&gt;</span></span>\n<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">            &lt;</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75">td</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">&gt;u2&lt;/</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75">td</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">&gt;</span></span>\n<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">            &lt;</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75">td</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">&gt;attributes_count&lt;/</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75">td</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">&gt;</span></span>\n<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">            &lt;</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75">td</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">&gt;属性计数器&lt;/</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75">td</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">&gt;</span></span>\n<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">            &lt;</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75">td</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">&gt;2个字节&lt;/</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75">td</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">&gt;     </span></span>\n<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">            &lt;</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75">td</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">&gt;1&lt;/</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75">td</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">&gt;</span></span>\n<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">        &lt;/</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75">tr</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">&gt;</span></span>\n<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">        &lt;</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75">tr</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">&gt;</span></span>\n<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">            &lt;</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75">td</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">&gt;attribute_info&lt;/</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75">td</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">&gt;</span></span>\n<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">            &lt;</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75">td</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">&gt;attributes&lt;/</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75">td</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">&gt;</span></span>\n<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">            &lt;</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75">td</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">&gt;属性表&lt;/</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75">td</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">&gt;</span></span>\n<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">            &lt;</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75">td</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">&gt;n个字节&lt;/</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75">td</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">&gt;     </span></span>\n<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">            &lt;</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75">td</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">&gt;attributes_count&lt;/</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75">td</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">&gt;</span></span>\n<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">        &lt;/</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75">tr</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">&gt;\t</span></span>\n<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">   &lt;</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75">tbody</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">&gt; </span></span>\n<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">&lt;/</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75">table</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">&gt;</span></span></code></pre>\n<div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>',r:{minutes:31.02,words:9306},t:"Class文件结构",y:"a"}}],["/study-notes/JVM/Bytecode-ClassLoading/Class-Lifecycle/",{loader:()=>n.e(2747).then(n.bind(n,90346)),meta:{d:16790976e5,l:"2023年3月18日",e:'<h2>1. 概述</h2>\n<p>在 Java 中数据类型分为基本数据类型和引用数据类型。<code>&lt;mark&gt;</code>基本数据类型由虚拟机预先定义，引用数据类型则需要进行类的加载。<code>&lt;/mark&gt;</code></p>\n<p>按照 Java 虚拟机规范，从 class 文件到加载到内存中的类，到类卸载出内存为止，它的整个生命周期包括如下 7 个阶段：</p>\n<figure><img src="https://img-blog.csdnimg.cn/img_convert/b73db20eea59665fa3de67e1dec6d4e5.png" alt="image-20210430215050746" tabindex="0" loading="lazy"><figcaption>image-20210430215050746</figcaption></figure>',r:{minutes:20.64,words:6193},t:"类加载过程",y:"a"}}],["/study-notes/JVM/Bytecode-ClassLoading/Class-Lifecycle2/",{loader:()=>n.e(9723).then(n.bind(n,1915)),meta:{d:16790976e5,l:"2023年3月18日",e:"<h2>1. 概述</h2>\n<p>类加载器是JVM执行类加载机制的前提。</p>\n<p><strong>ClassLoader的作用：</strong></p>\n<p>ClassLoader是Java的核心组件，所有的Class都是由ClassLoader进行加载的，ClassLoader负责通过各种方式将Class信息的二进制数据流读入JVM内部，转换为一个与目标类对应的java.lang.Class对象实例。然后交给Java虚拟机进行链接、初始化等操作。因此，ClassLoader在整个装载阶段，只能影响到类的加载，而无法通过ClassLoader去改变类的链接和初始化行为。至于它是否可以运行，则由Execution Engine决定。</p>",r:{minutes:36.03,words:10808},t:"类加载器",y:"a"}}],["/study-notes/JVM/Memory-GC/Clas-Loading-Subsystem/",{loader:()=>n.e(2652).then(n.bind(n,83293)),meta:{d:16790976e5,l:"2023年3月18日",e:"<h2>概述</h2>\n<figure><figcaption>image-20200705080719531</figcaption></figure>\n<p>完整图如下</p>\n<figure><figcaption>image-20200705080911284</figcaption></figure>\n<p>如果自己想手写一个Java虚拟机的话，主要考虑哪些结构呢？</p>\n<ul>\n<li>类加载器</li>\n<li>执行引擎</li>\n</ul>\n<h2>类加载器子系统作用</h2>\n<p>类加载器子系统负责从文件系统或者网络中加载Class文件，class文件在文件开头有特定的文件标识。</p>",r:{minutes:13.79,words:4138},t:"类加载子系统",y:"a"}}],["/study-notes/JVM/Memory-GC/Direct-Memory/",{loader:()=>n.e(7703).then(n.bind(n,8764)),meta:{d:16790976e5,l:"2023年3月18日",e:'\n<p>不是虚拟机运行时数据区的一部分，也不是《Java虚拟机规范》中定义的内存区域。</p>\n<p>直接内存是在Java堆外的、直接向系统申请的内存区间。</p>\n<p>来源于NIO，通过存在堆中的DirectByteBuffer操作Native内存</p>\n<p>通常，访问直接内存的速度会优于Java堆。即读写性能高。</p>\n<ul>\n<li>因此出于性能考虑，读写频繁的场合可能会考虑使用直接内存。</li>\n<li>Java的NIO库允许Java程序使用直接内存，用于数据缓冲区</li>\n</ul>\n<p>使用下列代码，直接分配本地内存空间</p>\n<div class="language-java line-numbers-mode" data-highlighter="shiki" data-ext="java" data-title="java" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD">int</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75"> BUFFER </span><span style="--shiki-light:#383A42;--shiki-dark:#56B6C2">=</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66"> 1024</span><span style="--shiki-light:#383A42;--shiki-dark:#56B6C2">*</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66">1024</span><span style="--shiki-light:#383A42;--shiki-dark:#56B6C2">*</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66">1024</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">;</span><span style="--shiki-light:#A0A1A7;--shiki-dark:#7F848E;--shiki-light-font-style:italic;--shiki-dark-font-style:italic"> // 1GB</span></span>\n<span class="line"><span style="--shiki-light:#C18401;--shiki-dark:#E5C07B">ByteBuffer</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75"> byteBuffer </span><span style="--shiki-light:#383A42;--shiki-dark:#56B6C2">=</span><span style="--shiki-light:#E45649;--shiki-dark:#E5C07B"> ByteBuffer</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">.</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF">allocateDirect</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">(BUFFER);</span></span></code></pre>\n<div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0"><div class="line-number"></div><div class="line-number"></div></div></div>',r:{minutes:1.23,words:370},t:"直接内存",y:"a"}}],["/study-notes/JVM/Memory-GC/Execution-Engine/",{loader:()=>n.e(6563).then(n.bind(n,29942)),meta:{d:16790976e5,l:"2023年3月18日",e:"<h2>执行引擎概述</h2>\n<p>执行引擎属于JVM的下层，里面包括 解释器、及时编译器、垃圾回收器</p>\n<figure><figcaption>image-20200710080707873</figcaption></figure>\n<p>执行引擎是Java虚拟机核心的组成部分之一。“虚拟机”是一个相对于“物理机”的概念，这两种机器都有代码执行能力，其区别是物理机的执行引擎是直接建立在处理器、缓存、指令集和操作系统层面上的，而虚拟机的执行引擎则是由软件自行实现的，因此可以不受物理条件制约地定制指令集与执行引擎的结构体系，能够执行那些不被硬件直接支持的指令集格式。</p>\n<p>JVM的主要任务是负责装载字节码到其内部，但字节码并不能够直接运行在操作系统之上，因为字节码指令并非等价于本地机器指令，它内部包含的仅仅只是一些能够被JVM所识别的字节码指令、符号表，以及其他辅助信息。</p>",r:{minutes:19.94,words:5981},t:"执行引擎",y:"a"}}],["/study-notes/JVM/Memory-GC/GC-Overview/",{loader:()=>n.e(3158).then(n.bind(n,84189)),meta:{d:16790976e5,l:"2023年3月18日",e:"<h2>概念</h2>\n<p>这次我们主要关注的是黄色部分，内存的分配与回收</p>\n<figure><figcaption>image-20200712084539884</figcaption></figure>\n<h2>什么是垃圾</h2>\n<p>在提到什么是垃圾之前，我们先看下面一张图</p>\n<figure><figcaption>image-20200712085456113</figcaption></figure>\n<p>从上图我们可以很明确的知道，Java 和 C++语言的区别，就在于垃圾收集技术和内存动态分配上，C语言没有垃圾收集技术，需要我们手动的收集。</p>\n<p>垃圾收集，不是Java语言的伴生产物。早在1960年，第一门开始使用内存动态分配和垃圾收集技术的Lisp语言诞生。\n关于垃圾收集有三个经典问题：</p>",r:{minutes:6.04,words:1811},t:"垃圾回收概述",y:"a"}}],["/study-notes/JVM/Memory-GC/GC-Period/",{loader:()=>n.e(9104).then(n.bind(n,25619)),meta:{d:16790976e5,l:"2023年3月18日",e:"<h2>GC分类与性能指标</h2>\n<p>垃圾收集器没有在规范中进行过多的规定，可以由不同的厂商、不同版本的JVM来实现。</p>\n<p>由于JDK的版本处于高速迭代过程中，因此Java发展至今已经衍生了众多的GC版本。</p>\n<p>从不同角度分析垃圾收集器，可以将GC分为不同的类型。</p>\n<blockquote>\n<p>Java不同版本新特性</p>\n<ul>\n<li>语法层面：Lambda表达式、switch、自动拆箱装箱、enum</li>\n<li>API层面：Stream API、新的日期时间、Optional、String、集合框架</li>\n<li>底层优化：JVM优化、GC的变化、元空间、静态域、字符串常量池位置变化</li>\n</ul>\n</blockquote>",r:{minutes:48.65,words:14596},t:"垃圾回收器",y:"a"}}],["/study-notes/JVM/Memory-GC/GC-Relevant-Algorithms/",{loader:()=>n.e(4801).then(n.bind(n,86305)),meta:{d:16790976e5,l:"2023年3月18日",e:"<h2>标记阶段：引用计数算法</h2>\n<p>在堆里存放着几乎所有的Java对象实例，在GC执行垃圾回收之前，首先需要区分出内存中哪些是存活对象，哪些是已经死亡的对象。只有被标记为己经死亡的对象，GC才会在执行垃圾回收时，释放掉其所占用的内存空间，因此这个过程我们可以称为垃圾标记阶段。</p>\n<p>那么在JVM中究竟是如何标记一个死亡对象呢？简单来说，当一个对象已经不再被任何的存活对象继续引用时，就可以宣判为已经死亡。</p>\n<p>判断对象存活一般有两种方式：<strong>引用计数算法</strong>和<strong>可达性分析算法。</strong></p>\n<p>引用计数算法（Reference Counting）比较简单，对每个对象保存一个整型的引用计数器属性。用于记录对象被引用的情况。</p>",r:{minutes:24.35,words:7304},t:"垃圾回收相关算法",y:"a"}}],["/study-notes/JVM/Memory-GC/GC-Relevant-Overview/",{loader:()=>n.e(3304).then(n.bind(n,83141)),meta:{d:16790976e5,l:"2023年3月18日",e:"<h2>System.gc()的理解</h2>\n<p>在默认情况下，通过system.gc（）者Runtime.getRuntime().gc() 的调用，会显式触发FullGC，同时对老年代和新生代进行回收，尝试释放被丢弃对象占用的内存。</p>\n<p>然而system.gc() )调用附带一个免责声明，无法保证对垃圾收集器的调用。(不能确保立即生效)</p>\n<p>JVM实现者可以通过system.gc() 调用来决定JVM的GC行为。而一般情况下，垃圾回收应该是自动进行的，无须手动触发，否则就太过于麻烦了。在一些特殊情况下，如我们正在编写一个性能基准，我们可以在运行之间调用System.gc()</p>",r:{minutes:20.41,words:6122},t:"垃圾回收相关概念",y:"a"}}],["/study-notes/JVM/Memory-GC/Heap/",{loader:()=>n.e(4018).then(n.bind(n,52518)),meta:{d:16790976e5,l:"2023年3月18日",e:"<h2>堆的核心概念</h2>\n<p>堆针对一个JVM进程来说是唯一的，也就是一个进程只有一个JVM，但是进程包含多个线程，他们是共享同一堆空间的。</p>\n<figure><figcaption>image-20200706195127740</figcaption></figure>\n<p>一个JVM实例只存在一个堆内存，堆也是Java内存管理的核心区域。</p>\n<p>Java堆区在JVM启动的时候即被创建，其空间大小也就确定了。是JVM管理的最大一块内存空间。</p>\n<ul>\n<li>堆内存的大小是可以调节的。</li>\n</ul>\n<p>《Java虚拟机规范》规定，堆可以处于物理上不连续的内存空间中，但在逻辑上它应该被视为连续的。</p>",r:{minutes:28.42,words:8525},t:"堆",y:"a"}}],["/study-notes/JVM/Memory-GC/JVM-RuntimeDataAreas/",{loader:()=>n.e(152).then(n.bind(n,23309)),meta:{d:16790976e5,l:"2023年3月18日",g:["JVM"],e:"<h2>前言</h2>\n<p>本节主要讲的是运行时数据区，也就是下图这部分，它是在类加载完成后的阶段</p>\n<figure><figcaption>image-20200705111640511</figcaption></figure>\n<p>当我们通过前面的：类的加载-&gt; 验证 -&gt; 准备 -&gt; 解析 -&gt; 初始化 这几个阶段完成后，就会用到执行引擎对我们的类进行使用，同时执行引擎将会使用到我们运行时数据区</p>\n<figure><figcaption>image-20200705111843003</figcaption></figure>\n<p>也就是大厨做饭，我们把大厨后面的东西（切好的菜，刀，调料），比作是运行时数据区。而厨师可以类比于执行引擎，将通过准备的东西进行制作成精美的菜品</p>",r:{minutes:3.41,words:1023},t:"运行时数据区概述及线程",y:"a"}}],["/study-notes/JVM/Memory-GC/JVM-Stack/",{loader:()=>n.e(1474).then(n.bind(n,46270)),meta:{d:16790976e5,l:"2023年3月18日",e:"<h2>虚拟机栈概述</h2>\n<p>由于跨平台性的设计，Java的指令都是根据栈来设计的。不同平台CPU架构不同，所以不能设计为基于寄存器的。\n优点是跨平台，指令集小，编译器容易实现，缺点是性能下降，实现同样的功能需要更多的指令。</p>\n<p>有不少Java开发人员一提到Java内存结构，就会非常粗粒度地将JVM中的内存区理解为仅有Java堆（heap）和Java战（stack）？为什么？</p>\n<p>首先栈是运行时的单位，而堆是存储的单位</p>\n<ul>\n<li>栈解决程序的运行问题，即程序如何执行，或者说如何处理数据。</li>\n<li>堆解决的是数据存储的问题，即数据怎么放，放哪里</li>\n</ul>",r:{minutes:25.02,words:7505},t:"虚拟机栈",y:"a"}}],["/study-notes/JVM/Memory-GC/Java-Architecture/",{loader:()=>n.e(2040).then(n.bind(n,58187)),meta:{d:16790976e5,l:"2023年3月18日",e:"<h2>前言</h2>\n<p>作为Java工程师的你曾被伤害过吗？你是否也遇到过这些问题？</p>\n<p>运行着的线上系统突然卡死，系统无法访问，甚至直接OOMM！</p>\n<ul>\n<li>想解决线上JVM GC问题，但却无从下手。</li>\n<li>新项目上线，对各种JVM参数设置一脸茫然，直接默认吧然后就JJ了</li>\n<li>每次面试之前都要重新背一遍JVM的一些原理概念性的东西，然而面试官却经常问你在实际项目中如何调优VM参数，如何解决GC、OOM等问题，一脸懵逼。</li>\n</ul>\n<figure><figcaption>image-20200704111417472</figcaption></figure>",r:{minutes:21.14,words:6341},t:"JVM与Java体系结构",y:"a"}}],["/study-notes/JVM/Memory-GC/Method-Area/",{loader:()=>n.e(8049).then(n.bind(n,80547)),meta:{d:16790976e5,l:"2023年3月18日",e:"<h2>前言</h2>\n<p>这次所讲述的是运行时数据区的最后一个部分</p>\n<figure><figcaption>image-20200708093918121</figcaption></figure>\n<p>从线程共享与否的角度来看</p>\n<figure><figcaption>image-20200708094507624</figcaption></figure>\n<p>ThreadLocal：如何保证多个线程在并发环境下的安全性？典型应用就是数据库连接管理，以及会话管理</p>\n<h2>栈、堆、方法区的交互关系</h2>\n<p>下面就涉及了对象的访问定位</p>\n<figure><figcaption>image-20200708094747667</figcaption></figure>",r:{minutes:19.2,words:5760},t:"方法区",y:"a"}}],["/study-notes/JVM/Memory-GC/Native-Stack/",{loader:()=>n.e(7890).then(n.bind(n,98092)),meta:{d:16790976e5,l:"2023年3月18日",e:'<h2>什么是本地方法</h2>\n<p>简单地讲，一个Native Methodt是一个Java调用非Java代码的接囗。一个Native Method是这样一个Java方法：该方法的实现由非Java语言实现，比如C。这个特征并非Java所特有，很多其它的编程语言都有这一机制，比如在C++中，你可以用extern "c" 告知c++编译器去调用一个c的函数。</p>\n<p>"A native method is a Java method whose implementation is provided by non-java code."（本地方法是一个非Java的方法，它的具体实现是非Java代码的实现）</p>',r:{minutes:4.75,words:1424},t:"本地方法接口和本地方法栈",y:"a"}}],["/study-notes/JVM/Memory-GC/Object-Instantiation/",{loader:()=>n.e(9931).then(n.bind(n,3860)),meta:{d:16790976e5,l:"2023年3月18日",e:"<h2>对象实例化</h2>\n<h3>面试题</h3>\n<ul>\n<li>对象在JVM中是怎么存储的？</li>\n<li>对象头信息里面有哪些东西？</li>\n<li>Java对象头有什么？</li>\n</ul>\n<p>从对象创建的方式 和 步骤开始说</p>\n<figure><figcaption>image-20200709095356247</figcaption></figure>\n<h3>对象创建方式</h3>\n<ul>\n<li>new：最常见的方式、单例类中调用getInstance的静态类方法，XXXFactory的静态方法</li>\n<li>Class的newInstance方法：在JDK9里面被标记为过时的方法，因为只能调用空参构造器</li>\n<li>Constructor的newInstance(XXX)：反射的方式，可以调用空参的，或者带参的构造器</li>\n<li>使用clone()：不调用任何的构造器，要求当前的类需要实现Cloneable接口中的clone接口</li>\n<li>使用序列化：序列化一般用于Socket的网络传输</li>\n<li>第三方库 Objenesis</li>\n</ul>",r:{minutes:5.36,words:1607},t:"对象实例化内存布局与访问定位",y:"a"}}],["/study-notes/JVM/Memory-GC/PCounter-Register/",{loader:()=>n.e(9326).then(n.bind(n,86398)),meta:{d:16790976e5,l:"2023年3月18日",e:"<h2>介绍</h2>\n<p>JVM中的程序计数寄存器（Program Counter Register）中，Register的命名源于CPU的寄存器，寄存器存储指令相关的现场信息。CPU只有把数据装载到寄存器才能够运行。这里，并非是广义上所指的物理寄存器，或许将其翻译为PC计数器（或指令计数器）会更加贴切（也称为程序钩子），并且也不容易引起一些不必要的误会。JVM中的PC寄存器是对物理PC寄存器的一种抽象模拟。</p>\n<figure><figcaption>image-20200705155551919</figcaption></figure>\n<p>它是一块很小的内存空间，几乎可以忽略不记。也是运行速度最快的存储区域。</p>",r:{minutes:3.76,words:1128},t:"程序计数器",y:"a"}}],["/study-notes/JVM/Memory-GC/StringTable/",{loader:()=>n.e(7119).then(n.bind(n,79392)),meta:{d:16790976e5,l:"2023年3月18日",e:'<h2>String的基本特性</h2>\n<ul>\n<li>String：字符串，使用一对 ”” 引起来表示\n<ul>\n<li>String s1 = "mogublog" ;   // 字面量的定义方式</li>\n<li>String s2 =  new String("moxi");</li>\n</ul>\n</li>\n<li>string声明为final的，不可被继承</li>\n<li>String实现了Serializable接口：表示字符串是支持序列化的。实现了Comparable接口：表示string可以比较大小</li>\n<li>string在jdk8及以前内部定义了final char[] value用于存储字符串数据。JDK9时改为byte[]</li>\n</ul>',r:{minutes:16.15,words:4846},t:"StringTable",y:"a"}}],["/study-notes/JVM/Performance-Monitoring-Tuning/GC-Log/",{loader:()=>n.e(9304).then(n.bind(n,26585)),meta:{d:16790976e5,l:"2023年3月18日",g:["JVM"],e:"<h2>5.1. GC 分类</h2>\n<p>针对 HotSpot VM 的实现，它里面的 GC 按照回收区域又分为两大种类型：一种是部分收集（Partial GC），一种是整堆收集（Full GC）</p>\n<ul>\n<li>\n<p>部分收集（Partial GC）：不是完整收集整个 Java 堆的垃圾收集。其中又分为：</p>\n<ul>\n<li>新生代收集（Minor GC / Young GC）：只是新生代（Eden / S0, S1）的垃圾收集</li>\n<li>老年代收集（Major GC / Old GC）：只是老年代的垃圾收集。目前，只有 CMS GC 会有单独收集老年代的行为。<code>&lt;mark&gt;</code>注意，很多时候 Major GC 会和 Full GC 混淆使用，需要具体分辨是老年代回收还是整堆回收。<code>&lt;/mark&gt;</code></li>\n</ul>\n</li>\n<li>\n<p>混合收集（Mixed GC）：收集整个新生代以及部分老年代的垃圾收集。目前，只有 G1 GC 会有这种行为</p>\n</li>\n<li>\n<p>整堆收集（Full GC）：收集整个 java 堆和方法区的垃圾收集。</p>\n</li>\n</ul>",r:{minutes:4.21,words:1262},t:"分析 GC 日志",y:"a"}}],["/study-notes/JVM/Performance-Monitoring-Tuning/Heap-Memory-Leak/",{loader:()=>n.e(4975).then(n.bind(n,42138)),meta:{d:16790976e5,l:"2023年3月18日",e:"<h2>1. 浅堆（Shallow Heap）</h2>\n<p>浅堆是指一个对象所消耗的内存。在 32 位系统中，一个对象引用会占据 4 个字节，一个 int 类型会占据 4 个字节，long 型变量会占据 8 个字节，每个对象头需要占用 8 个字节。根据堆快照格式不同，对象的大小可能会同 8 字节进行对齐。</p>\n<p>以 String 为例：2 个 int 值共占 8 字节，对象引用占用 4 字节，对象头 8 字节，合计 20 字节，向 8 字节对齐，故占 24 字节。（jdk7 中）</p>\n<table>\n<thead>\n<tr>\n<th>int</th>\n<th>hash32</th>\n<th>0</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td><strong>int</strong></td>\n<td><strong>hash</strong></td>\n<td><strong>0</strong></td>\n</tr>\n<tr>\n<td><strong>ref</strong></td>\n<td><strong>value</strong></td>\n<td><strong>C:\\Users\\Administrat</strong></td>\n</tr>\n</tbody>\n</table>",r:{minutes:13.34,words:4001},t:"浅堆深堆与内存泄露",y:"a"}}],["/study-notes/JVM/Performance-Monitoring-Tuning/JVM-Monitoring-Diagnostic-Tools/",{loader:()=>n.e(4641).then(n.bind(n,74006)),meta:{d:16790976e5,l:"2023年3月18日",e:"<h2>2.1. 概述</h2>\n<p>性能诊断是软件工程师在日常工作中需要经常面对和解决的问题，在用户体验至上的今天，解决好应用的性能问题能带来非常大的收益。</p>\n<p>Java 作为最流行的编程语言之一，其应用性能诊断一直受到业界广泛关注。可能造成 Java 应用出现性能问题的因素非常多，例如线程控制、磁盘读写、数据库访问、网络 I/O、垃圾收集等。想要定位这些问题，一款优秀的性能诊断工具必不可少。</p>\n<p>体会 1：使用数据说明问题，使用知识分析问题，使用工具处理问题。</p>\n<p>体会 2：无监控、不调优！</p>\n<p><strong>简单命令行工具</strong></p>",r:{minutes:13.87,words:4161},t:"JVM监控及诊断工具-命令行篇",y:"a"}}],["/study-notes/JVM/Performance-Monitoring-Tuning/JVM-Monitoring-Diagnostic-Tools-GUI/",{loader:()=>n.e(4719).then(n.bind(n,23193)),meta:{d:16790976e5,l:"2023年3月18日",e:"<h2>3.1. 工具概述</h2>\n<p>使用上一章命令行工具或组合能帮您获取目标 Java 应用性能相关的基础信息，但它们存在下列局限：</p>\n<ul>\n<li>1．无法获取方法级别的分析数据，如方法间的调用关系、各方法的调用次数和调用时间等（这对定位应用性能瓶颈至关重要）。</li>\n<li>2．要求用户登录到目标 Java 应用所在的宿主机上，使用起来不是很方便。</li>\n<li>3．分析数据通过终端输出，结果展示不够直观。</li>\n</ul>\n<p>为此，JDK 提供了一些内存泄漏的分析工具，如 jconsole，jvisualvm 等，用于辅助开发人员定位问题，但是这些工具很多时候并不足以满足快速定位的需求。所以这里我们介绍的工具相对多一些、丰富一些。</p>",r:{minutes:19.92,words:5976},t:"JVM监控及诊断工具-GUI 篇",y:"a"}}],["/study-notes/JVM/Performance-Monitoring-Tuning/JVM-Overview/",{loader:()=>n.e(4740).then(n.bind(n,60382)),meta:{d:16790976e5,l:"2023年3月18日",e:"<h2>1.1. 大厂面试题</h2>\n<blockquote>\n<p>支付宝：</p>\n<p>支付宝三面：JVM 性能调优都做了什么？</p>\n<p>小米：</p>\n<p>有做过 JVM 内存优化吗？</p>\n<p>从 SQL、JVM、架构、数据库四个方面讲讲优化思路</p>\n<p>蚂蚁金服：</p>\n<p>JVM 的编译优化</p>\n<p>jvm 性能调优都做了什么</p>\n<p>JVM 诊断调优工具用过哪些？</p>\n<p>二面：jvm 怎样调优，堆内存、栈空间设置多少合适</p>\n<p>三面：JVM 相关的分析工具使用过的有哪些？具体的性能调优步骤如何</p>\n<p>阿里：</p>\n<p>如何进行 JVM 调优？有哪些方法？</p>\n<p>如何理解内存泄漏问题？有哪些情况会导致内存泄漏？如何解决？</p>\n<p>字节跳动：</p>\n<p>三面：JVM 如何调优、参数怎么调？</p>\n<p>拼多多：</p>\n<p>从 SQL、JVM、架构、数据库四个方面讲讲优化思路</p>\n<p>京东：</p>\n<p>JVM 诊断调优工具用过哪些？</p>\n<p>每秒几十万并发的秒杀系统为什么会频繁发生 GC？</p>\n<p>日均百万级交易系统如何优化 JVM？</p>\n<p>线上生产系统 OOM 如何监控及定位与解决？</p>\n<p>高并发系统如何基于 G1 垃圾回收器优化性能？</p>\n</blockquote>",r:{minutes:3.74,words:1123},t:"JVM概述篇",y:"a"}}],["/study-notes/JVM/Performance-Monitoring-Tuning/JVM-Runtime-Parameters/",{loader:()=>n.e(7964).then(n.bind(n,5911)),meta:{d:16790976e5,l:"2023年3月18日",e:'<h2>4.1. JVM 参数选项</h2>\n<p>官网地址：<a href="https://docs.oracle.com/javase/8/docs/technotes/tools/windows/java.html" target="_blank" rel="noopener noreferrer">https://docs.oracle.com/javase/8/docs/technotes/tools/windows/java.html</a></p>\n<h3>4.1.1. 类型一：标准参数选项</h3>\n<div class="language-shell line-numbers-mode" data-highlighter="shiki" data-ext="shell" data-title="shell" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">&gt; java -help</span></span>\n<span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF">用法:</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379"> java</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF"> [-options] class [args...]</span></span>\n<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">           (</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF">执行类</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">)</span></span>\n<span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF">   或</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379">  java</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF"> [-options] -jar jarfile [args...]</span></span>\n<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">           (</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF">执行</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379"> jar</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379"> 文件</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">)</span></span>\n<span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF">其中选项包括:</span></span>\n<span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF">    -d32</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379">          使用</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66"> 32</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379"> 位数据模型</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF"> (如果可用)</span></span>\n<span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF">    -d64</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379">          使用</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66"> 64</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379"> 位数据模型</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF"> (如果可用)</span></span>\n<span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF">    -server</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379">       选择</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379"> "server"</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379"> VM</span></span>\n<span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF">                  默认</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379"> VM</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379"> 是</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379"> server.</span></span>\n<span class="line"></span>\n<span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF">    -cp</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF"> &lt;</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379">目录和</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379"> zip/jar</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379"> 文件的类搜索路</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">径&gt;</span></span>\n<span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF">    -classpath</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF"> &lt;</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379">目录和</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379"> zip/jar</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379"> 文件的类搜索路</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">径&gt;</span></span>\n<span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF">                  用</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF"> ; </span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF">分隔的目录,</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379"> JAR</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379"> 档案</span></span>\n<span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF">                  和</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379"> ZIP</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379"> 档案列表,</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379"> 用于搜索类文件。</span></span>\n<span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF">    -D</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">&lt;名称&gt;=&lt;值&gt;</span></span>\n<span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF">                  设置系统属性</span></span>\n<span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF">    -verbose:[class</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">|</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF">gc</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">|</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF">jni]</span></span>\n<span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF">                  启用详细输出</span></span>\n<span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF">    -version</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379">      输出产品版本并退出</span></span>\n<span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF">    -version:</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">&lt;值&gt;</span></span>\n<span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF">                  警告:</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379"> 此功能已过时,</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379"> 将在</span></span>\n<span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF">                  未来发行版中删除。</span></span>\n<span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF">                  需要指定的版本才能运行</span></span>\n<span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF">    -showversion</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379">  输出产品版本并继续</span></span>\n<span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF">    -jre-restrict-search</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF"> | </span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF">-no-jre-restrict-search</span></span>\n<span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF">                  警告:</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379"> 此功能已过时,</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379"> 将在</span></span>\n<span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF">                  未来发行版中删除。</span></span>\n<span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF">                  在版本搜索中包括/排除用户专用</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379"> JRE</span></span>\n<span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF">    -?</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66"> -help</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379">      输出此帮助消息</span></span>\n<span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF">    -X</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379">            输出非标准选项的帮助</span></span>\n<span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF">    -ea[:</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">&lt;packagename&gt;...|</span><span style="--shiki-light:#0184BC;--shiki-dark:#56B6C2">:</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">&lt;classname&gt;]</span></span>\n<span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF">    -enableassertions[:</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">&lt;packagename&gt;...|</span><span style="--shiki-light:#0184BC;--shiki-dark:#56B6C2">:</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">&lt;classname&gt;]</span></span>\n<span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF">                  按指定的粒度启用断言</span></span>\n<span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF">    -da[:</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">&lt;packagename&gt;...|</span><span style="--shiki-light:#0184BC;--shiki-dark:#56B6C2">:</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">&lt;classname&gt;]</span></span>\n<span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF">    -disableassertions[:</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">&lt;packagename&gt;...|</span><span style="--shiki-light:#0184BC;--shiki-dark:#56B6C2">:</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">&lt;classname&gt;]</span></span>\n<span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF">                  禁用具有指定粒度的断言</span></span>\n<span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF">    -esa</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF"> | </span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF">-enablesystemassertions</span></span>\n<span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF">                  启用系统断言</span></span>\n<span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF">    -dsa</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF"> | </span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF">-disablesystemassertions</span></span>\n<span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF">                  禁用系统断言</span></span>\n<span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF">    -agentlib:</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">&lt;libname&gt;[=&lt;选项&gt;]</span></span>\n<span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF">                  加载本机代理库</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF"> &lt;</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379">libnam</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">e&gt;</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379">,</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379"> 例如</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66"> -agentlib:hprof</span></span>\n<span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF">                  另请参阅</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66"> -agentlib:jdwp=help</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379"> 和</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66"> -agentlib:hprof=help</span></span>\n<span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF">    -agentpath:</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">&lt;pathname&gt;[=&lt;选项&gt;]</span></span>\n<span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF">                  按完整路径名加载本机代理库</span></span>\n<span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF">    -javaagent:</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">&lt;jarpath&gt;[=&lt;选项&gt;]</span></span>\n<span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF">                  加载</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379"> Java</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379"> 编程语言代理,</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379"> 请参阅</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379"> java.lang.instrument</span></span>\n<span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF">    -splash:</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">&lt;imagepath&gt;</span></span>\n<span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF">                  使用指定的图像显示启动屏幕</span></span>\n<span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF">有关详细信息,</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379"> 请参阅</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379"> http://www.oracle.com/technetwork/java/javase/documentation/index.html。</span></span></code></pre>\n<div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>',r:{minutes:12.83,words:3849},t:"JVM 运行时参数",y:"a"}}],["/study-notes/JVM/Performance-Monitoring-Tuning/OQL/",{loader:()=>n.e(3739).then(n.bind(n,57811)),meta:{d:16790976e5,l:"2023年3月18日",e:'<p>MAT 支持一种类似于 SQL 的查询语言 OQL（Object Query Language）。OQL 使用类 SQL 语法，可以在堆中进行对象的查找和筛选。</p>\n<h2>1. SELECT 子句</h2>\n<p>在 MAT 中，Select 子句的格式与 SQL 基本一致，用于指定要显示的列。Select 子句中可以使用“＊”，查看结果对象的引用实例（相当于 outgoing references）。</p>\n<div class="language-sql line-numbers-mode" data-highlighter="shiki" data-ext="sql" data-title="sql" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD">SELECT</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF"> * </span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD">FROM</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66"> java</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">.</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66">util</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">.Vector v</span></span></code></pre>\n<div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0"><div class="line-number"></div></div></div>',r:{minutes:2.16,words:648},t:"使用 OQL 语言查询对象信息",y:"a"}}],["/study-notes/heima-java-bagu/frame/mybatis/",{loader:()=>n.e(212).then(n.bind(n,15402)),meta:{d:1722091391e3,c:"面试",e:'<div class="hint-container tip">\n<p class="hint-container-title">提示</p>\n<p>视频来源：<a href="https://www.bilibili.com/video/BV1yT411H7YK/?vd_source=7138dfc78c49f602f8d3ed8cfbf0513d" target="_blank" rel="noopener noreferrer">新版Java面试专题视频教程，java八股文面试全套真题+深度详解（含大厂高频面试真题）</a></p>\n<p>2023-10-08   P44 - P44\n2023-10-09   P44 - P46</p>\n</div>',r:{minutes:3.82,words:1147},t:"框架 - Mybatis",y:"a"}}],["/study-notes/heima-java-bagu/frame/spring/",{loader:()=>n.e(2322).then(n.bind(n,7362)),meta:{d:1722091391e3,c:"面试",e:'<div class="hint-container tip">\n<p class="hint-container-title">提示</p>\n<p>视频来源：<a href="https://www.bilibili.com/video/BV1yT411H7YK/?vd_source=7138dfc78c49f602f8d3ed8cfbf0513d" target="_blank" rel="noopener noreferrer">新版Java面试专题视频教程，java八股文面试全套真题+深度详解（含大厂高频面试真题）</a></p>\n</div>\n<h3>1、Spring框架中的单例 bean是线程安全的吗？</h3>',r:{minutes:8.4,words:2521},t:"框架 - Spring",y:"a"}}],["/404.html",{loader:()=>n.e(7490).then(n.bind(n,54510)),meta:{t:""}}],["/posts/",{loader:()=>n.e(8666).then(n.bind(n,98290)),meta:{t:"Posts"}}],["/problem-record/",{loader:()=>n.e(5060).then(n.bind(n,99581)),meta:{t:"Problem Record"}}],["/vue/",{loader:()=>n.e(1205).then(n.bind(n,83049)),meta:{t:"Vue"}}],["/study-notes/heima-java-bagu/enterprise-scenarios/",{loader:()=>n.e(3164).then(n.bind(n,55778)),meta:{t:"Enterprise Scenarios"}}],["/study-notes/shangguigu-second/",{loader:()=>n.e(9736).then(n.bind(n,55983)),meta:{t:"Shangguigu Second"}}],["/study-notes/shangguigu-second/CountDownLatch_CyclicBarrier_Semaphore/",{loader:()=>n.e(5446).then(n.bind(n,20733)),meta:{t:"Count Down Latch Cyclic Barrier Semaphore"}}],["/study-notes/shangguigu-second/JVM/",{loader:()=>n.e(2200).then(n.bind(n,76703)),meta:{t:"JVM"}}],["/study-notes/shangguigu-second/lock/",{loader:()=>n.e(7346).then(n.bind(n,16169)),meta:{t:"Lock"}}],["/study-notes/shangguigu-second/volatile/",{loader:()=>n.e(5045).then(n.bind(n,41980)),meta:{t:"Volatile"}}],["/category/",{loader:()=>n.e(3583).then(n.bind(n,70905)),meta:{t:"分类",I:!1}}],["/category/%E5%8D%9A%E5%AE%A2/",{loader:()=>n.e(1080).then(n.bind(n,94162)),meta:{t:"博客 分类",I:!1}}],["/category/python/",{loader:()=>n.e(1034).then(n.bind(n,40403)),meta:{t:"Python 分类",I:!1}}],["/category/%E4%BD%9C%E8%80%85/",{loader:()=>n.e(1939).then(n.bind(n,71449)),meta:{t:"作者 分类",I:!1}}],["/category/%E4%BD%BF%E7%94%A8%E6%8C%87%E5%8D%97/",{loader:()=>n.e(4021).then(n.bind(n,94581)),meta:{t:"使用指南 分类",I:!1}}],["/category/%E6%8C%87%E5%8D%97/",{loader:()=>n.e(8622).then(n.bind(n,95573)),meta:{t:"指南 分类",I:!1}}],["/category/%E9%9D%A2%E8%AF%95/",{loader:()=>n.e(1673).then(n.bind(n,28885)),meta:{t:"面试 分类",I:!1}}],["/category/%E9%9D%A2%E8%AF%95%E6%8C%87%E5%8D%97/",{loader:()=>n.e(1171).then(n.bind(n,53201)),meta:{t:"面试指南 分类",I:!1}}],["/category/%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/",{loader:()=>n.e(5334).then(n.bind(n,8571)),meta:{t:"学习笔记 分类",I:!1}}],["/category/%E6%A8%B1%E6%A1%83/",{loader:()=>n.e(9080).then(n.bind(n,8104)),meta:{t:"樱桃 分类",I:!1}}],["/category/%E7%81%AB%E9%BE%99%E6%9E%9C/",{loader:()=>n.e(8280).then(n.bind(n,60493)),meta:{t:"火龙果 分类",I:!1}}],["/category/%E6%B0%B4%E6%9E%9C/",{loader:()=>n.e(8484).then(n.bind(n,78659)),meta:{t:"水果 分类",I:!1}}],["/category/%E8%8D%89%E8%8E%93/",{loader:()=>n.e(6112).then(n.bind(n,59714)),meta:{t:"草莓 分类",I:!1}}],["/category/%E8%94%AC%E8%8F%9C/",{loader:()=>n.e(3612).then(n.bind(n,40993)),meta:{t:"蔬菜 分类",I:!1}}],["/category/%E6%96%87%E4%BB%B6%E4%B8%8B%E8%BD%BD/",{loader:()=>n.e(3665).then(n.bind(n,13202)),meta:{t:"文件下载 分类",I:!1}}],["/category/code/",{loader:()=>n.e(3897).then(n.bind(n,25393)),meta:{t:"code 分类",I:!1}}],["/category/%E5%BC%80%E5%8F%91%E5%B7%A5%E5%85%B7/",{loader:()=>n.e(4491).then(n.bind(n,83784)),meta:{t:"开发工具 分类",I:!1}}],["/category/idea/",{loader:()=>n.e(739).then(n.bind(n,48458)),meta:{t:"IDEA 分类",I:!1}}],["/category/%E4%BB%A3%E7%A0%81%E5%AE%9E%E8%B7%B5/",{loader:()=>n.e(2193).then(n.bind(n,32554)),meta:{t:"代码实践 分类",I:!1}}],["/category/redisson/",{loader:()=>n.e(4441).then(n.bind(n,92898)),meta:{t:"redisson 分类",I:!1}}],["/category/%E5%88%86%E5%B8%83%E5%BC%8F%E9%94%81/",{loader:()=>n.e(187).then(n.bind(n,44943)),meta:{t:"分布式锁 分类",I:!1}}],["/category/vue%E7%B3%BB%E5%88%97/",{loader:()=>n.e(1026).then(n.bind(n,84084)),meta:{t:"Vue系列 分类",I:!1}}],["/category/web3/",{loader:()=>n.e(1643).then(n.bind(n,74590)),meta:{t:"web3 分类",I:!1}}],["/category/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BD%91%E7%BB%9C/",{loader:()=>n.e(8387).then(n.bind(n,45416)),meta:{t:"计算机网络 分类",I:!1}}],["/category/redis/",{loader:()=>n.e(7).then(n.bind(n,72352)),meta:{t:"Redis 分类",I:!1}}],["/category/%E4%B8%AD%E9%97%B4%E4%BB%B6/",{loader:()=>n.e(7281).then(n.bind(n,42789)),meta:{t:"中间件 分类",I:!1}}],["/category/%E5%BE%85%E5%AE%8C%E6%88%90%E5%AD%A6%E4%B9%A0/",{loader:()=>n.e(7897).then(n.bind(n,43099)),meta:{t:"待完成学习 分类",I:!1}}],["/category/%E9%BB%91%E9%A9%AC/",{loader:()=>n.e(1785).then(n.bind(n,41485)),meta:{t:"黑马 分类",I:!1}}],["/category/juc/",{loader:()=>n.e(9954).then(n.bind(n,35608)),meta:{t:"JUC 分类",I:!1}}],["/category/%E7%BA%BF%E7%A8%8B%E6%B1%A0/",{loader:()=>n.e(8338).then(n.bind(n,13590)),meta:{t:"线程池 分类",I:!1}}],["/category/github/",{loader:()=>n.e(2143).then(n.bind(n,5352)),meta:{t:"GitHub 分类",I:!1}}],["/tag/",{loader:()=>n.e(1797).then(n.bind(n,14103)),meta:{t:"标签",I:!1}}],["/tag/%E7%A6%81%E7%94%A8/",{loader:()=>n.e(1331).then(n.bind(n,62630)),meta:{t:"标签: 禁用",I:!1}}],["/tag/%E5%8A%A0%E5%AF%86/",{loader:()=>n.e(8496).then(n.bind(n,65637)),meta:{t:"标签: 加密",I:!1}}],["/tag/%E5%B8%83%E5%B1%80/",{loader:()=>n.e(609).then(n.bind(n,98661)),meta:{t:"标签: 布局",I:!1}}],["/tag/markdown/",{loader:()=>n.e(7931).then(n.bind(n,77301)),meta:{t:"标签: Markdown",I:!1}}],["/tag/%E9%A1%B5%E9%9D%A2%E9%85%8D%E7%BD%AE/",{loader:()=>n.e(602).then(n.bind(n,30721)),meta:{t:"标签: 页面配置",I:!1}}],["/tag/%E4%BD%BF%E7%94%A8%E6%8C%87%E5%8D%97/",{loader:()=>n.e(1431).then(n.bind(n,25198)),meta:{t:"标签: 使用指南",I:!1}}],["/tag/%E7%BA%A2/",{loader:()=>n.e(4068).then(n.bind(n,48616)),meta:{t:"标签: 红",I:!1}}],["/tag/%E5%B0%8F/",{loader:()=>n.e(3215).then(n.bind(n,23128)),meta:{t:"标签: 小",I:!1}}],["/tag/%E5%9C%86/",{loader:()=>n.e(9048).then(n.bind(n,36420)),meta:{t:"标签: 圆",I:!1}}],["/tag/%E5%A4%A7/",{loader:()=>n.e(3047).then(n.bind(n,94561)),meta:{t:"标签: 大",I:!1}}],["/tag/git/",{loader:()=>n.e(8474).then(n.bind(n,49516)),meta:{t:"标签: Git",I:!1}}],["/tag/pdf%E6%96%87%E4%BB%B6%E5%90%88%E5%B9%B6/",{loader:()=>n.e(9491).then(n.bind(n,77868)),meta:{t:"标签: PDF文件合并",I:!1}}],["/tag/redisson/",{loader:()=>n.e(2707).then(n.bind(n,38997)),meta:{t:"标签: redisson",I:!1}}],["/tag/web3/",{loader:()=>n.e(6549).then(n.bind(n,39779)),meta:{t:"标签: web3",I:!1}}],["/tag/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BD%91%E7%BB%9C/",{loader:()=>n.e(5229).then(n.bind(n,48532)),meta:{t:"标签: 计算机网络",I:!1}}],["/tag/redis/",{loader:()=>n.e(8857).then(n.bind(n,66561)),meta:{t:"标签: Redis",I:!1}}],["/tag/rocketmq/",{loader:()=>n.e(9624).then(n.bind(n,78406)),meta:{t:"标签: RocketMQ",I:!1}}],["/tag/springcloud/",{loader:()=>n.e(6308).then(n.bind(n,44415)),meta:{t:"标签: SpringCloud",I:!1}}],["/tag/springboot/",{loader:()=>n.e(1159).then(n.bind(n,24155)),meta:{t:"标签: SpringBoot",I:!1}}],["/tag/jvm/",{loader:()=>n.e(5837).then(n.bind(n,58059)),meta:{t:"标签: JVM",I:!1}}],["/tag/juc/",{loader:()=>n.e(4540).then(n.bind(n,8477)),meta:{t:"标签: JUC",I:!1}}],["/tag/cas/",{loader:()=>n.e(6171).then(n.bind(n,37687)),meta:{t:"标签: CAS",I:!1}}],["/tag/aba%E9%97%AE%E9%A2%98/",{loader:()=>n.e(626).then(n.bind(n,57331)),meta:{t:"标签: ABA问题",I:!1}}],["/tag/volatile/",{loader:()=>n.e(3878).then(n.bind(n,40477)),meta:{t:"标签: Volatile",I:!1}}],["/tag/blockingqueue/",{loader:()=>n.e(6244).then(n.bind(n,76062)),meta:{t:"标签: BlockingQueue",I:!1}}],["/tag/cyclicbarrier/",{loader:()=>n.e(3984).then(n.bind(n,92008)),meta:{t:"标签: CyclicBarrier",I:!1}}],["/tag/semaphore/",{loader:()=>n.e(8648).then(n.bind(n,28536)),meta:{t:"标签: Semaphore",I:!1}}],["/tag/countdownlatch/",{loader:()=>n.e(5841).then(n.bind(n,47508)),meta:{t:"标签: CountDownLatch",I:!1}}],["/tag/oom/",{loader:()=>n.e(5123).then(n.bind(n,80757)),meta:{t:"标签: OOM",I:!1}}],["/tag/java%E4%B8%AD%E7%9A%84%E5%BC%95%E7%94%A8/",{loader:()=>n.e(8374).then(n.bind(n,80561)),meta:{t:"标签: Java中的引用",I:!1}}],["/tag/%E6%AD%BB%E9%94%81/",{loader:()=>n.e(3442).then(n.bind(n,65645)),meta:{t:"标签: 死锁",I:!1}}],["/tag/%E5%9E%83%E5%9C%BE%E6%94%B6%E9%9B%86%E5%99%A8/",{loader:()=>n.e(6517).then(n.bind(n,26347)),meta:{t:"标签: 垃圾收集器",I:!1}}],["/tag/linux%E8%AF%8A%E6%96%AD%E5%8E%9F%E5%9B%A0/",{loader:()=>n.e(4182).then(n.bind(n,54392)),meta:{t:"标签: Linux诊断原因",I:!1}}],["/tag/synchronized/",{loader:()=>n.e(6236).then(n.bind(n,76209)),meta:{t:"标签: Synchronized",I:!1}}],["/tag/lock/",{loader:()=>n.e(5501).then(n.bind(n,17082)),meta:{t:"标签: Lock",I:!1}}],["/tag/%E7%BA%BF%E7%A8%8B%E6%B1%A0/",{loader:()=>n.e(3308).then(n.bind(n,14571)),meta:{t:"标签: 线程池",I:!1}}],["/tag/github/",{loader:()=>n.e(2813).then(n.bind(n,21384)),meta:{t:"标签: GitHub",I:!1}}],["/tag/%E9%94%81/",{loader:()=>n.e(3089).then(n.bind(n,92256)),meta:{t:"标签: 锁",I:!1}}],["/tag/aqs/",{loader:()=>n.e(5709).then(n.bind(n,40456)),meta:{t:"标签: AQS",I:!1}}],["/tag/redis/",{loader:()=>n.e(8857).then(n.bind(n,66561)),meta:{t:"标签: redis",I:!1}}],["/tag/spring/",{loader:()=>n.e(6847).then(n.bind(n,19973)),meta:{t:"标签: spring",I:!1}}],["/article/",{loader:()=>n.e(7511).then(n.bind(n,59574)),meta:{t:"文章",I:!1}}],["/star/",{loader:()=>n.e(7199).then(n.bind(n,83639)),meta:{t:"星标",I:!1}}],["/timeline/",{loader:()=>n.e(5464).then(n.bind(n,13931)),meta:{t:"时间轴",I:!1}}]])},58761:(s,i,n)=>{n.d(i,{U:()=>a});const a=JSON.parse('{"base":"/blog/","lang":"zh-CN","title":"撄宁的博客","description":"撄宁的博客","head":[],"locales":{}}')},26653:(s,i,n)=>{n.d(i,{K:()=>a});const a=JSON.parse('{"encrypt":{"config":{"/demo/encrypt.html":["$2a$10$uRJUOv3q1b0AzqL.iEDuluj7R46ZuF/DXo/39kBt4QMIs/9aM3DmW"]}},"author":{"name":"樱宁","url":"https://mister-hope.com"},"logo":"https://theme-hope-assets.vuejs.press/logo.svg","repo":"vuepress-theme-hope/vuepress-theme-hope","docsDir":"src","footer":"子在川上曰：“逝者如斯夫，不舍昼夜。","displayFooter":true,"blog":{"description":"子在川上曰：“逝者如斯夫，不舍昼夜。","intro":"/intro.html","medias":{"GitHub":"https://github.com/cuckoocry/vuepress-theme-hope.git"}},"locales":{"/":{"lang":"zh-CN","navbarLocales":{"langName":"简体中文","selectLangAriaLabel":"选择语言"},"metaLocales":{"author":"作者","date":"写作日期","origin":"原创","views":"访问量","category":"分类","tag":"标签","readingTime":"阅读时间","words":"字数","toc":"此页内容","prev":"上一页","next":"下一页","lastUpdated":"上次编辑于","contributors":"贡献者","editLink":"在 GitHub 上编辑此页","print":"打印"},"blogLocales":{"article":"文章","articleList":"文章列表","category":"分类","tag":"标签","timeline":"时间轴","timelineTitle":"昨日不在","all":"全部","intro":"个人介绍","star":"星标","empty":"$text 为空"},"paginationLocales":{"prev":"上一页","next":"下一页","navigate":"跳转到","action":"前往","errorText":"请输入 1 到 $page 之前的页码！"},"outlookLocales":{"themeColor":"主题色","darkmode":"外观","fullscreen":"全屏"},"encryptLocales":{"iconLabel":"文章已加密","placeholder":"输入密码","remember":"记住密码","errorHint":"请输入正确的密码"},"routeLocales":{"skipToContent":"跳至主要內容","notFoundTitle":"页面不存在","notFoundMsg":["这里什么也没有","我们是怎么来到这儿的？","这 是 四 零 四 !","看起来你访问了一个失效的链接"],"back":"返回上一页","home":"带我回家","openInNewWindow":"Open in new window"},"navbar":[{"text":"首页","icon":"home","link":"/"},{"text":"学习笔记","icon":"wand-magic-sparkles","link":"/study-notes/"},{"text":"面试指南","icon":"pen-to-square","link":"/interview-related/"},{"text":"杂记","icon":"eye","link":"/problem-record/"},{"text":"笔记总结","icon":"eye","link":"/note-record/"},{"text":"web3系列","icon":"fire","link":"/web3/"},{"text":"Vue系列","icon":"fire","link":"/vue/"},{"text":"博客相关","icon":"blog","link":"/about-the-blogs/"}],"sidebar":{"/study-notes/":[{"text":"大厂面试第二季","prefix":"shangguigu-second/","collapsible":true,"children":[{"text":"1、Volatile","prefix":"volatile/","collapsible":true,"children":["one","two","three","four"]},"CAS/","ABA/","ArrayList/",{"text":"5、Java的锁","collapsible":true,"prefix":"lock/","children":[{"text":"Java锁之读写锁","icon":"edit","link":"one"},"two","three","four","five","six"]},{"text":"6、CountDownLatch","collapsible":true,"prefix":"CountDownLatch_CyclicBarrier_Semaphore/","children":["countDownLatch","CyclicBarrier","Semaphore"]},"BlockingQueue/","Synchronized-Lock/","ThreadPool/","SiSuo/",{"text":"12、JVM","icon":"edit","collapsible":true,"prefix":"JVM/","children":["one","two","three","four","five","six"]},"Linux/","github/"]},{"text":"大厂面试第三季","prefix":"shangguigu-three/","collapsible":true,"children":["","one","two","ReentrantLock/","LockSupport/","WaitNotify/","await-signal","AQS/","Spring/","Redis/","UUID/"]},{"text":"黑马Java八股","prefix":"heima-java-bagu/","collapsible":true,"children":["",{"text":"redis","prefix":"Redis/","collapsible":true,"children":["","more"]},{"text":"MySQL","prefix":"MySQL/","collapsible":true,"children":["","more"]},{"text":"框架","prefix":"frame/","collapsible":true,"children":["","spring/","mybatis/"]},{"text":"微服务","link":"Microservices/"},{"text":"消息中间件","prefix":"message-middleware/","collapsible":true,"children":["","more.md"]},{"text":"集合","prefix":"collection/","collapsible":true,"children":["","more"]},{"text":"并发编程","prefix":"concurrent-programming/","collapsible":true,"children":["","more"]},{"text":"JVM虚拟机","prefix":"JVM/","collapsible":true,"children":[""]},{"text":"实际场景","prefix":"enterprise-scenarios/","collapsible":true,"children":["design-patterns.md","technical-scenarios.md"]}]},{"text":"黑马面试宝典","prefix":"heima-baodian/","collapsible":true,"children":["",{"text":"基础","link":"base/"},{"text":"并发","link":"concurrency/"},{"text":"虚拟机","link":"jvm/"},{"text":"框架","link":"framework/"}]},{"text":"JVM","prefix":"JVM/","collapsible":true,"children":["",{"text":"内存与垃圾回收篇","prefix":"Memory-GC/","collapsible":true,"children":["","Java-Architecture/","Clas-Loading-Subsystem/","JVM-RuntimeDataAreas/","PCounter-Register/","JVM-Stack/","Native-Stack/","Heap/","Method-Area/","Object-Instantiation/","Direct-Memory/","Execution-Engine/","StringTable/","GC-Overview/","GC-Relevant-Algorithms/","GC-Relevant-Overview/","GC-Period/"]},{"text":"字节码与类的加载篇","icon":"edit","prefix":"Bytecode-ClassLoading/","collapsible":true,"children":["","Class-File-Structure/","Bytecode-Instruction-Set/","Class-Lifecycle/","Class-Lifecycle2/"]},{"text":"性能监控与调优篇","icon":"edit","prefix":"Performance-Monitoring-Tuning/","collapsible":true,"children":["JVM-Overview/","JVM-Monitoring-Diagnostic-Tools/","JVM-Monitoring-Diagnostic-Tools-GUI/","JVM-Runtime-Parameters/","GC-Log/","OQL/","Heap-Memory-Leak/"]}]},{"text":"计算机网络","prefix":"Internet/","collapsible":true,"children":["","one/","https-http/","TCP/","four/","five/","http-state/"]},{"text":"SpringBoot","prefix":"spring-boot/","collapsible":true,"children":[""]},{"text":"SpringCloud","prefix":"SpringCloud/","collapsible":true,"children":["","1_SpringCloud是什么/","2_搭建一个SpringCloud项目/","3_搭建Eureka集群/","4_Eureka停更后的替换/","5_Ribbon负载均衡/","6_OpenFeign实现服务调用/","7_Hystrix中的服务降级和熔断/","8_服务网关Gateway/","9_分布式配置中心SpringCloudConfig/","10_消息总线Bus/","11_消息驱动SpringCloudStream/","12_SpringCloudSleuth分布式请求链路跟踪/","13_Nacos是什么/","14_SpringCloudAlibabaSentinel实现熔断和限流/","15_SpringCloudAlibabaSeata处理分布式事务/"]},{"text":"RocketMQ","prefix":"RocketMQ/","collapsible":true,"children":[""]},{"text":"Redis","link":"Redis/"}],"/about-the-blogs/":[{"text":"介绍","icon":"about","link":"readme.md","collapsable":false},{"text":"关于博客","icon":"book","link":"about-blogs","collapsable":false},{"text":"关于学习","icon":"book","link":"about-learn","collapsable":false},{"text":"更新历史","icon":"history","link":"/timeline/"}],"/post/":"structure","/interview-related/":"structure","/web3/":"structure","/problem-record/":"structure","/note-record/":"structure"}}}}')},38123:(s,i,n)=>{n.d(i,{v:()=>a});const a={"/post/":[],"/interview-related/":["","javase","collection","java-thread","jvm","spring","mysql","redis","mybatis","network","rocketMQ"],"/web3/":[""],"/problem-record/":["interview-transcripts","idea-tool","github-tips","idea-template","redission","miscellaneous-notes","merge-pdf","delete-more-iif","tool","HTTPInputStreamExample"],"/note-record/":["","note"]}},32878:(s,i,n)=>{n.d(i,{P:()=>a});const a={GitHub:'<svg xmlns="http://www.w3.org/2000/svg" class="icon github-icon" viewBox="0 0 1024 1024"><circle cx="512" cy="512" r="512" fill="#171515"/><path fill="#fff" d="M509.423 146.442c-200.317 0-362.756 162.42-362.756 362.8 0 160.266 103.936 296.24 248.109 344.217 18.139 3.327 24.76-7.872 24.76-17.486 0-8.613-.313-31.427-.49-61.702-100.912 21.923-122.205-48.63-122.205-48.63-16.495-41.91-40.28-53.067-40.28-53.067-32.937-22.51 2.492-22.053 2.492-22.053 36.407 2.566 55.568 37.386 55.568 37.386 32.362 55.438 84.907 39.43 105.58 30.143 3.296-23.444 12.667-39.43 23.032-48.498-80.557-9.156-165.246-40.28-165.246-179.297 0-39.604 14.135-71.988 37.342-97.348-3.731-9.178-16.18-46.063 3.556-96.009 0 0 30.46-9.754 99.76 37.19 28.937-8.048 59.97-12.071 90.823-12.211 30.807.14 61.843 4.165 90.822 12.21 69.26-46.944 99.663-37.189 99.663-37.189 19.792 49.946 7.34 86.831 3.61 96.01 23.25 25.359 37.29 57.742 37.29 97.347 0 139.366-84.82 170.033-165.637 179.013 13.026 11.2 24.628 33.342 24.628 67.182 0 48.498-.445 87.627-.445 99.521 0 9.702 6.535 20.988 24.945 17.444 144.03-48.067 247.881-183.95 247.881-344.175 0-200.378-162.442-362.798-362.802-362.798z"/></svg>'}}},s=>{s.O(0,[3619,7172],(()=>s(s.s=38731))),s.O()}]);