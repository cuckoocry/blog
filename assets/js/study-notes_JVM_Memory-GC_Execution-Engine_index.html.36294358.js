"use strict";(self.webpackChunkblogs2=self.webpackChunkblogs2||[]).push([[6563],{66262:(a,e)=>{e.A=(a,e)=>{const i=a.__vccOpts||a;for(const[a,l]of e)i[a]=l;return i}},29942:(a,e,i)=>{i.r(e),i.d(e,{comp:()=>k,data:()=>x});var l=i(20641);const t=i.p+"assets/img/image-20200710080707873.f4c69d4d.png",n=i.p+"assets/img/image-20200710081118053.59a6caff.png",p=i.p+"assets/img/image-20200710081259276.f32aec4c.png",s=i.p+"assets/img/image-20200710081627217.0687b954.png",r=i.p+"assets/img/image-20200710082141643.2401330c.png",h=i.p+"assets/img/image-20200710082433146.fafb59d8.png",o=i.p+"assets/img/image-20200710083036258.e2b8770b.png",c=i.p+"assets/img/image-20200710083656277.32c1fef8.png",d=i.p+"assets/img/image-20200710085323733.264eb032.png",g=i.p+"assets/img/image-20200710085553258.5dcdaa8b.png",m=i.p+"assets/img/image-20200710090203674.4115b4a2.png",u=i.p+"assets/img/image-20200710095417462.6b06d365.png",v=i.p+"assets/img/image-20200710101829934.8b317d3a.png",f=i.p+"assets/img/image-20200710103103869.547d0d86.png",J=i.p+"assets/img/image-20200710103340273.76127441.png",b=[(0,l.Fv)('<h2 id="执行引擎概述" tabindex="-1"><a class="header-anchor" href="#执行引擎概述"><span>执行引擎概述</span></a></h2><p>执行引擎属于JVM的下层，里面包括 解释器、及时编译器、垃圾回收器</p><figure><img src="'+t+'" alt="image-20200710080707873" tabindex="0" loading="lazy"><figcaption>image-20200710080707873</figcaption></figure><p>执行引擎是Java虚拟机核心的组成部分之一。“虚拟机”是一个相对于“物理机”的概念，这两种机器都有代码执行能力，其区别是物理机的执行引擎是直接建立在处理器、缓存、指令集和操作系统层面上的，而虚拟机的执行引擎则是由软件自行实现的，因此可以不受物理条件制约地定制指令集与执行引擎的结构体系，能够执行那些不被硬件直接支持的指令集格式。</p><p>JVM的主要任务是负责装载字节码到其内部，但字节码并不能够直接运行在操作系统之上，因为字节码指令并非等价于本地机器指令，它内部包含的仅仅只是一些能够被JVM所识别的字节码指令、符号表，以及其他辅助信息。</p><figure><img src="'+n+'" alt="image-20200710081118053" tabindex="0" loading="lazy"><figcaption>image-20200710081118053</figcaption></figure><p>那么，如果想要让一个Java程序运行起来，执行引擎（Execution Engine）的任务就是将字节码指令解释/编译为对应平台上的本地机器指令才可以。简单来说，JVM中的执行引擎充当了将高级语言翻译为机器语言的译者。</p><figure><img src="'+p+'" alt="image-20200710081259276" tabindex="0" loading="lazy"><figcaption>image-20200710081259276</figcaption></figure><h3 id="执行引擎的工作流程" tabindex="-1"><a class="header-anchor" href="#执行引擎的工作流程"><span>执行引擎的工作流程</span></a></h3><ul><li>执行引擎在执行的过程中究竟需要执行什么样的字节码指令完全依赖于PC寄存器。</li><li>每当执行完一项指令操作后，PC寄存器就会更新下一条需要被执行的指令地址。</li><li>当然方法在执行的过程中，执行引擎有可能会通过存储在局部变量表中的对象引用准确定位到存储在Java堆区中的对象实例信息，以及通过对象头中的元数据指针定位到目标对象的类型信息。</li></ul><figure><img src="'+s+'" alt="image-20200710081627217" tabindex="0" loading="lazy"><figcaption>image-20200710081627217</figcaption></figure><p>从外观上来看，所有的Java虚拟机的执行引擎输入，输出都是一致的：输入的是字节码二进制流，处理过程是字节码解析执行的等效过程，输出的是执行过程。</p><h2 id="java代码编译和执行过程" tabindex="-1"><a class="header-anchor" href="#java代码编译和执行过程"><span>Java代码编译和执行过程</span></a></h2><p>大部分的程序代码转换成物理机的目标代码或虚拟机能执行的指令集之前，都需要经过上图中的各个步骤</p><ul><li>前面橙色部分是生成字节码文件的过程，和JVM无关</li><li>后面蓝色和绿色才是JVM需要考虑的过程</li></ul><figure><img src="'+r+'" alt="image-20200710082141643" tabindex="0" loading="lazy"><figcaption>image-20200710082141643</figcaption></figure><p>Java代码编译是由Java源码编译器来完成，流程图如下所示：</p><figure><img src="'+h+'" alt="image-20200710082433146" tabindex="0" loading="lazy"><figcaption>image-20200710082433146</figcaption></figure><p>Java字节码的执行是由JVM执行引擎来完成，流程图 如下所示</p><figure><img src="'+o+'" alt="image-20200710083036258" tabindex="0" loading="lazy"><figcaption>image-20200710083036258</figcaption></figure><p>我们用一个总的图，来说说 解释器和编译器</p><figure><img src="'+c+'" alt="image-20200710083656277" tabindex="0" loading="lazy"><figcaption>image-20200710083656277</figcaption></figure><h3 id="什么是解释器-interpreter" tabindex="-1"><a class="header-anchor" href="#什么是解释器-interpreter"><span>什么是解释器（Interpreter）</span></a></h3><p>当Java虚拟机启动时会根据预定义的规范对字节码采用逐行解释的方式执行，将每条字节码文件中的内容“翻译”为对应平台的本地机器指令执行。</p><h3 id="什么是it编译器" tabindex="-1"><a class="header-anchor" href="#什么是it编译器"><span>什么是IT编译器</span></a></h3><p>JIT（Just In Time Compiler）编译器：就是虚拟机将源代码直接编译成和本地机器平台相关的机器语言。</p><h3 id="为什么java是半编译半解释型语言" tabindex="-1"><a class="header-anchor" href="#为什么java是半编译半解释型语言"><span>为什么Java是半编译半解释型语言</span></a></h3><p>JDK1.e时代，将Java语言定位为“解释执行”还是比较准确的。再后来，Java也发展出可以直接生成本地代码的编译器。现在JVM在执行Java代码的时候，通常都会将解释执行与编译执行二者结合起来进行。</p><p>翻译成本地代码后，就可以做一个缓存操作，存储在方法区中</p><h2 id="机器码、指令、汇编语言" tabindex="-1"><a class="header-anchor" href="#机器码、指令、汇编语言"><span>机器码、指令、汇编语言</span></a></h2><h3 id="机器码" tabindex="-1"><a class="header-anchor" href="#机器码"><span>机器码</span></a></h3><p>各种用二进制编码方式表示的指令，叫做机器指令码。开始，人们就用它采编写程序，这就是机器语言。</p><p>机器语言虽然能够被计算机理解和接受，但和人们的语言差别太大，不易被人们理解和记忆，并且用它编程容易出差错。</p><p>用它编写的程序一经输入计算机，CPU直接读取运行，因此和其他语言编的程序相比，执行速度最快。</p><p>机器指令与CPU紧密相关，所以不同种类的CPU所对应的机器指令也就不同。</p><h3 id="指令" tabindex="-1"><a class="header-anchor" href="#指令"><span>指令</span></a></h3><p>由于机器码是有0和1组成的二进制序列，可读性实在太差，于是人们发明了指令。</p><p>指令就是把机器码中特定的0和1序列，简化成对应的指令（一般为英文简写，如mov，inc等），可读性稍好</p><p>由于不同的硬件平台，执行同一个操作，对应的机器码可能不同，所以不同的硬件平台的同一种指令（比如mov），对应的机器码也可能不同。</p><h3 id="指令集" tabindex="-1"><a class="header-anchor" href="#指令集"><span>指令集</span></a></h3><p>不同的硬件平台，各自支持的指令，是有差别的。因此每个平台所支持的指令，称之为对应平台的指令集。 如常见的</p><ul><li>x86指令集，对应的是x86架构的平台</li><li>ARM指令集，对应的是ARM架构的平台</li></ul><h3 id="汇编语言" tabindex="-1"><a class="header-anchor" href="#汇编语言"><span>汇编语言</span></a></h3><p>由于指令的可读性还是太差，于是人们又发明了汇编语言。</p><p>在汇编语言中，用助记符（Mnemonics）代替机器指令的操作码，用地址符号（Symbo1）或标号（Labe1）代替指令或操作数的地址。在不同的硬件平台，汇编语言对应着不同的机器语言指令集，通过汇编过程转换成机器指令。</p><blockquote><p>由于计算机只认识指令码，所以用汇编语言编写的程序还必须翻译成机器指令码，计算机才能识别和执行。</p></blockquote><h3 id="高级语言" tabindex="-1"><a class="header-anchor" href="#高级语言"><span>高级语言</span></a></h3><p>为了使计算机用户编程序更容易些，后来就出现了各种高级计算机语言。</p><p>高级语言比机器语言、汇编语言更接近人的语言当计算机执行高级语言编写的程序时，仍然需要把程序解释和编译成机器的指令码。完成这个过程的程序就叫做解释程序或编译程序。</p><figure><img src="'+d+'" alt="image-20200710085323733" tabindex="0" loading="lazy"><figcaption>image-20200710085323733</figcaption></figure><p>高级语言也不是直接翻译成 机器指令，而是翻译成汇编语言吗，如下面说的C和C++</p><h3 id="c、c-源程序执行过程" tabindex="-1"><a class="header-anchor" href="#c、c-源程序执行过程"><span>C、C++源程序执行过程</span></a></h3><p>编译过程又可以分成两个阶段：编译和汇编。</p><p>编译过程：是读取源程序（字符流），对之进行词法和语法的分析，将高级语言指令转换为功能等效的汇编代码</p><p>汇编过程：实际上指把汇编语言代码翻译成目标机器指令的过程。</p><figure><img src="'+g+'" alt="image-20200710085553258" tabindex="0" loading="lazy"><figcaption>image-20200710085553258</figcaption></figure><h3 id="字节码" tabindex="-1"><a class="header-anchor" href="#字节码"><span>字节码</span></a></h3><p>字节码是一种中间状态（中间码）的二进制代码（文件），它比机器码更抽象，需要直译器转译后才能成为机器码</p><p>字节码主要为了实现特定软件运行和软件环境、与硬件环境无关。</p><p>字节码的实现方式是通过编译器和虚拟机器。编译器将源码编译成字节码，特定平台上的虚拟机器将字节码转译为可以直接执行的指令。</p><ul><li>字节码典型的应用为：Java bytecode</li></ul><h2 id="解释器" tabindex="-1"><a class="header-anchor" href="#解释器"><span>解释器</span></a></h2><p>JVM设计者们的初衷仅仅只是单纯地为了满足Java程序实现跨平台特性，因此避免采用静态编译的方式直接生成本地机器指令，从而诞生了实现解释器在运行时采用逐行解释字节码执行程序的想法。</p><figure><img src="'+m+'" alt="image-20200710090203674" tabindex="0" loading="lazy"><figcaption>image-20200710090203674</figcaption></figure><p>为什么Java源文件不直接翻译成JMV，而是翻译成字节码文件？可能是因为直接翻译的代码是比较大的</p><p>解释器真正意义上所承担的角色就是一个运行时“翻译者”，将字节码文件中的内容“翻译”为对应平台的本地机器指令执行。</p><p>当一条字节码指令被解释执行完成后，接着再根据PC寄存器中记录的下一条需要被执行的字节码指令执行解释操作。</p><h3 id="解释器分类" tabindex="-1"><a class="header-anchor" href="#解释器分类"><span>解释器分类</span></a></h3><p>在Java的发展历史里，一共有两套解释执行器，即古老的字节码解释器、现在普遍使用的模板解释器。</p><p>字节码解释器在执行时通过纯软件代码模拟字节码的执行，效率非常低下。</p><p>而模板解释器将每一条字节码和一个模板函数相关联，模板函数中直接产生这条字节码执行时的机器码，从而很大程度上提高了解释器的性能。</p><p>在HotSpot VM中，解释器主要由Interpreter模块和Code模块构成。</p><ul><li>Interpreter模块：实现了解释器的核心功能</li><li>Code模块：用于管理HotSpot VM在运行时生成的本地机器指令</li></ul><h3 id="现状" tabindex="-1"><a class="header-anchor" href="#现状"><span>现状</span></a></h3><p>由于解释器在设计和实现上非常简单，因此除了Java语言之外，还有许多高级语言同样也是基于解释器执行的，比如Python、Per1、Ruby等。但是在今天，基于解释器执行已经沦落为低效的代名词，并且时常被一些C/C++程序员所调侃。</p><p>为了解决这个问题，JVM平台支持一种叫作即时编译的技术。即时编译的目的是避免函数被解释执行，而是将整个函数体编译成为机器码，每次函数执行时，只执行编译后的机器码即可，这种方式可以使执行效率大幅度提升。</p><p>不过无论如何，基于解释器的执行模式仍然为中间语言的发展做出了不可磨灭的贡献。</p><h2 id="jit编译器" tabindex="-1"><a class="header-anchor" href="#jit编译器"><span>JIT编译器</span></a></h2><h3 id="java代码的执行分类" tabindex="-1"><a class="header-anchor" href="#java代码的执行分类"><span>Java代码的执行分类</span></a></h3><p>第一种是将源代码编译成字节码文件，然后在运行时通过解释器将字节码文件转为机器码执行</p><p>第二种是编译执行（直接编译成机器码）。现代虚拟机为了提高执行效率，会使用即时编译技术（JIT，Just In Time）将方法编译成机器码后再执行</p><p>HotSpot VM是目前市面上高性能虚拟机的代表作之一。它采用解释器与即时编译器并存的架构。在Java虚拟机运行时，解释器和即时编译器能够相互协作，各自取长补短，尽力去选择最合适的方式来权衡编译本地代码的时间和直接解释执行代码的时间。</p><p>在今天，Java程序的运行性能早已脱胎换骨，已经达到了可以和C/C++ 程序一较高下的地步。</p><h3 id="问题来了" tabindex="-1"><a class="header-anchor" href="#问题来了"><span>问题来了</span></a></h3><p>有些开发人员会感觉到诧异，既然HotSpot VM中已经内置JIT编译器了，那么为什么还需要再使用解释器来“拖累”程序的执行性能呢？比如JRockit VM内部就不包含解释器，字节码全部都依靠即时编译器编译后执行。</p><ul><li>JRockit虚拟机是砍掉了解释器，也就是只采及时编译器。那是因为呢JRockit只部署在服务器上，一般已经有时间让他进行指令编译的过程了，对于响应来说要求不高，等及时编译器的编译完成后，就会提供更好的性能</li></ul><p>首先明确： 当程序启动后，解释器可以马上发挥作用，省去编译的时间，立即执行。 编译器要想发挥作用，把代码编译成本地代码，需要一定的执行时间。但编译为本地代码后，执行效率高。</p><p>所以： 尽管JRockit VM中程序的执行性能会非常高效，但程序在启动时必然需要花费更长的时间来进行编译。对于服务端应用来说，启动时间并非是关注重点，但对于那些看中启动时间的应用场景而言，或许就需要采用解释器与即时编译器并存的架构来换取一个平衡点。</p><p>在此模式下，当Java虚拟器启动时，解释器可以首先发挥作用，而不必等待即时编译器全部编译完成后再执行，这样可以省去许多不必要的编译时间。随着时间的推移，编译器发挥作用，把越来越多的代码编译成本地代码，获得更高的执行效率。</p><p>同时，解释执行在编译器进行激进优化不成立的时候，作为编译器的“逃生门”。</p><h3 id="hotspot-jvm执行方式" tabindex="-1"><a class="header-anchor" href="#hotspot-jvm执行方式"><span>HotSpot JVM执行方式</span></a></h3><p>当虚拟机启动的时候，解释器可以首先发挥作用，而不必等待即时编译器全部编译完成再执行，这样可以省去许多不必要的编译时间。并且随着程序运行时间的推移，即时编译器逐渐发挥作用，根据热点探测功能，将有价值的字节码编译为本地机器指令，以换取更高的程序执行效率。</p><h3 id="案例" tabindex="-1"><a class="header-anchor" href="#案例"><span>案例</span></a></h3><p>注意解释执行与编译执行在线上环境微妙的辩证关系。机器在热机状态可以承受的负载要大于冷机状态。如果以热机状态时的流量进行切流，可能使处于冷机状态的服务器因无法承载流量而假死。</p><p>在生产环境发布过程中，以分批的方式进行发布，根据机器数量划分成多个批次，每个批次的机器数至多占到整个集群的1/8。曾经有这样的故障案例：某程序员在发布平台进行分批发布，在输入发布总批数时，误填写成分为两批发布。如果是热机状态，在正常情况下一半的机器可以勉强承载流量，但由于刚启动的JVM均是解释执行，还没有进行热点代码统计和JIT动态编译，导致机器启动之后，当前1/2发布成功的服务器马上全部宕机，此故障说明了JIT的存在。—阿里团队</p><figure><img src="'+u+'" alt="image-20200710095417462" tabindex="0" loading="lazy"><figcaption>image-20200710095417462</figcaption></figure><h3 id="概念解释" tabindex="-1"><a class="header-anchor" href="#概念解释"><span>概念解释</span></a></h3><ul><li>Java 语言的“编译期”其实是一段“不确定”的操作过程，因为它可能是指一个前端编译器（其实叫“编译器的前端”更准确一些）把.java文件转变成.class文件的过程；也可能是指虚拟机的后端运行期编译器（JIT编译器，Just In Time Compiler）</li><li>把字节码转变成机器码的过程。</li><li>还可能是指使用静态提前编译器（AOT编译器，Ahead of Time Compiler）直接把.java文件编译成本地机器代码的过程。</li></ul><p>前端编译器：Sun的Javac、Eclipse JDT中的增量式编译器（ECJ）。</p><p>JIT编译器：HotSpot VM的C1、C2编译器。</p><p>AOT 编译器：GNU Compiler for the Java（GCJ）、Excelsior JET。</p><h3 id="热点探测技术" tabindex="-1"><a class="header-anchor" href="#热点探测技术"><span>热点探测技术</span></a></h3><p>一个被多次调用的方法，或者是一个方法体内部循环次数较多的循环体都可以被称之为“热点代码”，因此都可以通过JIT编译器编译为本地机器指令。由于这种编译方式发生在方法的执行过程中，因此被称之为栈上替换，或简称为OSR（On Stack Replacement）编译。</p><p>一个方法究竟要被调用多少次，或者一个循环体究竟需要执行多少次循环才可以达到这个标准？必然需要一个明确的阈值，JIT编译器才会将这些“热点代码”编译为本地机器指令执行。这里主要依靠热点探测功能。</p><p>目前HotSpot VM所采用的热点探测方式是基于计数器的热点探测。</p><p>采用基于计数器的热点探测，HotSpot V将会为每一个方法都建立2个不同类型的计数器，分别为方法调用计数器（Invocation Counter）和回边计数器（Back Edge Counter）。</p><ul><li>方法调用计数器用于统计方法的调用次数</li><li>回边计数器则用于统计循环体执行的循环次数</li></ul><h3 id="方法调用计数器" tabindex="-1"><a class="header-anchor" href="#方法调用计数器"><span>方法调用计数器</span></a></h3><p>这个计数器就用于统计方法被调用的次数，它的默认阀值在Client模式下是1500次，在Server模式下是10000次。超过这个阈值，就会触发JIT编译。</p><p>这个阀值可以通过虚拟机参数 -XX:CompileThreshold 来人为设定。</p><p>当一个方法被调用时，会先检查该方法是否存在被JIT编译过的版本，如果存在，则优先使用编译后的本地代码来执行。如果不存在已被编译过的版本，则将此方法的调用计数器值加1，然后判断方法调用计数器与回边计数器值之和是否超过方法调用计数器的阀值。如果已超过阈值，那么将会向即时编译器提交一个该方法的代码编译请求。</p><figure><img src="'+v+'" alt="image-20200710101829934" tabindex="0" loading="lazy"><figcaption>image-20200710101829934</figcaption></figure><h3 id="热点衰减" tabindex="-1"><a class="header-anchor" href="#热点衰减"><span>热点衰减</span></a></h3><p>如果不做任何设置，方法调用计数器统计的并不是方法被调用的绝对次数，而是一个相对的执行频率，即一段时间之内方法被调用的次数。当超过一定的时间限度，如果方法的调用次数仍然不足以让它提交给即时编译器编译，那这个方法的调用计数器就会被减少一半，这个过程称为方法调用计数器热度的衰减（Counter Decay），而这段时间就称为此方法统计的半衰周期（Counter Half Life Time）</p><ul><li>半衰周期是化学中的概念，比如出土的文物通过查看C60来获得文物的年龄</li></ul><p>进行热度衰减的动作是在虚拟机进行垃圾收集时顺便进行的，可以使用虚拟机参数 -XX:-UseCounterDecay 来关闭热度衰减，让方法计数器统计方法调用的绝对次数，这样，只要系统运行时间足够长，绝大部分方法都会被编译成本地代码。</p><p>另外，可以使用-XX:CounterHalfLifeTime参数设置半衰周期的时间，单位是秒。</p><h3 id="回边计数器" tabindex="-1"><a class="header-anchor" href="#回边计数器"><span>回边计数器</span></a></h3><p>它的作用是统计一个方法中循环体代码执行的次数，在字节码中遇到控制流向后跳转的指令称为“回边”（Back Edge）。显然，建立回边计数器统计的目的就是为了触发OSR编译。</p><figure><img src="'+f+'" alt="image-20200710103103869" tabindex="0" loading="lazy"><figcaption>image-20200710103103869</figcaption></figure><h3 id="hotspotvm-可以设置程序执行方法" tabindex="-1"><a class="header-anchor" href="#hotspotvm-可以设置程序执行方法"><span>HotSpotVM 可以设置程序执行方法</span></a></h3><p>缺省情况下HotSpot VM是采用解释器与即时编译器并存的架构，当然开发人员可以根据具体的应用场景，通过命令显式地为Java虚拟机指定在运行时到底是完全采用解释器执行，还是完全采用即时编译器执行。如下所示：</p><ul><li>-Xint：完全采用解释器模式执行程序；</li><li>-Xcomp：完全采用即时编译器模式执行程序。如果即时编译出现问题，解释器会介入执行</li><li>-Xmixed：采用解释器+即时编译器的混合模式共同执行程序。</li></ul><figure><img src="'+J+'" alt="image-20200710103340273" tabindex="0" loading="lazy"><figcaption>image-20200710103340273</figcaption></figure><h3 id="hotspotvm中-jit-分类" tabindex="-1"><a class="header-anchor" href="#hotspotvm中-jit-分类"><span>HotSpotVM中 JIT 分类</span></a></h3><p>JIT的编译器还分为了两种，分别是C1和C2，在HotSpot VM中内嵌有两个JIT编译器，分别为Client Compiler和Server Compiler，但大多数情况下我们简称为C1编译器 和 C2编译器。开发人员可以通过如下命令显式指定Java虚拟机在运行时到底使用哪一种即时编译器，如下所示：</p><ul><li><p>-client：指定Java虚拟机运行在Client模式下，并使用C1编译器；</p><ul><li>C1编译器会对字节码进行简单和可靠的优化，耗时短。以达到更快的编译速度。</li></ul></li><li><p>-server：指定Java虚拟机运行在server模式下，并使用C2编译器。</p><ul><li>C2进行耗时较长的优化，以及激进优化。但优化的代码执行效率更高。（使用C++）</li></ul></li></ul><h3 id="c1-和-c2编译器不同的优化策略" tabindex="-1"><a class="header-anchor" href="#c1-和-c2编译器不同的优化策略"><span>C1 和 C2编译器不同的优化策略</span></a></h3><p>在不同的编译器上有不同的优化策略，C1编译器上主要有方法内联，去虚拟化、元余消除。</p><ul><li>方法内联：将引用的函数代码编译到引用点处，这样可以减少栈帧的生成，减少参数传递以及跳转过程</li><li>去虚拟化：对唯一的实现樊进行内联</li><li>冗余消除：在运行期间把一些不会执行的代码折叠掉</li></ul><p>C2的优化主要是在全局层面，逃逸分析是优化的基础。基于逃逸分析在C2上有如下几种优化：</p><ul><li>标量替换：用标量值代替聚合对象的属性值</li><li>栈上分配：对于未逃逸的对象分配对象在栈而不是堆</li><li>同步消除：清除同步操作，通常指synchronized</li></ul><h3 id="分层编译策略" tabindex="-1"><a class="header-anchor" href="#分层编译策略"><span>分层编译策略</span></a></h3><p>分层编译（Tiered Compilation）策略：程序解释执行（不开启性能监控）可以触发C1编译，将字节码编译成机器码，可以进行简单优化，也可以加上性能监控，C2编译会根据性能监控信息进行激进优化。</p><p>不过在Java7版本之后，一旦开发人员在程序中显式指定命令“-server&quot;时，默认将会开启分层编译策略，由C1编译器和C2编译器相互协作共同来执行编译任务。</p><h3 id="总结" tabindex="-1"><a class="header-anchor" href="#总结"><span>总结</span></a></h3><ul><li>一般来讲，JIT编译出来的机器码性能比解释器搞</li><li>C2编译器启动时长比C1慢，系统稳定执行以后，C2编译器执行速度远快于C1编译器</li></ul><h3 id="aot编译器" tabindex="-1"><a class="header-anchor" href="#aot编译器"><span>AOT编译器</span></a></h3><p>jdk9引入了AoT编译器（静态提前编译器，Ahead of Time Compiler）</p><p>Java 9引入了实验性AOT编译工具aotc。它借助了Graal编译器，将所输入的Java类文件转换为机器码，并存放至生成的动态共享库之中。</p><p>所谓AOT编译，是与即时编译相对立的一个概念。我们知道，即时编译指的是在程序的运行过程中，将字节码转换为可在硬件上直接运行的机器码，并部署至托管环境中的过程。而AOT编译指的则是，在程序运行之前，便将字节码转换为机器码的过程。</p><div class="language- line-numbers-mode" data-highlighter="shiki" data-ext="" data-title="" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span>.java -&gt; .class -&gt; (使用jaotc) -&gt; .so</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><p>最大的好处：Java虚拟机加载已经预编译成二进制库，可以直接执行。不必等待及时编译器的预热，减少Java应用给人带来“第一次运行慢” 的不良体验</p><p>缺点：</p><ul><li>破坏了 java “ 一次编译，到处运行”，必须为每个不同的硬件，OS编译对应的发行包</li><li>降低了Java链接过程的动态性，加载的代码在编译器就必须全部已知。</li><li>还需要继续优化中，最初只支持Linux X64 java base</li></ul><h3 id="写到最后" tabindex="-1"><a class="header-anchor" href="#写到最后"><span>写到最后</span></a></h3><ul><li>自JDK10起，HotSpot又加入了一个全新的及时编译器：Graal编译器</li><li>编译效果短短几年时间就追评了G2编译器，未来可期</li><li>目前，带着实验状态标签，需要使用开关参数去激活才能使用</li></ul><div class="language- line-numbers-mode" data-highlighter="shiki" data-ext="" data-title="" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span>-XX:+UnlockExperimentalvMOptions -XX:+UseJVMCICompiler</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><h3 id="" tabindex="-1"><a class="header-anchor" href="#"><span></span></a></h3>',149)],C={},k=(0,i(66262).A)(C,[["render",function(a,e){return(0,l.uX)(),(0,l.CE)("div",null,b)}]]),x=JSON.parse('{"path":"/study-notes/JVM/Memory-GC/Execution-Engine/","title":"执行引擎","lang":"zh-CN","frontmatter":{"title":"执行引擎","date":"2023-03-18T00:00:00.000Z","description":"执行引擎概述 执行引擎属于JVM的下层，里面包括 解释器、及时编译器、垃圾回收器 image-20200710080707873image-20200710080707873 执行引擎是Java虚拟机核心的组成部分之一。“虚拟机”是一个相对于“物理机”的概念，这两种机器都有代码执行能力，其区别是物理机的执行引擎是直接建立在处理器、缓存、指令集和操作系统...","head":[["meta",{"property":"og:url","content":"https://mister-hope.github.io/study-notes/JVM/Memory-GC/Execution-Engine/"}],["meta",{"property":"og:site_name","content":"撄宁的博客"}],["meta",{"property":"og:title","content":"执行引擎"}],["meta",{"property":"og:description","content":"执行引擎概述 执行引擎属于JVM的下层，里面包括 解释器、及时编译器、垃圾回收器 image-20200710080707873image-20200710080707873 执行引擎是Java虚拟机核心的组成部分之一。“虚拟机”是一个相对于“物理机”的概念，这两种机器都有代码执行能力，其区别是物理机的执行引擎是直接建立在处理器、缓存、指令集和操作系统..."}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:locale","content":"zh-CN"}],["meta",{"property":"og:updated_time","content":"2024-08-11T14:34:32.000Z"}],["meta",{"property":"article:author","content":"樱宁"}],["meta",{"property":"article:published_time","content":"2023-03-18T00:00:00.000Z"}],["meta",{"property":"article:modified_time","content":"2024-08-11T14:34:32.000Z"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"执行引擎\\",\\"image\\":[\\"\\"],\\"datePublished\\":\\"2023-03-18T00:00:00.000Z\\",\\"dateModified\\":\\"2024-08-11T14:34:32.000Z\\",\\"author\\":[{\\"@type\\":\\"Person\\",\\"name\\":\\"樱宁\\",\\"url\\":\\"https://mister-hope.com\\"}]}"]]},"headers":[{"level":2,"title":"执行引擎概述","slug":"执行引擎概述","link":"#执行引擎概述","children":[{"level":3,"title":"执行引擎的工作流程","slug":"执行引擎的工作流程","link":"#执行引擎的工作流程","children":[]}]},{"level":2,"title":"Java代码编译和执行过程","slug":"java代码编译和执行过程","link":"#java代码编译和执行过程","children":[{"level":3,"title":"什么是解释器（Interpreter）","slug":"什么是解释器-interpreter","link":"#什么是解释器-interpreter","children":[]},{"level":3,"title":"什么是IT编译器","slug":"什么是it编译器","link":"#什么是it编译器","children":[]},{"level":3,"title":"为什么Java是半编译半解释型语言","slug":"为什么java是半编译半解释型语言","link":"#为什么java是半编译半解释型语言","children":[]}]},{"level":2,"title":"机器码、指令、汇编语言","slug":"机器码、指令、汇编语言","link":"#机器码、指令、汇编语言","children":[{"level":3,"title":"机器码","slug":"机器码","link":"#机器码","children":[]},{"level":3,"title":"指令","slug":"指令","link":"#指令","children":[]},{"level":3,"title":"指令集","slug":"指令集","link":"#指令集","children":[]},{"level":3,"title":"汇编语言","slug":"汇编语言","link":"#汇编语言","children":[]},{"level":3,"title":"高级语言","slug":"高级语言","link":"#高级语言","children":[]},{"level":3,"title":"C、C++源程序执行过程","slug":"c、c-源程序执行过程","link":"#c、c-源程序执行过程","children":[]},{"level":3,"title":"字节码","slug":"字节码","link":"#字节码","children":[]}]},{"level":2,"title":"解释器","slug":"解释器","link":"#解释器","children":[{"level":3,"title":"解释器分类","slug":"解释器分类","link":"#解释器分类","children":[]},{"level":3,"title":"现状","slug":"现状","link":"#现状","children":[]}]},{"level":2,"title":"JIT编译器","slug":"jit编译器","link":"#jit编译器","children":[{"level":3,"title":"Java代码的执行分类","slug":"java代码的执行分类","link":"#java代码的执行分类","children":[]},{"level":3,"title":"问题来了","slug":"问题来了","link":"#问题来了","children":[]},{"level":3,"title":"HotSpot JVM执行方式","slug":"hotspot-jvm执行方式","link":"#hotspot-jvm执行方式","children":[]},{"level":3,"title":"案例","slug":"案例","link":"#案例","children":[]},{"level":3,"title":"概念解释","slug":"概念解释","link":"#概念解释","children":[]},{"level":3,"title":"热点探测技术","slug":"热点探测技术","link":"#热点探测技术","children":[]},{"level":3,"title":"方法调用计数器","slug":"方法调用计数器","link":"#方法调用计数器","children":[]},{"level":3,"title":"热点衰减","slug":"热点衰减","link":"#热点衰减","children":[]},{"level":3,"title":"回边计数器","slug":"回边计数器","link":"#回边计数器","children":[]},{"level":3,"title":"HotSpotVM 可以设置程序执行方法","slug":"hotspotvm-可以设置程序执行方法","link":"#hotspotvm-可以设置程序执行方法","children":[]},{"level":3,"title":"HotSpotVM中 JIT 分类","slug":"hotspotvm中-jit-分类","link":"#hotspotvm中-jit-分类","children":[]},{"level":3,"title":"C1 和 C2编译器不同的优化策略","slug":"c1-和-c2编译器不同的优化策略","link":"#c1-和-c2编译器不同的优化策略","children":[]},{"level":3,"title":"分层编译策略","slug":"分层编译策略","link":"#分层编译策略","children":[]},{"level":3,"title":"总结","slug":"总结","link":"#总结","children":[]},{"level":3,"title":"AOT编译器","slug":"aot编译器","link":"#aot编译器","children":[]},{"level":3,"title":"写到最后","slug":"写到最后","link":"#写到最后","children":[]},{"level":3,"title":"","slug":"","link":"#","children":[]}]}],"git":{"createdTime":1723381883000,"updatedTime":1723386872000,"contributors":[{"name":"jiang","email":"948742327@qq.com","commits":3}]},"readingTime":{"minutes":19.94,"words":5981},"filePathRelative":"study-notes/JVM/Memory-GC/Execution-Engine/README.md","localizedDate":"2023年3月18日","excerpt":"<h2>执行引擎概述</h2>\\n<p>执行引擎属于JVM的下层，里面包括 解释器、及时编译器、垃圾回收器</p>\\n<figure><figcaption>image-20200710080707873</figcaption></figure>\\n<p>执行引擎是Java虚拟机核心的组成部分之一。“虚拟机”是一个相对于“物理机”的概念，这两种机器都有代码执行能力，其区别是物理机的执行引擎是直接建立在处理器、缓存、指令集和操作系统层面上的，而虚拟机的执行引擎则是由软件自行实现的，因此可以不受物理条件制约地定制指令集与执行引擎的结构体系，能够执行那些不被硬件直接支持的指令集格式。</p>\\n<p>JVM的主要任务是负责装载字节码到其内部，但字节码并不能够直接运行在操作系统之上，因为字节码指令并非等价于本地机器指令，它内部包含的仅仅只是一些能够被JVM所识别的字节码指令、符号表，以及其他辅助信息。</p>","autoDesc":true}')}}]);