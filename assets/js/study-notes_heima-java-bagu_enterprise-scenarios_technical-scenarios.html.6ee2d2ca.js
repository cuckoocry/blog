"use strict";(self.webpackChunkblogs2=self.webpackChunkblogs2||[]).push([[6921],{66262:(i,a)=>{a.A=(i,a)=>{const e=i.__vccOpts||i;for(const[i,l]of a)e[i]=l;return e}},30885:(i,a,e)=>{e.r(a),e.d(a,{comp:()=>A,data:()=>z});var l=e(20641);const n=e.p+"assets/img/image-20230521113500488.4860a02c.png",t=e.p+"assets/img/image-20230521113544219.e5bf60b5.png",p=e.p+"assets/img/image-20230521113906521.c2f87acd.png",s=e.p+"assets/img/image-20230521113941467.d58c8d71.png",g=e.p+"assets/img/image-20230521114305463.b53a670b.png",r=e.p+"assets/img/image-20230521114432028.e3aa812e.png",o=e.p+"assets/img/image-20230521124717749.085a001b.png",c=e.p+"assets/img/image-20230521125012727.aed1c8ae.png",d=e.p+"assets/img/image-20230521125136717.ff567e05.png",h=e.p+"assets/img/image-20230521232726959.458b662e.png",u=e.p+"assets/img/image-20230521232913086.282e44e2.png",m=e.p+"assets/img/image-20230521233150276.3e27fb8e.png",f=e.p+"assets/img/image-20230521233220905.fdfa066b.png",b=e.p+"assets/img/image-20230521233554657.2ff112a7.png",_=e.p+"assets/img/image-20230521233600556.8f445709.png",x=e.p+"assets/img/image-20230521233715574.7fca856f.png",k=e.p+"assets/img/image-20230521233926897.1626c0d3.png",y=e.p+"assets/img/image-20230521233934644.8a5a9951.png",v=[(0,l.Fv)('<div class="hint-container tip"><p class="hint-container-title">提示</p><p>视频来源： <a href="https://www.bilibili.com/video/BV1yT411H7YK/?vd_source=7138dfc78c49f602f8d3ed8cfbf0513d" target="_blank" rel="noopener noreferrer">新版Java面试专题视频教程，java八股文面试全套真题+深度详解（含大厂高频面试真题）</a></p></div><h2 id="常见技术场景" tabindex="-1"><a class="header-anchor" href="#常见技术场景"><span>常见技术场景</span></a></h2><h3 id="_1-单点登录这块怎么实现的" tabindex="-1"><a class="header-anchor" href="#_1-单点登录这块怎么实现的"><span>1.单点登录这块怎么实现的</span></a></h3><h4 id="_1-1-概述" tabindex="-1"><a class="header-anchor" href="#_1-1-概述"><span>1.1 概述</span></a></h4><p>单点登录的英文名叫做：Single Sign On（简称<strong>SSO</strong>）,只需要登录一次，就可以访问所有信任的应用系统</p><p>在<strong>以前</strong>的时候，一般我们就<strong>单系统</strong>，所有的功能都在同一个系统上。</p><figure><img src="'+n+'" alt="image-20230521113500488" tabindex="0" loading="lazy"><figcaption>image-20230521113500488</figcaption></figure><p>单体系统的session共享</p><ul><li><p><strong>登录</strong>：将用户信息保存在Session对象中</p></li><li><ul><li>如果在Session对象中能查到，说明已经登录</li><li>如果在Session对象中查不到，说明没登录（或者已经退出了登录）</li></ul></li><li><p><strong>注销（退出登录）</strong>：从Session中删除用户的信息</p></li></ul><p>后来，我们为了<strong>合理利用资源和降低耦合性</strong>，于是把单系统<strong>拆分</strong>成多个子系统。</p><figure><img src="'+t+'" alt="image-20230521113544219" tabindex="0" loading="lazy"><figcaption>image-20230521113544219</figcaption></figure><p>多系统即可能有多个Tomcat，而Session是依赖当前系统的Tomcat，所以系统A的Session和系统B的Session是<strong>不共享</strong>的。</p><p>解决系统之间Session不共享问题有一下几种方案：</p><ul><li>Tomcat集群Session全局复制（最多支持5台tomcat，不推荐使用）</li><li>JWT(常见)</li><li>Oauth2</li><li>CAS</li><li>自己实现（redis+token）</li></ul><h4 id="_1-2-jwt解决单点登录" tabindex="-1"><a class="header-anchor" href="#_1-2-jwt解决单点登录"><span>1.2 JWT解决单点登录</span></a></h4><p>现在有一个微服务的简单架构，如图：</p><figure><img src="'+p+'" alt="image-20230521113906521" tabindex="0" loading="lazy"><figcaption>image-20230521113906521</figcaption></figure><p>使用jwt解决单点登录的流程如下：</p><figure><img src="'+s+'" alt="image-20230521113941467" tabindex="0" loading="lazy"><figcaption>image-20230521113941467</figcaption></figure><h4 id="_1-3-回答要点" tabindex="-1"><a class="header-anchor" href="#_1-3-回答要点"><span>1.3 回答要点</span></a></h4><p>1，先解释什么是单点登录</p><p>单点登录的英文名叫做：Single Sign On（简称<strong>SSO</strong>）</p><p>2，介绍自己项目中涉及到的单点登录（即使没涉及过，也可以说实现的思路）</p><p>3，介绍单点登录的解决方案，以JWT为例</p><p>​ I. 用户访问其他系统，会在网关判断token是否有效</p><p>​ II. 如果token无效则会返回401（认证失败）前端跳转到登录页面</p><p>​ III. 用户发送登录请求，返回浏览器一个token，浏览器把token保存到cookie</p><p>​ IV. 再去访问其他服务的时候，都需要携带token，由网关统一验证后路由到目标服务</p><h3 id="_2-权限认证是如何实现的" tabindex="-1"><a class="header-anchor" href="#_2-权限认证是如何实现的"><span>2.权限认证是如何实现的</span></a></h3><h4 id="_2-1-概述" tabindex="-1"><a class="header-anchor" href="#_2-1-概述"><span>2.1 概述</span></a></h4><p>后台的管理系统，更注重权限控制，最常见的就是RBAC模型来指导实现权限</p><p>RBAC(Role-Based Access Control)基于角色的访问控制</p><ul><li><p>3个基础部分组成：用户、角色、权限</p></li><li><p>具体实现</p><ul><li>5张表（用户表、角色表、权限表、用户角色中间表、角色权限中间表）</li><li>7张表（用户表、角色表、权限表、菜单表、用户角色中间表、角色权限中间表、权限菜单中间表）</li></ul></li></ul><h4 id="_2-2-rbac权限模型" tabindex="-1"><a class="header-anchor" href="#_2-2-rbac权限模型"><span>2.2 RBAC权限模型</span></a></h4><p>最常见的5张表的关系</p><figure><img src="'+g+'" alt="image-20230521114305463" tabindex="0" loading="lazy"><figcaption>image-20230521114305463</figcaption></figure><p><strong>数据流转</strong></p><p>张三具有什么权限呢？</p><p>流程：张三登录系统---&gt; 查询张三拥有的角色列表---&gt;再根据角色查询拥有的权限</p><figure><img src="'+r+'" alt="image-20230521114432028" tabindex="0" loading="lazy"><figcaption>image-20230521114432028</figcaption></figure><p>在实际的开发中，也会使用权限框架完成权限功能的实现，并且设置多种粒度，常见的框架有：</p><ul><li>Apache shiro</li><li>Spring security（推荐）</li></ul><h4 id="_2-3-回答要点" tabindex="-1"><a class="header-anchor" href="#_2-3-回答要点"><span>2.3 回答要点</span></a></h4><ul><li><p>后台管理系统的开发经验</p></li><li><p>介绍RBAC权限模型5张表的关系（用户、角色、权限）</p></li><li><p>权限框架：Spring security</p></li></ul><h3 id="_3-上传数据的安全性你们怎么控制" tabindex="-1"><a class="header-anchor" href="#_3-上传数据的安全性你们怎么控制"><span>3.上传数据的安全性你们怎么控制？</span></a></h3><h4 id="_3-1-概述" tabindex="-1"><a class="header-anchor" href="#_3-1-概述"><span>3.1 概述</span></a></h4><figure><img src="'+o+'" alt="image-20230521124717749" tabindex="0" loading="lazy"><figcaption>image-20230521124717749</figcaption></figure><blockquote><p>这里的安全性，主要说的是，浏览器访问后台，需要经过网络传输，有可能会出现安全的问题</p></blockquote><p>解决方案：使用非对称加密（或对称加密），给前端一个公钥让他把数据加密后传到后台，后台负责解密后处理数据</p><h4 id="_3-2-对称加密" tabindex="-1"><a class="header-anchor" href="#_3-2-对称加密"><span>3.2 对称加密</span></a></h4><p>文件加密和解密使用相同的密钥，即加密密钥也可以用作解密密钥</p><figure><img src="'+c+'" alt="image-20230521125012727" tabindex="0" loading="lazy"><figcaption>image-20230521125012727</figcaption></figure><ul><li><p>数据发信方将明文和加密密钥一起经过特殊的加密算法处理后，使其变成复杂的加密密文发送出去，</p></li><li><p>收信方收到密文后，若想解读出原文，则需要使用加密时用的密钥以及相同加密算法的逆算法对密文进行解密，才能使其回复成可读明文。</p></li><li><p>在对称加密算法中，使用的密钥只有一个，收发双方都使用这个密钥，这就需要解密方事先知道加密密钥。</p></li></ul><p><strong>优点:</strong> 对称加密算法的优点是算法公开、计算量小、加密速度快、加密效率高。</p><p><strong>缺点:</strong> 没有非对称加密安全.</p><p><strong>用途：</strong> 一般用于保存用户手机号、身份证等敏感但能解密的信息。</p><p><strong>常见的对称加密算法有</strong>: <code>AES、DES、3DES、Blowfish、IDEA、RC4、RC5、RC6、HS256 </code></p><h4 id="_3-3-非对称加密" tabindex="-1"><a class="header-anchor" href="#_3-3-非对称加密"><span>3.3 非对称加密</span></a></h4><p>两个密钥：公开密钥（publickey）和私有密钥，公有密钥加密，私有密钥解密</p><figure><img src="'+d+'" alt="image-20230521125136717" tabindex="0" loading="lazy"><figcaption>image-20230521125136717</figcaption></figure><p>解释: 同时生成两把密钥：私钥和公钥，私钥隐秘保存，公钥可以下发给信任客户端.</p><p>加密与解密:</p><ul><li>私钥加密，持有公钥才可以解密</li><li>公钥加密，持有私钥才可解密</li></ul><p>签名:</p><ul><li>私钥签名, 持有公钥进行验证是否被篡改过.</li></ul><p>**优点: ** 非对称加密与对称加密相比，其安全性更好；</p><p><strong>缺点:</strong> 非对称加密的缺点是加密和解密花费时间长、速度慢，只适合对少量数据进行加密。 <strong>用途：</strong> 一般用于签名和认证。私钥服务器保存, 用来加密, 公钥客户拿着用于对于令牌或者签名的解密或者校验使用.</p><p><strong>常见的非对称加密算法有：</strong> RSA、DSA（数字签名用）、ECC（移动设备用）、RS256 (采用SHA-256 的 RSA 签名)</p><h4 id="_3-4-回答要点" tabindex="-1"><a class="header-anchor" href="#_3-4-回答要点"><span>3.4 回答要点</span></a></h4><ul><li>使用非对称加密（或对称加密），给前端一个公钥让他把数据加密后传到后台，后台解密后处理数据 <ul><li>传输的数据很大建议使用对称加密，不过不能保存敏感信息</li><li>传输的数据较小，要求安全性高，建议采用非对称加密</li></ul></li></ul><h3 id="_4-你负责项目的时候遇到了哪些比较棘手的问题" tabindex="-1"><a class="header-anchor" href="#_4-你负责项目的时候遇到了哪些比较棘手的问题"><span>4.你负责项目的时候遇到了哪些比较棘手的问题</span></a></h3><p>这个面试题主要考察的是，</p><ul><li>你是否有过开发经验</li><li>是否是核心开发人员</li></ul><p>有4个方面可以回答，只要挑出一个回答就行了</p><p><strong>（1）设计模式</strong></p><ul><li>工厂模式+策略</li><li>责任链模式</li></ul><blockquote><p>回答思路</p><p>1，什么背景（技术问题）</p><p>2，过程（解决问题的过程）</p><p>3，最终落地方案</p></blockquote><p>举例：</p><p>①：介绍登录业务（一开始没有用设计模式，所有的登录方式都柔和在一个业务类中，不过，发现需求经常改）</p><p>②：登录方式经常会增加或更换，每次都要修改业务层代码，所以，经过我的设计，使用了工厂设计模式和策略模式，解决了，经常修改业务层代码的问题</p><p>③：详细介绍一下工厂模式和策略模式（参考前面设计模式的课程）</p><p><strong>（2）线上BUG</strong></p><ul><li>CPU飙高</li><li>内存泄漏</li><li>线程死锁</li><li>....</li></ul><p>回答方式参考上面的回答思路，具体问题可以参考前面的课程（JVM和多线程相关的面试题）</p><p><strong>（3）调优</strong></p><ul><li>慢接口</li><li>慢SQL</li><li>缓存方案</li></ul><p><strong>（4）组件封装</strong></p><ul><li>分布式锁</li><li>接口幂等</li><li>分布式事务</li><li>支付通用</li></ul><h3 id="_5-你们项目中日志怎么采集的" tabindex="-1"><a class="header-anchor" href="#_5-你们项目中日志怎么采集的"><span>5.你们项目中日志怎么采集的</span></a></h3><h4 id="_5-1-问题" tabindex="-1"><a class="header-anchor" href="#_5-1-问题"><span>5.1 问题</span></a></h4><p>1，为什么要采集日志？</p><p>日志是定位系统问题的重要手段，可以根据日志信息快速定位系统中的问题</p><p>2，采集日志的方式有哪些?</p><ul><li><p>ELK：即Elasticsearch、Logstash和Kibana三个软件的首字母</p></li><li><p>常规采集：按天保存到一个日志文件<img src="'+h+'" alt="image-20230521232726959" loading="lazy"></p></li></ul><h4 id="_5-2-elk基本架构" tabindex="-1"><a class="header-anchor" href="#_5-2-elk基本架构"><span>5.2 ELK基本架构</span></a></h4><p>ELK即Elasticsearch、Logstash和Kibana三个开源软件的缩写</p><figure><img src="'+u+'" alt="image-20230521232913086" tabindex="0" loading="lazy"><figcaption>image-20230521232913086</figcaption></figure><ul><li><p>Elasticsearch Elasticsearch 全文搜索和分析引擎，对大容量的数据进行接近实时的存储、搜索和分析操作。</p></li><li><p>Logstash Logstash是一个数据收集引擎，它可以动态的从各种数据源搜集数据，并对数据进行过滤、分析和统一格式等操作，并将输出结果存储到指定位置上</p></li><li><p>Kibana Kibana是一个数据分析和可视化平台，通常与Elasticsearch配合使用，用于对其中的数据进行搜索、分析，并且以统计图标的形式展示。</p></li></ul><h4 id="_5-3-参考回答" tabindex="-1"><a class="header-anchor" href="#_5-3-参考回答"><span>5.3 参考回答</span></a></h4><ul><li><p>我们搭建了ELK日志采集系统</p></li><li><p>介绍ELK的三个组件：</p><ul><li>Elasticsearch是全文搜索分析引擎，可以对数据存储、搜索、分析</li><li>Logstash是一个数据收集引擎，可以动态收集数据，可以对数据进行过滤、分析，将数据存储到指定的位置</li><li>Kibana是一个数据分析和可视化平台，配合Elasticsearch对数据进行搜索，分析，图表化展示</li></ul></li></ul><h3 id="_6-查看日志的命令" tabindex="-1"><a class="header-anchor" href="#_6-查看日志的命令"><span>6.查看日志的命令</span></a></h3><p>目前采集日志的方式：按天保存到一个日志文件</p><figure><img src="'+m+'" alt="image-20230521233150276" tabindex="0" loading="lazy"><figcaption>image-20230521233150276</figcaption></figure><p>也可以在logback配置文件中设置日志的目录和名字</p><figure><img src="'+f+'" alt="image-20230521233220905" tabindex="0" loading="lazy"><figcaption>image-20230521233220905</figcaption></figure><p>需要掌握的Linux中的日志：</p><ul><li><p>实时监控日志的变化</p><p>实时监控某一个日志文件的变化：tail -f xx.log；实时监控日志最后100行日志： tail –n 100 -f xx.log</p></li><li><p>按照行号查询</p><ul><li><p>查询日志尾部最后100行日志：tail – n 100 xx.log</p></li><li><p>查询日志头部开始100行日志：head –n 100 xx.log</p></li><li><p>查询某一个日志行号区间：cat -n xx.log | tail -n +100 | head -n 100 (查询100行至200行的日志)</p></li></ul></li><li><p>按照关键字找日志的信息</p><p>查询日志文件中包含debug的日志行号：cat -n xx.log | grep &quot;debug&quot;</p></li><li><p>按照日期查询</p><p>sed -n &#39;/2023-05-18 14:22:31.070/,/ 2023-05-18 14:27:14.158/p’xx.log</p></li><li><p>日志太多，处理方式</p><ul><li><p>分页查询日志信息：cat -n xx.log |grep &quot;debug&quot; | more</p></li><li><p>筛选过滤以后，输出到一个文件：cat -n xx.log | grep &quot;debug&quot; &gt;debug.txt</p></li></ul></li></ul><h3 id="_7-生产问题怎么排查" tabindex="-1"><a class="header-anchor" href="#_7-生产问题怎么排查"><span>7.生产问题怎么排查</span></a></h3><p>已经上线的bug排查的思路：</p><p>1，先分析日志，通常在业务中都会有日志的记录，或者查看系统日志，或者查看日志文件，然后定位问题</p><p>2，远程debug(通常公司的正式环境（生产环境）是不允许远程debug的。一般远程debug都是公司的测试环境，方便调试代码)</p><p><strong>远程debug配置</strong></p><p>前提条件：<strong>远程的代码和本地的代码要保持一致</strong></p><p>1.远程代码需要配置启动参数，把项目打包放到服务器后启动项目的参数：</p><div class="language-shell line-numbers-mode" data-highlighter="shiki" data-ext="shell" data-title="shell" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">java</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;"> -jar</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;"> -agentlib:jdwp=transport=dt_socket,server=y,suspend=n,address=5005</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> project-1.0-SNAPSHOT.jar</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><blockquote><p><strong>-agentlib:jdwp</strong> 是通知JVM使用(java debug wire protocol)来运行调试环境</p><p><strong>transport=dt_socket</strong> 调试数据的传送方式</p><p><strong>server=y</strong> 参数是指是否支持在server模式</p><p><strong>suspend=n</strong> 是否在调试客户端建立起来后，再执行JVM。</p><p><strong>address=5005</strong> 调试端口设置为5005，其它端口也可以</p></blockquote><p>2.idea中设置远程debug，找到idea中的 Edit Configurations...</p><figure><img src="'+b+'" alt="image-20230521233554657" tabindex="0" loading="lazy"><figcaption>image-20230521233554657</figcaption></figure><figure><img src="'+_+'" alt="image-20230521233600556" tabindex="0" loading="lazy"><figcaption>image-20230521233600556</figcaption></figure><ol start="3"><li>idea中启动远程debug<img src="'+x+'" alt="image-20230521233715574" loading="lazy"></li><li>访问远程服务器，在本地代码中打断点即可调试远程</li></ol><h3 id="_8-怎么快速定位系统的瓶颈" tabindex="-1"><a class="header-anchor" href="#_8-怎么快速定位系统的瓶颈"><span>8.怎么快速定位系统的瓶颈</span></a></h3><ul><li><p>压测（性能测试），项目上线之前测评系统的压力</p><ul><li>压测目的：给出系统当前的性能状况；定位系统性能瓶颈或潜在性能瓶颈</li><li>指标：响应时间、 QPS、并发数、吞吐量、 CPU利用率、内存使用率、磁盘IO、错误率</li><li>压测工具：LoadRunner、Apache Jmeter …</li><li>后端工程师：根据压测的结果进行解决或调优（接口慢、代码报错、并发达不到要求…）</li></ul></li><li><p>监控工具、链路追踪工具，项目上线之后监控</p><ul><li>监控工具：Prometheus+Grafana</li><li>链路追踪工具：skywalking、Zipkin</li></ul></li><li><p>线上诊断工具Arthas(阿尔萨斯)，项目上线之后监控、排查</p><ul><li><p>官网：https://arthas.aliyun.com/</p></li><li><p>核心功能：</p><figure><img src="'+k+'" alt="image-20230521233926897" tabindex="0" loading="lazy"><figcaption>image-20230521233926897</figcaption></figure><figure><img src="'+y+'" alt="image-20230521233934644" tabindex="0" loading="lazy"><figcaption>image-20230521233934644</figcaption></figure></li></ul></li></ul>',122)],S={},A=(0,e(66262).A)(S,[["render",function(i,a){return(0,l.uX)(),(0,l.CE)("div",null,v)}]]),z=JSON.parse('{"path":"/study-notes/heima-java-bagu/enterprise-scenarios/technical-scenarios.html","title":"02-常见技术场景","lang":"zh-CN","frontmatter":{"title":"02-常见技术场景","category":"面试","description":"提示 视频来源： 新版Java面试专题视频教程，java八股文面试全套真题+深度详解（含大厂高频面试真题） 常见技术场景 1.单点登录这块怎么实现的 1.1 概述 单点登录的英文名叫做：Single Sign On（简称SSO）,只需要登录一次，就可以访问所有信任的应用系统 在以前的时候，一般我们就单系统，所有的功能都在同一个系统上。 image-20...","head":[["meta",{"property":"og:url","content":"https://mister-hope.github.io/study-notes/heima-java-bagu/enterprise-scenarios/technical-scenarios.html"}],["meta",{"property":"og:site_name","content":"博客演示"}],["meta",{"property":"og:title","content":"02-常见技术场景"}],["meta",{"property":"og:description","content":"提示 视频来源： 新版Java面试专题视频教程，java八股文面试全套真题+深度详解（含大厂高频面试真题） 常见技术场景 1.单点登录这块怎么实现的 1.1 概述 单点登录的英文名叫做：Single Sign On（简称SSO）,只需要登录一次，就可以访问所有信任的应用系统 在以前的时候，一般我们就单系统，所有的功能都在同一个系统上。 image-20..."}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:locale","content":"zh-CN"}],["meta",{"property":"og:updated_time","content":"2024-07-27T14:43:11.000Z"}],["meta",{"property":"article:author","content":"樱宁"}],["meta",{"property":"article:modified_time","content":"2024-07-27T14:43:11.000Z"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"02-常见技术场景\\",\\"image\\":[\\"\\"],\\"dateModified\\":\\"2024-07-27T14:43:11.000Z\\",\\"author\\":[{\\"@type\\":\\"Person\\",\\"name\\":\\"樱宁\\",\\"url\\":\\"https://mister-hope.com\\"}]}"]]},"headers":[{"level":2,"title":"常见技术场景","slug":"常见技术场景","link":"#常见技术场景","children":[{"level":3,"title":"1.单点登录这块怎么实现的","slug":"_1-单点登录这块怎么实现的","link":"#_1-单点登录这块怎么实现的","children":[]},{"level":3,"title":"2.权限认证是如何实现的","slug":"_2-权限认证是如何实现的","link":"#_2-权限认证是如何实现的","children":[]},{"level":3,"title":"3.上传数据的安全性你们怎么控制？","slug":"_3-上传数据的安全性你们怎么控制","link":"#_3-上传数据的安全性你们怎么控制","children":[]},{"level":3,"title":"4.你负责项目的时候遇到了哪些比较棘手的问题","slug":"_4-你负责项目的时候遇到了哪些比较棘手的问题","link":"#_4-你负责项目的时候遇到了哪些比较棘手的问题","children":[]},{"level":3,"title":"5.你们项目中日志怎么采集的","slug":"_5-你们项目中日志怎么采集的","link":"#_5-你们项目中日志怎么采集的","children":[]},{"level":3,"title":"6.查看日志的命令","slug":"_6-查看日志的命令","link":"#_6-查看日志的命令","children":[]},{"level":3,"title":"7.生产问题怎么排查","slug":"_7-生产问题怎么排查","link":"#_7-生产问题怎么排查","children":[]},{"level":3,"title":"8.怎么快速定位系统的瓶颈","slug":"_8-怎么快速定位系统的瓶颈","link":"#_8-怎么快速定位系统的瓶颈","children":[]}]}],"git":{"createdTime":1722091391000,"updatedTime":1722091391000,"contributors":[{"name":"jiang","email":"948742327@qq.com","commits":1}]},"readingTime":{"minutes":10.35,"words":3106},"filePathRelative":"study-notes/heima-java-bagu/enterprise-scenarios/technical-scenarios.md","localizedDate":"2024年7月27日","excerpt":"<div class=\\"hint-container tip\\">\\n<p class=\\"hint-container-title\\">提示</p>\\n<p>视频来源：\\n<a href=\\"https://www.bilibili.com/video/BV1yT411H7YK/?vd_source=7138dfc78c49f602f8d3ed8cfbf0513d\\" target=\\"_blank\\" rel=\\"noopener noreferrer\\">新版Java面试专题视频教程，java八股文面试全套真题+深度详解（含大厂高频面试真题）</a></p>\\n</div>\\n<h2>常见技术场景</h2>\\n<h3>1.单点登录这块怎么实现的</h3>","autoDesc":true}')}}]);