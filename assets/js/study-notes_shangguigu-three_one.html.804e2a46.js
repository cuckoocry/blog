"use strict";(self.webpackChunkblogs2=self.webpackChunkblogs2||[]).push([[1636],{66262:(n,s)=>{s.A=(n,s)=>{const a=n.__vccOpts||n;for(const[n,i]of s)a[n]=i;return a}},8247:(n,s,a)=>{a.r(s),a.d(s,{comp:()=>l,data:()=>p});var i=a(20641);const e=[(0,i.Fv)('<h3 id="java字符串常量池" tabindex="-1"><a class="header-anchor" href="#java字符串常量池"><span>java字符串常量池：</span></a></h3><pre><code>public class StringPool58Demo  {\n    public static void main(String[] args) {\n\n        String str1 = new StringBuilder(&quot;58&quot;).append(&quot;tongcheng&quot;).toString();\n        System.out.println(str1);\n        System.out.println(str1.intern());\n        System.out.println(str1 == str1.intern()); // true\n\n        System.out.println();\n\n        String str2 = new StringBuilder(&quot;ja&quot;).append(&quot;va&quot;).toString();\n        System.out.println(str2);\n        System.out.println(str2.intern());\n        System.out.println(str2 == str2.intern()); // false\n        \n       //只有Java为false,其他全部是true\n    }\n}\n</code></pre><p>输出结果：</p><div class="language-dockerfile line-numbers-mode" data-highlighter="shiki" data-ext="dockerfile" data-title="dockerfile" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">58tongcheng</span></span>\n<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">58tongcheng</span></span>\n<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">true</span></span>\n<span class="line"></span>\n<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">java</span></span>\n<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">java</span></span>\n<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">false</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><div class="language- line-numbers-mode" data-highlighter="shiki" data-ext="" data-title="" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span>String.java</span></span>\n<span class="line"><span></span></span>\n<span class="line"><span>public native String intern();</span></span>\n<span class="line"><span></span></span>\n<span class="line"><span>当调用intern方法时，如果字符串常量池已包含等于此{@code string}对象的字符串，由{@link#equals（Object）}方法，则池中的字符串直接返回。否则，此{@code String}对象将添加到并返回对此{@code String}对象的引用。</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>由于运行时常量池是方法区的一部分，所以这两个区域的溢出测试可以放到一起进行。HotSpot从JDK 7开始逐步“去永久代”的计划，并在JDK 8中完全使用元空间来代替永久代的背景故事，在此我们就以测试代码来观察一下，使用&quot;永久代&quot;还是“元空间&quot;来实现方法区，对程序有什么实际的影响。</p><p>String:intern()是一个本地方法，它的作用是如果字符串常量池中已经包含一个等于此String对象的字符串，则返回代表池中这个字符串的String对象的引用；否则，会将此String对象包含的字符串添加到常量池中，并且返回此String对象的引用。在JDK 6或更早之前的HotSpot虚拟机中，常量池都是分配在永久代中，我们可以通过-XX:PermSize和-XX:MaxPermSize限制永久代的大小，即可间接限制其中常量池的容量。</p><p>按照代码结果，Java字符串答案为false必然是两个不同的java，那另外一个java字符串如何加载进来的?</p><p>有一个初始化的Java字符串（JDK出娘胎自带的），在加载sun.misc.Version这个类的时候进入常量池。</p><p>递推步骤</p><p>rt.jar通过bootstrap根加载器直接加载进来，</p><p>System代码解析 System -&gt; initializeSystemClass() -&gt; Version</p><div class="language- line-numbers-mode" data-highlighter="shiki" data-ext="" data-title="" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span></span></span>\n<span class="line"><span>public final class System {</span></span>\n<span class="line"><span></span></span>\n<span class="line"><span>    /* register the natives via the static initializer.</span></span>\n<span class="line"><span>     *</span></span>\n<span class="line"><span>     * VM will invoke the initializeSystemClass method to complete</span></span>\n<span class="line"><span>     * the initialization for this class separated from clinit.</span></span>\n<span class="line"><span>     * Note that to use properties set by the VM, see the constraints</span></span>\n<span class="line"><span>     * described in the initializeSystemClass method.</span></span>\n<span class="line"><span>     */</span></span>\n<span class="line"><span>    private static native void registerNatives();</span></span>\n<span class="line"><span>    注册本地方法通过静态的初始化加载，VM将调用initializeSystemClass方法来完成该类的初始化与clinit分离。</span></span>\n<span class="line"><span>    请注意，要使用VM设置的属性，请参阅约束</span></span>\n<span class="line"><span>    在initializeSystemClass方法中描述。</span></span>\n<span class="line"><span></span></span>\n<span class="line"><span></span></span>\n<span class="line"><span>\t//初始化System类。在线程初始化之后调用。</span></span>\n<span class="line"><span>    private static void initializeSystemClass() {</span></span>\n<span class="line"><span></span></span>\n<span class="line"><span>\t\t...</span></span>\n<span class="line"><span>        </span></span>\n<span class="line"><span>        sun.misc.Version.init();</span></span>\n<span class="line"><span></span></span>\n<span class="line"><span>\t\t...</span></span>\n<span class="line"><span>    }</span></span>\n<span class="line"><span>}</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><div class="language- line-numbers-mode" data-highlighter="shiki" data-ext="" data-title="" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span></span></span>\n<span class="line"><span>package sun.misc;</span></span>\n<span class="line"><span></span></span>\n<span class="line"><span>//反编译后的代码</span></span>\n<span class="line"><span>public class Version {</span></span>\n<span class="line"><span>\tprivate static final String launcher_name = &quot;java&quot;;</span></span>\n<span class="line"><span>\tprivate static final String java_version = &quot;1.8.0_45&quot;;</span></span>\n<span class="line"><span>    private static final String java_runtime_name = &quot;Java(TM) SE Runtime Environment&quot;;</span></span>\n<span class="line"><span>    private static final String java_profile_name = &quot;&quot;;</span></span>\n<span class="line"><span>    private static final String java_runtime_version = &quot;1.8.0_45-b15&quot;;</span></span>\n<span class="line"><span>\t...</span></span>\n<span class="line"><span>}</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>为什么java会是false,其他字符串都是true ，因为Java在出娘胎的时候就有launcher_name = &quot;java&quot;;然后我们自己又new了一个java,他们两个不同，所以为false。</p><ul><li>类加载器和rt.jar - 根加载器提前部署加载rt.jar</li><li>OpenJDK8源码 <ul><li>http://openjdk.java.net/</li><li>openjdk8\\jdk\\src\\share\\classes\\sun\\misc</li></ul></li><li>https://docs.oracle.com/javase/8/docs/</li></ul><hr><p>出自深入理解Java虚拟机 P63</p><p>这段代码在JDK 6中运行，会得到两个false，而在JDK 7中运行，会得到一个true和一个false。产生差异的原因是，在JDK 6中，intern()方法会把首次遇到的字符串实例复制到永久代的字符串常量池中存储，返回的也是永久代里面这个字符串实例的引用，而由StringBuilder创建的字符串对象实例在Java堆上，所以必然不可能是同一个引用，结果将返回false。</p><p>而JDK 7(以及部分其他虚拟机，例如JRockit）的intern()方法实现就不需要再拷贝字符串的实例到永久代了，既然字符串常量池已经移到Java堆中，那只需要在常量池里记录一下首次出现的实例引用即可，因此intern()返回的引用和由StringBuilder创建的那个字符串实例就是同一个。而对str2比较返回false，这是因为“java”这个字符串在执行StringBuilder.toString()之前就已经出现过了，字符串常量池中已经有它的引用，不符合intern()方法要求“首次遇到&quot;”的原则，“计算机软件&quot;这个字符串则是首次出现的，因此结果返回true。</p><p>sun.misc.Version类会在JDK类库的初始化过程中被加载并初始化，而在初始化时它需要对静态常量字段根据指定的常量值(ConstantValue〉做默认初始化，此时被sun.misc.Version.launcher静态常量字段所引用的&quot;java&quot;字符串字面量就被intern到HotSpot VM的字符串常量池——StringTable里了。</p><h3 id="更多" tabindex="-1"><a class="header-anchor" href="#更多"><span>更多</span></a></h3><p>🐈‍⬛ 观看宋红康老师的jvm第125集</p>',23)],t={},l=(0,a(66262).A)(t,[["render",function(n,s){return(0,i.uX)(),(0,i.CE)("div",null,e)}]]),p=JSON.parse('{"path":"/study-notes/shangguigu-three/one.html","title":"字符串常量Java内部加载","lang":"zh-CN","frontmatter":{"title":"字符串常量Java内部加载","date":"2023-03-11T00:00:00.000Z","description":"java字符串常量池： 输出结果： 由于运行时常量池是方法区的一部分，所以这两个区域的溢出测试可以放到一起进行。HotSpot从JDK 7开始逐步“去永久代”的计划，并在JDK 8中完全使用元空间来代替永久代的背景故事，在此我们就以测试代码来观察一下，使用\\"永久代\\"还是“元空间\\"来实现方法区，对程序有什么实际的影响。 String:intern()是一...","head":[["meta",{"property":"og:url","content":"https://mister-hope.github.io/study-notes/shangguigu-three/one.html"}],["meta",{"property":"og:site_name","content":"撄宁的博客"}],["meta",{"property":"og:title","content":"字符串常量Java内部加载"}],["meta",{"property":"og:description","content":"java字符串常量池： 输出结果： 由于运行时常量池是方法区的一部分，所以这两个区域的溢出测试可以放到一起进行。HotSpot从JDK 7开始逐步“去永久代”的计划，并在JDK 8中完全使用元空间来代替永久代的背景故事，在此我们就以测试代码来观察一下，使用\\"永久代\\"还是“元空间\\"来实现方法区，对程序有什么实际的影响。 String:intern()是一..."}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:locale","content":"zh-CN"}],["meta",{"property":"og:updated_time","content":"2024-07-27T14:24:55.000Z"}],["meta",{"property":"article:author","content":"樱宁"}],["meta",{"property":"article:published_time","content":"2023-03-11T00:00:00.000Z"}],["meta",{"property":"article:modified_time","content":"2024-07-27T14:24:55.000Z"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"字符串常量Java内部加载\\",\\"image\\":[\\"\\"],\\"datePublished\\":\\"2023-03-11T00:00:00.000Z\\",\\"dateModified\\":\\"2024-07-27T14:24:55.000Z\\",\\"author\\":[{\\"@type\\":\\"Person\\",\\"name\\":\\"樱宁\\",\\"url\\":\\"https://mister-hope.com\\"}]}"]]},"headers":[{"level":3,"title":"java字符串常量池：","slug":"java字符串常量池","link":"#java字符串常量池","children":[]},{"level":3,"title":"更多","slug":"更多","link":"#更多","children":[]}],"git":{"createdTime":1722090295000,"updatedTime":1722090295000,"contributors":[{"name":"jiang","email":"948742327@qq.com","commits":1}]},"readingTime":{"minutes":4.08,"words":1225},"filePathRelative":"study-notes/shangguigu-three/one.md","localizedDate":"2023年3月11日","excerpt":"<h3>java字符串常量池：</h3>\\n<pre><code>public class StringPool58Demo  {\\n    public static void main(String[] args) {\\n\\n        String str1 = new StringBuilder(\\"58\\").append(\\"tongcheng\\").toString();\\n        System.out.println(str1);\\n        System.out.println(str1.intern());\\n        System.out.println(str1 == str1.intern()); // true\\n\\n        System.out.println();\\n\\n        String str2 = new StringBuilder(\\"ja\\").append(\\"va\\").toString();\\n        System.out.println(str2);\\n        System.out.println(str2.intern());\\n        System.out.println(str2 == str2.intern()); // false\\n        \\n       //只有Java为false,其他全部是true\\n    }\\n}\\n</code></pre>","autoDesc":true}')}}]);