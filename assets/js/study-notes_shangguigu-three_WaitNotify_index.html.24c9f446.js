"use strict";(self.webpackChunkblogs2=self.webpackChunkblogs2||[]).push([[2341],{66262:(n,s)=>{s.A=(n,s)=>{const a=n.__vccOpts||n;for(const[n,i]of s)a[n]=i;return a}},33095:(n,s,a)=>{a.r(s),a.d(s,{comp:()=>t,data:()=>c});var i=a(20641);const e=a.p+"assets/img/image-20210918201339817.9c085e9f.png",l=[(0,i.Fv)('<p>3种让线程等待和唤醒的方法</p><ul><li>方式1：使用Object中的wait()方法让线程等待，使用object中的notify()方法唤醒线程</li><li>方式2：使用JUC包中Condition的await()方法让线程等待，使用signal()方法唤醒线程</li><li>方式3：LockSupport类可以阻塞当前线程以及唤醒指定被阻塞的线程</li></ul><h2 id="wait-notify限制" tabindex="-1"><a class="header-anchor" href="#wait-notify限制"><span>wait - Notify限制</span></a></h2><p>Object类中的wait和notify方法实现线程等待和唤醒</p><div class="language- line-numbers-mode" data-highlighter="shiki" data-ext="" data-title="" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span></span></span>\n<span class="line"><span>public class LockSupportDemo {</span></span>\n<span class="line"><span>    static Object objectLock = new Object();</span></span>\n<span class="line"><span></span></span>\n<span class="line"><span>    public static void main(String[] args) {</span></span>\n<span class="line"><span>        new Thread(() -&gt; {</span></span>\n<span class="line"><span>            synchronized (objectLock) {</span></span>\n<span class="line"><span>                System.out.println(Thread.currentThread().getName() + &quot;\\t&quot; + &quot;------come in&quot;);</span></span>\n<span class="line"><span>                try {</span></span>\n<span class="line"><span>                    objectLock.wait();</span></span>\n<span class="line"><span>                } catch (InterruptedException e) {</span></span>\n<span class="line"><span>                    e.printStackTrace();</span></span>\n<span class="line"><span>                }</span></span>\n<span class="line"><span>            }</span></span>\n<span class="line"><span>            System.out.println(Thread.currentThread().getName() + &quot;\\t&quot; + &quot;-----被唤醒&quot;);</span></span>\n<span class="line"><span>        }, &quot;A&quot;).start();</span></span>\n<span class="line"><span></span></span>\n<span class="line"><span>        new Thread(() -&gt; {</span></span>\n<span class="line"><span>            synchronized (objectLock) {</span></span>\n<span class="line"><span>                objectLock.notify();</span></span>\n<span class="line"><span>                System.out.println(Thread.currentThread().getName() + &quot;\\t&quot; + &quot;-----通知&quot;);</span></span>\n<span class="line"><span>            }</span></span>\n<span class="line"><span>        }, &quot;B&quot;).start();</span></span>\n<span class="line"><span>    }</span></span>\n<span class="line"><span>}</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><div class="language-dockerfile line-numbers-mode" data-highlighter="shiki" data-ext="dockerfile" data-title="dockerfile" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">A\t------come in</span></span>\n<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">B\t-----通知</span></span>\n<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">A\t-----被唤醒</span></span>\n<span class="line"></span>\n<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">Process finished with exit code 0</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><div class="language- line-numbers-mode" data-highlighter="shiki" data-ext="" data-title="" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span>/**</span></span>\n<span class="line"><span> * @Description: 要求: t1线程等待3秒钟，3秒钟后t2线程唤醒t1线程继续工作</span></span>\n<span class="line"><span> * &lt;p&gt;</span></span>\n<span class="line"><span> * 以下异常情况:</span></span>\n<span class="line"><span> * 2 wait方法和notify方法，两个都去掉同步代码块后看运行效果</span></span>\n<span class="line"><span> * 2.1 异常惰况</span></span>\n<span class="line"><span> * Exception in thread &quot;t1&quot; java.Lang.ILlegalLNonitorStateException at java.lang.Object.wait(Native Method)</span></span>\n<span class="line"><span> * Exception in thread &quot;t2&quot; java.lang.ILlegalWonitorStateException at java.lang.Object.notify(Native Method)</span></span>\n<span class="line"><span> * &lt;p&gt;</span></span>\n<span class="line"><span> * 2.2 结论</span></span>\n<span class="line"><span> * Object类中的wait、notify、notifyALlL用于线程等待和唤醒的方法，都必须在synchronized内部执行（必须用到关键字synchronized)</span></span>\n<span class="line"><span> */</span></span>\n<span class="line"><span>public class LockSupportDemo {</span></span>\n<span class="line"><span>    static Object objectLock = new Object();</span></span>\n<span class="line"><span></span></span>\n<span class="line"><span>    public static void main(String[] args) {</span></span>\n<span class="line"><span>        new Thread(() -&gt; {</span></span>\n<span class="line"><span>            //synchronized (objectLock) {</span></span>\n<span class="line"><span>            System.out.println(Thread.currentThread().getName() + &quot;\\t&quot; + &quot;------come in&quot;);</span></span>\n<span class="line"><span>            try {</span></span>\n<span class="line"><span>                objectLock.wait();</span></span>\n<span class="line"><span>            } catch (InterruptedException e) {</span></span>\n<span class="line"><span>                e.printStackTrace();</span></span>\n<span class="line"><span>            }</span></span>\n<span class="line"><span>            //}</span></span>\n<span class="line"><span>            System.out.println(Thread.currentThread().getName() + &quot;\\t&quot; + &quot;-----被唤醒&quot;);</span></span>\n<span class="line"><span>        }, &quot;A&quot;).start();</span></span>\n<span class="line"><span></span></span>\n<span class="line"><span>        new Thread(() -&gt; {</span></span>\n<span class="line"><span>            //synchronized (objectLock) {</span></span>\n<span class="line"><span>            objectLock.notify();</span></span>\n<span class="line"><span>            System.out.println(Thread.currentThread().getName() + &quot;\\t&quot; + &quot;-----通知&quot;);</span></span>\n<span class="line"><span>            //}</span></span>\n<span class="line"><span>        }, &quot;B&quot;).start();</span></span>\n<span class="line"><span>    }</span></span>\n<span class="line"><span>}</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><div class="language-dockerfile line-numbers-mode" data-highlighter="shiki" data-ext="dockerfile" data-title="dockerfile" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">A\t------come in</span></span>\n<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">Exception in thread </span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">&quot;A&quot;</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> Exception in thread </span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">&quot;B&quot;</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> java.lang.IllegalMonitorStateException</span></span>\n<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">\tat java.lang.Object.wait(Native Method)</span></span>\n<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">\tat java.lang.Object.wait(Object.java:502)</span></span>\n<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">\tat com.moxi.interview.study.thread.LockSupportDemo.lambda$main$0(LockSupportDemo.java:11)</span></span>\n<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">\tat java.lang.Thread.run(Thread.java:748)</span></span>\n<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">java.lang.IllegalMonitorStateException</span></span>\n<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">\tat java.lang.Object.notify(Native Method)</span></span>\n<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">\tat com.moxi.interview.study.thread.LockSupportDemo.lambda$main$1(LockSupportDemo.java:21)</span></span>\n<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">\tat java.lang.Thread.run(Thread.java:748)</span></span>\n<span class="line"></span>\n<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">Process finished with exit code 0</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>结论：如果不在同步代码块中 wait、notify是不可用的</p><p>前面的synchronized铁三角不可以破坏</p><figure><img src="'+e+'" alt="image-20210918201339817" tabindex="0" loading="lazy"><figcaption>image-20210918201339817</figcaption></figure><div class="language- line-numbers-mode" data-highlighter="shiki" data-ext="" data-title="" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span>/**</span></span>\n<span class="line"><span> * @Description: 要求: t1线程等待3秒钟，3秒钟后t2线程唤醒t1线程继续工作</span></span>\n<span class="line"><span> * &lt;p&gt;</span></span>\n<span class="line"><span> * 以下异常情况:</span></span>\n<span class="line"><span> * 2 wait方法和notify方法，两个都去掉同步代码块后看运行效果</span></span>\n<span class="line"><span> * 2.1 异常惰况</span></span>\n<span class="line"><span> * Exception in thread &quot;t1&quot; java.Lang.ILlegalLNonitorStateException at java.lang.Object.wait(Native Method)</span></span>\n<span class="line"><span> * Exception in thread &quot;t2&quot; java.lang.ILlegalWonitorStateException at java.lang.Object.notify(Native Method)</span></span>\n<span class="line"><span> * &lt;p&gt;</span></span>\n<span class="line"><span> * 2.2 结论</span></span>\n<span class="line"><span> * Object类中的wait、notify、notifyALlL用于线程等待和唤醒的方法，都必须在synchronized内部执行（必须用到关键字synchronized)</span></span>\n<span class="line"><span> * &lt;p&gt;</span></span>\n<span class="line"><span> * &lt;p&gt;</span></span>\n<span class="line"><span> * 3 将notify放在wait方法前先执行，t1先notify 了，3秒钟后t2线程再执行wait方法</span></span>\n<span class="line"><span> * 3.1程序一直无法结柬</span></span>\n<span class="line"><span> * 3.2结论</span></span>\n<span class="line"><span> * 先wait后notify、notifyall方法，等待中的线程才会被唤醒，否则无法唤醒</span></span>\n<span class="line"><span> */</span></span>\n<span class="line"><span>public class LockSupportDemo {</span></span>\n<span class="line"><span>    static Object objectLock = new Object();</span></span>\n<span class="line"><span></span></span>\n<span class="line"><span>    public static void main(String[] args) {</span></span>\n<span class="line"><span>        new Thread(() -&gt; {</span></span>\n<span class="line"><span>            //暂停几秒钟线程</span></span>\n<span class="line"><span>            try { TimeUnit.SECONDS.sleep(3);} catch (InterruptedException e) {e.printStackTrace();}</span></span>\n<span class="line"><span>            synchronized (objectLock) {</span></span>\n<span class="line"><span>                System.out.println(Thread.currentThread().getName() + &quot;\\t&quot; + &quot;------come in&quot;);</span></span>\n<span class="line"><span>                try {</span></span>\n<span class="line"><span>                    objectLock.wait();</span></span>\n<span class="line"><span>                } catch (InterruptedException e) {</span></span>\n<span class="line"><span>                    e.printStackTrace();</span></span>\n<span class="line"><span>                }</span></span>\n<span class="line"><span>            }</span></span>\n<span class="line"><span>            System.out.println(Thread.currentThread().getName() + &quot;\\t&quot; + &quot;-----被唤醒&quot;);</span></span>\n<span class="line"><span>        }, &quot;A&quot;).start();</span></span>\n<span class="line"><span></span></span>\n<span class="line"><span>        new Thread(() -&gt; {</span></span>\n<span class="line"><span>            synchronized (objectLock) {</span></span>\n<span class="line"><span>                objectLock.notify();</span></span>\n<span class="line"><span>                System.out.println(Thread.currentThread().getName() + &quot;\\t&quot; + &quot;-----通知&quot;);</span></span>\n<span class="line"><span>            }</span></span>\n<span class="line"><span>        }, &quot;B&quot;).start();</span></span>\n<span class="line"><span>    }</span></span>\n<span class="line"><span>}</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>结论：wait和notify方法必须要在同步块或者方法里面且成对出现使用，否则会抛出java.lang.IllegalMonitorStateException。</p><p>调用顺序要先wait后notify才OK。</p>',14)],p={},t=(0,a(66262).A)(p,[["render",function(n,s){return(0,i.uX)(),(0,i.CE)("div",null,l)}]]),c=JSON.parse('{"path":"/study-notes/shangguigu-three/WaitNotify/","title":"线程等待唤醒机制","lang":"zh-CN","frontmatter":{"title":"线程等待唤醒机制","date":"2023-03-18T00:00:00.000Z","description":"3种让线程等待和唤醒的方法 方式1：使用Object中的wait()方法让线程等待，使用object中的notify()方法唤醒线程 方式2：使用JUC包中Condition的await()方法让线程等待，使用signal()方法唤醒线程 方式3：LockSupport类可以阻塞当前线程以及唤醒指定被阻塞的线程 wait - Notify限制 Obje...","head":[["meta",{"property":"og:url","content":"https://mister-hope.github.io/./study-notes/shangguigu-three/WaitNotify/"}],["meta",{"property":"og:site_name","content":"撄宁的博客"}],["meta",{"property":"og:title","content":"线程等待唤醒机制"}],["meta",{"property":"og:description","content":"3种让线程等待和唤醒的方法 方式1：使用Object中的wait()方法让线程等待，使用object中的notify()方法唤醒线程 方式2：使用JUC包中Condition的await()方法让线程等待，使用signal()方法唤醒线程 方式3：LockSupport类可以阻塞当前线程以及唤醒指定被阻塞的线程 wait - Notify限制 Obje..."}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:locale","content":"zh-CN"}],["meta",{"property":"og:updated_time","content":"2024-08-11T14:10:10.000Z"}],["meta",{"property":"article:author","content":"樱宁"}],["meta",{"property":"article:published_time","content":"2023-03-18T00:00:00.000Z"}],["meta",{"property":"article:modified_time","content":"2024-08-11T14:10:10.000Z"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"线程等待唤醒机制\\",\\"image\\":[\\"\\"],\\"datePublished\\":\\"2023-03-18T00:00:00.000Z\\",\\"dateModified\\":\\"2024-08-11T14:10:10.000Z\\",\\"author\\":[{\\"@type\\":\\"Person\\",\\"name\\":\\"樱宁\\",\\"url\\":\\"https://mister-hope.com\\"}]}"]]},"headers":[{"level":2,"title":"wait - Notify限制","slug":"wait-notify限制","link":"#wait-notify限制","children":[]}],"git":{"createdTime":1722090295000,"updatedTime":1723385410000,"contributors":[{"name":"jiang","email":"948742327@qq.com","commits":2}]},"readingTime":{"minutes":2.54,"words":763},"filePathRelative":"study-notes/shangguigu-three/WaitNotify/README.md","localizedDate":"2023年3月18日","excerpt":"<p>3种让线程等待和唤醒的方法</p>\\n<ul>\\n<li>方式1：使用Object中的wait()方法让线程等待，使用object中的notify()方法唤醒线程</li>\\n<li>方式2：使用JUC包中Condition的await()方法让线程等待，使用signal()方法唤醒线程</li>\\n<li>方式3：LockSupport类可以阻塞当前线程以及唤醒指定被阻塞的线程</li>\\n</ul>\\n<h2>wait - Notify限制</h2>\\n<p>Object类中的wait和notify方法实现线程等待和唤醒</p>\\n<div class=\\"language- line-numbers-mode\\" data-highlighter=\\"shiki\\" data-ext=\\"\\" data-title=\\"\\" style=\\"--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34\\"><pre class=\\"shiki shiki-themes one-light one-dark-pro vp-code\\"><code><span class=\\"line\\"><span></span></span>\\n<span class=\\"line\\"><span>public class LockSupportDemo {</span></span>\\n<span class=\\"line\\"><span>    static Object objectLock = new Object();</span></span>\\n<span class=\\"line\\"><span></span></span>\\n<span class=\\"line\\"><span>    public static void main(String[] args) {</span></span>\\n<span class=\\"line\\"><span>        new Thread(() -&gt; {</span></span>\\n<span class=\\"line\\"><span>            synchronized (objectLock) {</span></span>\\n<span class=\\"line\\"><span>                System.out.println(Thread.currentThread().getName() + \\"\\\\t\\" + \\"------come in\\");</span></span>\\n<span class=\\"line\\"><span>                try {</span></span>\\n<span class=\\"line\\"><span>                    objectLock.wait();</span></span>\\n<span class=\\"line\\"><span>                } catch (InterruptedException e) {</span></span>\\n<span class=\\"line\\"><span>                    e.printStackTrace();</span></span>\\n<span class=\\"line\\"><span>                }</span></span>\\n<span class=\\"line\\"><span>            }</span></span>\\n<span class=\\"line\\"><span>            System.out.println(Thread.currentThread().getName() + \\"\\\\t\\" + \\"-----被唤醒\\");</span></span>\\n<span class=\\"line\\"><span>        }, \\"A\\").start();</span></span>\\n<span class=\\"line\\"><span></span></span>\\n<span class=\\"line\\"><span>        new Thread(() -&gt; {</span></span>\\n<span class=\\"line\\"><span>            synchronized (objectLock) {</span></span>\\n<span class=\\"line\\"><span>                objectLock.notify();</span></span>\\n<span class=\\"line\\"><span>                System.out.println(Thread.currentThread().getName() + \\"\\\\t\\" + \\"-----通知\\");</span></span>\\n<span class=\\"line\\"><span>            }</span></span>\\n<span class=\\"line\\"><span>        }, \\"B\\").start();</span></span>\\n<span class=\\"line\\"><span>    }</span></span>\\n<span class=\\"line\\"><span>}</span></span></code></pre>\\n<div class=\\"line-numbers\\" aria-hidden=\\"true\\" style=\\"counter-reset:line-number 0\\"><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div></div></div>","autoDesc":true}')}}]);