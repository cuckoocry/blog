"use strict";(self.webpackChunkblogs2=self.webpackChunkblogs2||[]).push([[1448],{66262:(e,a)=>{a.A=(e,a)=>{const s=e.__vccOpts||e;for(const[e,i]of a)s[e]=i;return s}},36307:(e,a,s)=>{s.r(a),s.d(a,{comp:()=>Z,data:()=>U});var i=s(20641);const o=s.p+"assets/img/20200721212102560.8a276b03.png",n=s.p+"assets/img/image-20200704183436495.f9fe6b9d.png",t=s.p+"assets/img/20200721213332630.c457acec.png",l=s.p+"assets/img/20200721214933626.f125163d.png",r=s.p+"assets/img/20200722134405251.22505f67.png",d=s.p+"assets/img/20200722131041957.d7694a63.png",c=s.p+"assets/img/20200722130535525.f1787785.gif",p=s.p+"assets/img/20200722151311154.fdf9a57f.png",h=s.p+"assets/img/20200725155759288.2ee07c97.png",g=s.p+"assets/img/20200725150917476.928952bd.png",k=s.p+"assets/img/20200725150109203.8d40c733.png",u=s.p+"assets/img/img-202303101622.c9ea3006.png",m=s.p+"assets/img/20200725155127479.8d298071.png",b=s.p+"assets/img/20200725155549596.c19ab7b3.png",v=s.p+"assets/img/20200725160245331.08f58510.png",y=s.p+"assets/img/20200725161551868.9cf16ee5.png",_=s.p+"assets/img/20200725163244622.299a10b0.png",C=s.p+"assets/img/20200807105031435.ae0a3158.png",M=s.p+"assets/img/20200807112107588.7365d82e.png",f=s.p+"assets/img/20200807112937832.0988c2c9.png",A=s.p+"assets/img/20200807114729427.07689046.png",J=s.p+"assets/img/20200807121320925.18d78267.png",F=s.p+"assets/img/20200807121358976.3cf3b725.png",B=s.p+"assets/img/20200807124758835.984df797.png",S=s.p+"assets/img/2020080714041120.8bfb199b.png",G=s.p+"assets/img/20200807141114216.dc109fa2.png",V=s.p+"assets/img/20200807143709937.99020921.png",x=s.p+"assets/img/2020080716523497.3aa56db7.png",E=s.p+"assets/img/20200807154231426.fb170ff0.png",L=s.p+"assets/img/20200807151938212.a6d532cd.png",j=s.p+"assets/img/20200807153518837.c570f8f2.png",w=s.p+"assets/img/20200807170516550.57bd26d5.png",O=s.p+"assets/img/20200807180534899.b6e0434e.png",T=s.p+"assets/img/20200807183357142.945a84da.png",q=s.p+"assets/img/20200807160818909.5445990e.gif",D=s.p+"assets/img/20200807184746659.7b4a81bd.png",z=s.p+"assets/img/20200807160938544.cb5a4024.gif",P=s.p+"assets/img/20200807185820542.5dc811bc.png",R=s.p+"assets/img/20200807161246378.59bc425a.gif",W=s.p+"assets/img/20200807190452284.49778932.png",N=s.p+"assets/img/20200807161123464.4974bc8c.png",X=(0,i.Fv)('<h2 id="介绍" tabindex="-1"><a class="header-anchor" href="#介绍"><span>介绍</span></a></h2><div class="hint-container tip"><p class="hint-container-title">提示</p><p>该文章包含JVM基础入门篇全部内容以及宋红康老师JVM教程全套笔记。 来源Bilibili尚硅谷宋红康老师JVM教程：<a href="https://www.bilibili.com/video/BV1PJ411n7xZ" target="_blank" rel="noopener noreferrer">硅谷2020最新版宋红康JVM教程</a><br> 笔记补充：https://gitee.com/vectorx/NOTE_JVM/tree/main , https://www.yuque.com/u21195183/jvm</p><p>最细致的JVM讲解（更多可参考书籍）</p><p>基础入门视频：https://www.bilibili.com/video/BV1jJ411t71s?p=1&amp;vd_source=7138dfc78c49f602f8d3ed8cfbf0513d</p></div><h2 id="目录" tabindex="-1"><a class="header-anchor" href="#目录"><span>目录</span></a></h2><h3 id="内存与垃圾回收篇" tabindex="-1"><a class="header-anchor" href="#内存与垃圾回收篇"><span>内存与垃圾回收篇</span></a></h3>',4),H=(0,i.Lk)("h2",{id:"字节码与类的加载篇",tabindex:"-1"},[(0,i.Lk)("a",{class:"header-anchor",href:"#字节码与类的加载篇"},[(0,i.Lk)("span",null,"字节码与类的加载篇")])],-1),K=(0,i.Lk)("h2",{id:"性能监控与调优篇",tabindex:"-1"},[(0,i.Lk)("a",{class:"header-anchor",href:"#性能监控与调优篇"},[(0,i.Lk)("span",null,"性能监控与调优篇")])],-1),I=(0,i.Fv)('<h1 id="以下为基础入门篇" tabindex="-1"><a class="header-anchor" href="#以下为基础入门篇"><span>以下为基础入门篇</span></a></h1><h2 id="_1-jvm体系结构" tabindex="-1"><a class="header-anchor" href="#_1-jvm体系结构"><span>1. JVM体系结构</span></a></h2><p>首先，我们来了解 JVM 的位置，如下图，JVM 是运行在操作系统之上的，它与硬件没有直接交互。<br><img src="'+o+'" alt="20200721212102560.png" loading="lazy"><br> 接下来是 JVM 的整个体系结构图：</p><p><img src="'+n+'" alt="image-20200704183436495.png" loading="lazy"> 然后，我们根据 JVM 体系结构图来阐述相关的知识点。</p><h2 id="_2-类装载器-classloader" tabindex="-1"><a class="header-anchor" href="#_2-类装载器-classloader"><span>2. 类装载器 ClassLoader</span></a></h2><p><strong>类装载器 ClassLoader</strong> 是负责加载<code>class</code>文件的，将<code>class</code>文件字节码内容加载到内存中，并将这些内容转换成方法区中的运行时数据结构。<code>ClassLoader</code>只负责文件的加载，至于它是否可运行，则由<code>Execution Engine</code>决定。</p><p>在这里需要区分一下<code>class</code>与<code>Class</code>。小写的<code>class</code>，是指编译 Java 代码后所生成的以<code>.class</code>为后缀名的字节码文件。而大写的<code>Class</code>，是 JDK 提供的<code>java.lang.Class</code>，可以理解为封装类的模板。多用于反射场景，例如 JDBC 中的加载驱动，<code>Class.forName(&quot;com.mysql.jdbc.Driver&quot;);</code></p><p>接下来我们来观察下图，<code>Car.class</code>字节码文件被<code>ClassLoader</code>类装载器加载并初始化，在方法区中生成了一个<code>Car Class</code>的类模板，而我们平时所用到的实例化，就是在这个类模板的基础上，形成了一个个实例，即<code>car1</code>，<code>car2</code>。反过来讲，我们可以对某个具体的实例进行<code>getClass()</code>操作，就可以得到该实例的类模板，即<code>Car Class</code>。再接着，我们对这个类模板进行<code>getClassLoader()</code>操作，就可以得到这个类模板是由哪个类装载器进行加载的。 <img src="'+t+'" alt="20200721213332630.png" loading="lazy"></p><blockquote><p>Tip：扩展一下，JVM 并不仅仅只是通过检查文件后缀名是否是<code>.class</code>来判断是否加载，最主要的是通过<code>class</code>文件中特定的文件标示，即下图<code>test.class</code>文件中的<code>cafe babe</code>。 <img src="'+l+'" alt="20200721214933626.png" loading="lazy"></p></blockquote><h3 id="_2-1-有哪些类装载器" tabindex="-1"><a class="header-anchor" href="#_2-1-有哪些类装载器"><span>2.1 有哪些类装载器？</span></a></h3><p><strong>（1）虚拟机自带的加载器</strong></p><ol><li>启动类加载器（Bootstrap），也叫根加载器，加载<code>%JAVAHOME%/jre/lib/rt.jar</code>。</li><li>扩展类加载器（Extension），加载<code>%JAVAHOME%/jre/lib/ext/*.jar</code>，例如<code>javax.swing</code>包。</li><li>应用程序类加载器（AppClassLoader），也叫系统类加载器，加载<code>%CLASSPATH%</code>的所有类。</li></ol><p><strong>（2）用户自定义的加载器</strong> ：用户可以自定义类的加载方式，但必须是<code>Java.lang.ClassLoader</code>的子类。<br><img src="'+r+'" alt="20200722134405251.png" loading="lazy"></p><h3 id="_2-2-双亲委派和沙箱安全" tabindex="-1"><a class="header-anchor" href="#_2-2-双亲委派和沙箱安全"><span>2.2 双亲委派和沙箱安全</span></a></h3><p>接下来，我们通过下面代码来观察这几个类加载器。首先，我们先看自定义的<code>MyObject</code>，首先通过<code>getClassLoader()</code>获取到的是<code>AppClassLoader</code>，然后<code>getParent()</code>得到<code>ExtClassLoader</code>，再<code>getParent()</code>竟然是<code>null</code>？可能大家会有疑惑，不应该是 Bootstrap 加载器么？<strong>这是因为，<code>BootstrapClassLoader</code>是使用 C++语言编写的，Java 在加载的时候就成了 null。</strong></p><p>我们再来看 Java 自带的<code>Object</code>，通过<code>getClassLoader()</code>获取到的加载器直接就是<code>BootstrapClassLoader</code>，如果要想<code>getParent()</code>的话，因为是 null 值，所以就会报<code>java.lang.NullPointerException</code>空指针异常。<br><img src="'+d+'" alt="在这里插入图片描述" loading="lazy"></p><blockquote><p>输出中，<code>sun.misc.Launcher</code>是 JVM 相关调用的入口程序。</p></blockquote><p>那为什么会出现这个情况呢？这就需要我们来了解类加载器的加载顺序和机制了，即<strong>双亲委派</strong>和<strong>沙箱安全</strong> 。</p><p><strong>（1）双亲委派</strong>，当一个类收到了类加载请求，它首先不会尝试自己去加载这个类，而是把这个请求委派给父类去完成，因此所有的加载请求都应该传送到启动类加载器中，只有当父类加载器反馈自己无法完成这个请求的时候（在它的加载路径下没有找到所需加载的<code>Class</code>），子类加载器才会尝试自己去加载。</p><p>采用双亲委派的一个好处是，比如加载位于<code>rt.jar</code>包中的类<code>java.lang.Object</code>，不管是哪个加载器加载这个类，最终都是委派给顶层的启动类加载器进行加载，确保哪怕使用了不同的类加载器，最终得到的都是同样一个<code>Object</code>对象。</p><p><strong>（2）沙箱安全机制</strong>，是基于双亲委派机制上采取的一种 JVM 的自我保护机制，假设你要写一个<code>java.lang.String</code>的类，由于双亲委派机制的原理，此请求会先交给<code>BootStrapClassLoader</code>试图进行加载，但是<code>BootStrapClassLoader</code>在加载类时首先通过包和类名查找<code>rt.jar</code>中有没有该类，有则优先加载<code>rt.jar</code>包中的类，<strong>因此就保证了 java 的运行机制不会被破坏，确保你的代码不会污染到 Java 的源码</strong>。</p><p><strong>所以，类加载器的加载顺序如下：</strong></p><ol><li>当<code>AppClassLoader</code>加载一个<code>class</code>时，它首先不会自己去尝试加载这个类，而是把类加载请求委派给父类加载器<code>ExtClassLoader</code>去完成。</li><li>当<code>ExtClassLoader</code>加载一个<code>class</code>时，它首先也不会自己去尝试加载这个类，而是把类加载请求委派给<code>BootStrapClassLoader</code>去完成。</li><li>如果<code>BootStrapClassLoader</code>加载失败（例如在<code>$JAVA_HOME/jre/lib</code>里未查找到该<code>class</code>），会使用<code>ExtClassLoader</code>来尝试加载。</li><li>若<code>ExtClassLoader</code>也加载失败，则会使用<code>AppClassLoader</code>来加载，如果<code>AppClassLoader</code>也加载失败，则会报出异常<code>ClassNotFoundException</code>。</li></ol><blockquote><p>Tip：<code>rt.jar</code>是什么？做了哪些事？这些暂且不提，那你有没有想过，为什么可以在 idea 这些开发工具中可以直接去使用 String、ArrayList、甚至一些 JDK 提供的类和方法？观察下面动图就可以知道，原来这些都在<code>rt.jar</code>中定义好了，且直接被启动类加载器进行加载了。<br><img src="'+c+'" alt="在这里插入图片描述" loading="lazy"></p></blockquote><h2 id="_3-本地方法栈-native-method-stack" tabindex="-1"><a class="header-anchor" href="#_3-本地方法栈-native-method-stack"><span>3. 本地方法栈 Native Method Stack</span></a></h2><p><strong>本地方法接口（Native Interface）</strong>，其作用是融合不同的编程语言为 Java 所用，它的初衷是用来融合 C/C++ 程序的，Java 诞生的时候是 C/C++ 流行时期，要想立足，就得调用 C/C++ 程序，于是 Java<br> 就在内存中专门开辟了一块区域处理标记为 native 的代码。</p><p>而<strong>本地方法栈（Native Method Stack）</strong>，就是在一个 Stack 中登记这些 native 方法，然后在执行引擎<code>Execution Engine</code>执行时加载本地方法库<code>native libraies</code>。</p><p>接下来，我们通过下图的多线程部分源码来理解什么是<code>native</code>方法。首先我们观察<code>start()</code>的源码，发现它其实并没有做什么复杂的操作，只是单纯的调用了<code>start0()</code>这个方法，然后我们去观察<code>start0()</code>的源码，发现它只是一个使用了<code>native</code>关键字修饰的一个方法（<code>private native void start0();</code>），但<strong>只有声明却没有具体的实现！</strong>。<br><img src="'+p+'" alt="在这里插入图片描述" loading="lazy"><br> 为什么？我们都知道<code>Thread</code>是<code>Class</code>关键字修饰的类（<code>class Thread implements Runnable</code>），而不是接口。一般来说，类中的方法都要有定义和实现，接口里面才有方法的定义声明。这就是<code>native</code>方法的独特之处，说白了，<code>被native关键字修饰的方法，基本上和我们，甚至和 Java 都没啥关系了，因为它要去调用底层操作系统或者第三方语言的库函数，所以我们不需要去考虑它具体是如何实现的。</code></p><h3 id="为什么是native-了解" tabindex="-1"><a class="header-anchor" href="#为什么是native-了解"><span>为什么是native？了解</span></a></h3><div class="language-dockerfile line-numbers-mode" data-highlighter="shiki" data-ext="dockerfile" data-title="dockerfile" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">Native Interface本地接口</span></span>\n<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">本地接口的作用是融合不同的编程语言为 Java 所用，它的初衷是融合 C/C++程序，Java 诞生的时候是 C/C++横行的时候，要想立足，必须有调用 C/C++程序，于是就在内存中专门开辟了一块区域处理标记为native的代码，它的具体做法是 Native Method Stack中登记 native方法，在Execution Engine 执行时加载native libraies。</span></span>\n<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">目前该方法使用的越来越少了，除非是与硬件有关的应用，比如通过Tava程序驱动打印机或者Java系统管理生产设备，在企业级应用中已经比较少见。因为现在的异构领域间的通信很发达，比如可以使用 Socket通信，也可以使用Web Service等等，不多做介绍。</span></span>\n<span class="line"></span>\n<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">Native Method Stack</span></span>\n<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">它的具体做法是Native Method Stack中登记native方法，在Execution Engine 执行时加载本地方法库。</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="_4-程序计数器-program-counter-register" tabindex="-1"><a class="header-anchor" href="#_4-程序计数器-program-counter-register"><span>4. 程序计数器 Program Counter Register</span></a></h2><p><strong>程序计数器（Program Counter Register）</strong>，也叫<code> PC 寄存器</code>。PC 寄存器里保存当前正在执行的 JVM 指令的地址。 每一个线程都有它自己的 PC 寄存器，也是该线程启动时创建的。<br> 每个线程都有一个程序计数器，是线程私有的,就是一个指针，指向方法区中的方法字节码（<code>用来存储指向下一条指令的地址,也即将要执行的指令代码</code>），由执行引擎<code>Execution Engine</code>读取下一条指令，是一个非常小的内存空间，几乎可以忽略不记。</p><p>这块内存区域很小，<code>它是当前线程所执行的字节码的行号指示器</code>，字节码解释器通过改变这个计数器的值来选取下一条需要执行的字节码指令。</p><p>如果是执行一个Native方法，那这个计数器是空的。</p><p>PC 寄存器一般用以完成分支、循环、跳转、异常处理、线程恢复等基础功能。不会发生内存溢出（OutOfMemory，OOM）错误。</p><h2 id="_5-方法区-method-area" tabindex="-1"><a class="header-anchor" href="#_5-方法区-method-area"><span>5. 方法区 Method Area</span></a></h2><p><strong>方法区（Method Area）</strong>，是供各线程共享的运行时内存区域，它<code>存储了每一个类的结构信息</code>。例如运行时常量池（Runtime Constant Pool）、字段和方法数据、构造函数和普通方法的字节码内容。</p><p>上面说的是规范（定义的一种抽象概念），实际在不同虚拟机里实现是不一样的，最典型的就是永久代（PermGen space）和元空间（Meta space）。</p><blockquote><p>实例变量存在堆内存中，和方法区无关。</p></blockquote><h2 id="_6-栈-stack" tabindex="-1"><a class="header-anchor" href="#_6-栈-stack"><span>6. 栈 Stack</span></a></h2><p><strong><code>栈管运行，堆管存储！</code></strong> 请熟读并默写全文。 ( ´•ω•)ﾉ(´ ﾉ Д；｀)</p><p><strong>栈（Stack）</strong>，也叫栈内存，主管 Java 程序的运行，在线程创建时创建。其生命期是跟随线程的生命期，是线程私有的，线程结束栈内存也就是释放。</p><p>对于栈来说，不存在垃圾回收的问题，只要线程一结束该栈就 Over。8种<code>基本类型的变量+对象的引用变量+实例方法都是在函数的栈内存中分配</code>。</p><h3 id="_6-1-栈存储什么数据" tabindex="-1"><a class="header-anchor" href="#_6-1-栈存储什么数据"><span>6.1 栈存储什么数据？</span></a></h3><p>栈主要存储<strong>8 种基本类型的变量、对象的引用变量、以及实例方法。</strong></p><p>这里引出一个名词，<strong>栈帧</strong>，什么是栈帧？<br> 每个方法执行的同时都会创建一个栈帧，用于存储局部变量表、操作数栈、动态链接、方法出口等信息，每个方法从调用直至执行完毕的过程，就对应着一个栈帧在虚拟机中入栈到出栈的过程。<br><img src="'+h+'" alt="在这里插入图片描述" loading="lazy"><br> 简单来说，<strong>栈帧</strong>对应一个方法的执行和结束，是方法执行过程的内存模型。</p><p>其中，栈帧主要保持了 3 类数据：</p><ol><li><strong>本地变量（Local Variables）</strong>：输入参数和输出参数，以及方法内的变量。</li><li><strong>栈操作（Operand Stack）</strong>：记录出栈、入栈的操作。</li><li><strong>栈帧数据（Frame Data）</strong>：包括类文件、方法等。</li></ol><blockquote><p>栈的大小是根据 JVM 有关，一般在 256K~756K 之间，约等于 1Mb 左右。</p></blockquote><h3 id="_6-2-栈的运行原理" tabindex="-1"><a class="header-anchor" href="#_6-2-栈的运行原理"><span>6.2 栈的运行原理</span></a></h3><p>观察下图，在 java 中，<code>test()</code>和<code>main()</code>都是方法，而在栈中，称为栈帧。在栈中，<code>main()</code>都是第一个入栈的。<br> 栈的顺序为：<code>main()</code>入栈 --&gt; <code>test()</code>入栈 --&gt; <code>test()</code>出栈 --&gt; <code>main()</code>出栈。<br><img src="'+g+'" alt="在这里插入图片描述" loading="lazy"><br> 根据代码和运行结果可以知道，<code>main()</code>想要出栈，则必须<code>test()</code>先出栈。那么怎么证明呢？观察下面代码，我们在<code>test()</code>方法中添加了一条语句<code>Thread.sleep(Integer.MAX_VALUE);</code>，来让<code>test()</code>无法进行出栈操作，进而导致<code>main()</code>也无法出栈。运行代码发现，运行结果如我们所料，程序一直停留在<code>test()</code>入栈，无法进行其他操作。<br><img src="'+k+'" alt="在这里插入图片描述" loading="lazy"><br> 我们接着观察下图，在图中一个栈中有两个栈帧，分别是<code>Stack Frame1</code>和<code>Stack Frame2</code>，对应方法 1 和方法 2。其中<code>Stack Frame2</code>是最先被调用的方法 2，所以它先入栈。然后方法 2 又调用了方法 1，所以<code>Stack Frame1</code>处于栈顶位置。执行完毕后，依次弹出<code>Stack Frame1</code>和<code>Stack Frame2</code>，然后线程结束，栈释放。<br> 所以，每执行一个方法都会产生一个栈帧，并保存到栈的顶部，顶部的栈帧就是当前所执行的方法，该方法执行完毕后会自动出栈。</p><figure><img src="'+u+'" alt="img-202303101622.png" tabindex="0" loading="lazy"><figcaption>img-202303101622.png</figcaption></figure><p>总结如下，栈中的数据都是以栈帧（Stack Frame）的格式存在，栈帧是一个内存区块，是一个数据集，是一个有关方法（Method）和运行期数据的数据集，当一个方法 A 被调用时就产生了一个栈帧 F1，并被压入到栈中，方法 A 中又调用了方法 B，于是产生栈帧 F2 也被压入栈中，方法 B 又调用方法 C，于是产生栈帧 F3 也被压入栈中······执行完毕后，<strong>遵循“先进后出，后进先出”的原则</strong>，先弹出 F3 栈帧，再弹出 F2 栈帧，再弹出 F1 栈帧。</p><h3 id="_6-3-栈溢出-stackoverflowerror" tabindex="-1"><a class="header-anchor" href="#_6-3-栈溢出-stackoverflowerror"><span>6.3 栈溢出 StackOverflowError</span></a></h3><p>大家肯定对栈溢出耳熟，那栈溢出是怎么产生的呢？</p><p>请看下面代码，<code>test()</code>方法里面又调用了<code>test()</code>方法，即自己调用自己，也叫递归。<br> 同时，栈是一个内存块，它是有大小长度的，而我们观察代码发现，只要代码一运行，<code>test()</code>方法就会一直进行入栈操作，而没有出栈操作，结果肯定会超出栈的大小，进而造成栈溢出错误，即<code>java.lang.StackOverflowError</code>。<br><img src="'+m+'" alt="在这里插入图片描述" loading="lazy"><br> 所以说，老哥们，禁止套娃，禁止套娃，禁止套娃！!!!∑(ﾟ Д ﾟノ)ノ</p><blockquote><p><code>java.lang.StackOverflowError</code>是错误，不是异常！证明如下 ：<br><img src="'+b+'" alt="在这里插入图片描述" loading="lazy"></p></blockquote><h2 id="_7-栈、堆、方法区的交互关系" tabindex="-1"><a class="header-anchor" href="#_7-栈、堆、方法区的交互关系"><span>7. 栈、堆、方法区的交互关系</span></a></h2><p>栈、堆、方法区三者的关系如下图，其中<code>reference</code>是引用类型。<br><img src="'+v+'" alt="在这里插入图片描述" loading="lazy"><br> 举个栗子，比如<code>MyObject myObject = new MyObject();</code>，等号左边<code>MyObject myObject</code>的<code>myObject</code>就是引用，在 Java 栈里面。等号右边的<code>new MyObject()</code>，<code>new</code>出来的<code>MyObject</code>实例对象在堆里面。简单来说，就是 Java 栈中的引用<code>myObject</code>指向了堆中的<code>MyObject</code>实例对象。<br><img src="'+y+'" alt="在这里插入图片描述" loading="lazy"></p><h2 id="_8-堆-heap" tabindex="-1"><a class="header-anchor" href="#_8-堆-heap"><span>8. 堆 Heap</span></a></h2><h3 id="_8-1-堆体系结构" tabindex="-1"><a class="header-anchor" href="#_8-1-堆体系结构"><span>8.1 堆体系结构</span></a></h3><p>一个 JVM 实例只存在一个堆内存，堆内存的大小是可以调节的。类加载器读取了类文件之后，需要把类、方法、常量变量放到堆内存中，保持所以引用类型的真实信息，方便执行器执行。</p><p>其中，堆内存分为 3 个部分：</p><ol><li>Young Generation Space，新生区、新生代</li><li>Tenure Generation Space，老年区、老年代</li><li>Permanent Space，永久区、元空间</li></ol><p><strong><code>Java7</code> 之前，堆结构图如下，而 Java8 则只将永久区变成了元空间。</strong><br><img src="'+_+'" alt="在这里插入图片描述" loading="lazy"><br><strong>总结一下，堆内存在<code>逻辑上</code>分为新生+养老+元空间，而堆内存在物理上分为新生+养老。</strong></p><h3 id="_8-2-对象在堆中的生命周期" tabindex="-1"><a class="header-anchor" href="#_8-2-对象在堆中的生命周期"><span>8.2 对象在堆中的生命周期</span></a></h3><p>那么如何直观的了解对象在堆中的生命周期呢？</p><p>（1）首先，新生区是类的诞生、成长、消亡的区域。一个类在这里被创建并使用，最后被垃圾回收器收集，结束生命。</p><p>（2）其次，所有的类都是在<code>Eden Space</code>被<code>new</code>出来的。而当<code>Eden Space</code>的空间用完时，程序又需要创建对象，JVM 的垃圾回收器则会将<code>Eden Space</code>中不再被其他对象所引用的对象进行销毁，也就是垃圾回收（Minor GC）。此时的 GC 可以认为是<strong>轻量级 GC</strong>。</p><p>（3）然后将<code>Eden Space</code>中剩余的未被回收的对象，移动到<code>Survivor 0 Space</code>，以此往复，直到<code>Survivor 0 Space</code>也满了的时候，再对<code>Survivor 0 Space</code>进行垃圾回收，剩余的未被回收的对象，则再移动到<code>Survivor 1 Space</code>。<code>Survivor 1 Space</code>也满了的话，再移动至<code>Tenure Generation Space</code>。</p><p>（4）最后，如果<code>Tenure Generation Space</code>也满了的话，那么这个时候就会被垃圾回收（Major GC or Full GC）并将该区的内存清理。此时的 GC 可以认为是<strong>重量级 GC</strong>。如果<code>Tenure Generation Space</code>被 GC 垃圾回收之后，依旧处于占满状态的话，就会产生我们场景的<code>OOM</code>异常，即<code>OutOfMemoryError</code>。</p><div class="language-dockerfile line-numbers-mode" data-highlighter="shiki" data-ext="dockerfile" data-title="dockerfile" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">如果出现iava.lang.OutOfMemorvError: Java heap space异常，说明Java虚拟机的堆内存不够。</span></span>\n<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">原因有二:</span></span>\n<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(1)Java虚拟机的堆内存设置不够，可以通过参数-Xms、-Xmx来调整。    </span></span>\n<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(2)代码中创建了大量大对象，并且长时间不能被垃圾收集器收集(存在被引用)。</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="_8-3-minor-gc-的过程" tabindex="-1"><a class="header-anchor" href="#_8-3-minor-gc-的过程"><span>8.3 Minor GC 的过程</span></a></h3><p><code>Survivor 0 Space</code>，幸存者 0 区，也叫<code>from</code>区；<br><code>Survivor 1 Space</code>，幸存者 1 区，也叫<code>to</code>区。</p><p>其中，<code>from</code>区和<code>to</code>区的区分不是固定的，是互相交换的，意思是说，在每次 GC 之后，两者会进行交换，谁空谁就是<code>to</code>区。</p><p>不明白？没关系，接着往下看。<br><img src="'+C+'" alt="在这里插入图片描述" loading="lazy"><br><strong>（1）<code>Eden Space</code>、<code>SurvivorFrom</code>复制到<code>SurvivorTo</code>，年龄+1。</strong><br> 首先，当<code>Eden Space</code>满时，会触发第一次 GC，把还活着的对象拷贝到<code>from</code>区。而当<code>Eden Space</code>再次触发 GC 时，会扫描<code>Eden Space</code>和<code>SurvivorFrom</code>，对这两个区进行垃圾回收，经过此次回收后依旧存活的对象，则直接复制到<code>to</code>区（如果对象的年龄已经达到老年的标准，则移动至老年代区），同时把这些对象的年龄+1。</p><p><strong>（2）清空<code>Eden Space</code>、<code>SurvivorFrom</code></strong><br> 然后，清空<code>Eden Space</code>和<code>SurvivorFrom</code>中的对象，此时的<code>SurvivorFrom</code>是空的。</p><p><strong>（3）<code>SurvivorFrom</code>和<code>SurvivorTo</code>互换</strong><br> 最后，<code>SurvivorFrom</code>和<code>SurvivorTo</code>进行互换，原<code>SurvivorFrom</code>成为下一次 GC 时的<code>SurvivorTo</code>，原<code>SurvivorTo</code>成为下一次 GC 时的<code>SurvivorFrom</code>。部分对象会在<code>SurvivorFrom</code>和<code>SurvivorTo</code>中来回进行交换复制，如果交换 15 次（由 JVM 参数<code>MaxTenuringThreshold</code>决定，默认 15），最终依旧存活的对象就会移动至老年代。</p><p>总结一句话，<strong>GC 之后有交换，谁空谁是<code>to</code></strong>。</p><blockquote><p>这样也是为了保证内存中没有碎片，所以<code>Survivor 0 Space</code>和<code>Survivor 1 Space</code>有一个要是空的。</p></blockquote><h3 id="_8-4-hotspot-虚拟机的内存管理" tabindex="-1"><a class="header-anchor" href="#_8-4-hotspot-虚拟机的内存管理"><span>8.4 HotSpot 虚拟机的内存管理</span></a></h3><figure><img src="'+M+'" alt="在这里插入图片描述" tabindex="0" loading="lazy"><figcaption>在这里插入图片描述</figcaption></figure><blockquote><p>不同对象的生命周期不同，其中 98%的对象都是临时对象，即这些对象的生命周期大多只存在于 Eden 区。</p></blockquote><p>实际而言，方法区（<code>Method Area</code>）和堆一样，是各个线程共享的内存区域，它用于存储虚拟机加载的：类信息+普通常量+静态常量+编译器编译后的代码等等。<strong><code>虽然 JVM 规范将方法区描述为堆的一个逻辑部分，但它却还有一个别名叫做Non-Heap（非堆内存），目的就是要和堆区分开。</code></strong></p><p>对于 HotSpot 虚拟机而言，很多开发者习惯将方法区称为 “永久代（<code>Permanent Gen</code>）” 。但严格来说两者是不同的，或者说只是使用永久代来实现方法区而已，永久代是方法区（可以理解为一个接口<code>interface</code>）的一个实现，<code>JDK1.7 的版本中，已经将原本放在永久代的字符串常量池移走</code>。（字符串常量池，JDK1.6 在方法区，JDK1.7 在堆，JDK1.8 在元空间。）<br><img src="'+f+'" alt="在这里插入图片描述" loading="lazy"></p><blockquote><p>如果没有明确指明，Java 虚拟机的名字就叫做<code>HotSpot</code>。<br><img src="'+A+'" alt="在这里插入图片描述" loading="lazy"></p></blockquote><h3 id="_8-5-永久区" tabindex="-1"><a class="header-anchor" href="#_8-5-永久区"><span>8.5 永久区</span></a></h3><p>永久区是一个常驻内存区域，用于存放 JDK 自身所携带的<code>Class</code>，<code>Interface</code>的元数据（也就是上面文章提到的<code>rt.jar</code>等），也就是说它存储的是运行环境必须的类信息，被装载进此区域的数据是不会被垃圾回收器回收掉的，关闭 JVM 才会释放此区域所占用的内存。<br><strong>（1）JDK1.7</strong><br><img src="'+J+'" alt="在这里插入图片描述" loading="lazy"></p><p><strong>（2）JDK1.8</strong><br><img src="'+F+'" alt="在这里插入图片描述" loading="lazy"><br> 在 JDK1.8 中，永久代已经被移除，被一个称为<strong>元空间</strong>的区域所取代。元空间的本质和永久代类似。</p><p>元空间与永久代之间最大的区别在于： <strong>永久带使用的 JVM 的堆内存，但是 java8 以后的<code>元空间并不在虚拟机中而是使用本机物理内存。</code></strong></p><p>因此，默认情况下，元空间的大小仅受本地内存限制。<br> 类的元数据放入<code>native memory</code>，字符串池和类的静态变量放入 Java 堆中，这样可以加载多少类的元数据就不再由<code>MaxPermSize</code>控制, 而由系统的实际可用空间来控制。</p><h3 id="_8-6-堆参数调优" tabindex="-1"><a class="header-anchor" href="#_8-6-堆参数调优"><span>8.6 堆参数调优</span></a></h3><p>在进行堆参数调优前，我们可以通过下面的代码来获取虚拟机的相关内存信息。</p><pre><code>public class JVMMemory {\n    public static void main(String[] args) {\n        // 返回 Java 虚拟机试图使用的最大内存量\n        long maxMemory = Runtime.getRuntime().maxMemory();\n        System.out.println(&quot;MAX_MEMORY = &quot; + maxMemory + &quot;（字节）、&quot; + (maxMemory / (double) 1024 / 1024) + &quot;MB&quot;);\n        // 返回 Java 虚拟机中的内存总量\n        long totalMemory = Runtime.getRuntime().totalMemory();\n        System.out.println(&quot;TOTAL_MEMORY = &quot; + totalMemory + &quot;（字节）、&quot; + (totalMemory / (double) 1024 / 1024) + &quot;MB&quot;);\n    }\n}\n</code></pre><p>运行结果如下：</p><div class="language-java line-numbers-mode" data-highlighter="shiki" data-ext="java" data-title="java" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;">MAX_MEMORY </span><span style="--shiki-light:#383A42;--shiki-dark:#56B6C2;">=</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;"> 1888485376</span><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;">（字节）、1801</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:white;--shiki-dark:#FFFFFF;">0MB</span></span>\n<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;">TOTAL_MEMORY </span><span style="--shiki-light:#383A42;--shiki-dark:#56B6C2;">=</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;"> 128974848</span><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;">（字节）、123</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:white;--shiki-dark:#FFFFFF;">0MB</span></span>\n<span class="line"></span>\n<span class="line"><span style="--shiki-light:#C18401;--shiki-dark:#E5C07B;">Process</span><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;"> finished with exit code </span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;">0</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>有人就有疑问了，这个<code>1801.0MB</code>和<code>123.0MB</code>是怎么算出来的？看下图就明白了，虚拟机最大内存为物理内存的 1/4，而初始分配的内存为物理内存的 1/64。<br><img src="'+B+'" alt="在这里插入图片描述" loading="lazy"><br> IDEA 中如何配置 JVM 内存参数？在【Run】-&gt;【Edit Configuration…】-&gt;【VM options】中，输入参数<code>-Xms1024m -Xmx1024m -XX:+PrintGCDetails</code>，然后保存退出。<br><img src="'+S+'" alt="在这里插入图片描述" loading="lazy"><br> 运行结果如下：</p><figure><img src="'+G+'" alt="在这里插入图片描述" tabindex="0" loading="lazy"><figcaption>在这里插入图片描述</figcaption></figure><blockquote><p><strong>JVM 的初始内存和最大内存一般怎么配？</strong><br> 答：初始内存和最大内存一定是一样大，理由是避免 GC 和应用程序争抢内存，进而导致内存忽高忽低产生停顿。</p></blockquote><h3 id="_8-7-堆溢出-outofmemoryerror" tabindex="-1"><a class="header-anchor" href="#_8-7-堆溢出-outofmemoryerror"><span>8.7 堆溢出 OutOfMemoryError</span></a></h3><p>现在我们来演示一下<code>OOM</code>，首先把堆内存调成 10M 后，再一直 new 对象，导致 Full GC 也无法处理，直至撑爆堆内存，进而导致<code>OOM</code>堆溢出错误，程序及结果如下：</p><blockquote><p>参数设置： <code>-Xms10m -Xmx10m -XX:+PrintGCDetails</code></p></blockquote><div class="language-java line-numbers-mode" data-highlighter="shiki" data-ext="java" data-title="java" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">public</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;"> class</span><span style="--shiki-light:#C18401;--shiki-dark:#E5C07B;"> OOMTest</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> {</span></span>\n<span class="line"></span>\n<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">    public</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;"> static</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;"> void</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;"> main</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(</span><span style="--shiki-light:#C18401;--shiki-dark:#E5C07B;">String</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">[] </span><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;--shiki-light-font-style:inherit;--shiki-dark-font-style:italic;">args</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">)</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> {</span></span>\n<span class="line"><span style="--shiki-light:#C18401;--shiki-dark:#E5C07B;">        String</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;"> str</span><span style="--shiki-light:#383A42;--shiki-dark:#56B6C2;"> =</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> &quot;xiaofeipeng&quot;</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">;</span></span>\n<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">        while</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> (</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;">true</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">) {</span></span>\n<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-dark:#7F848E;--shiki-light-font-style:italic;--shiki-dark-font-style:italic;">            // 每执行下面语句，会在堆里创建新的对象</span></span>\n<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">            str </span><span style="--shiki-light:#383A42;--shiki-dark:#56B6C2;">+=</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> str </span><span style="--shiki-light:#383A42;--shiki-dark:#56B6C2;">+</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;"> new</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;"> Random</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">().</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">nextInt</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;">88888888</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">) </span><span style="--shiki-light:#383A42;--shiki-dark:#56B6C2;">+</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;"> new</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;"> Random</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">().</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">nextInt</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;">999999999</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">);</span></span>\n<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">        }</span></span>\n<span class="line"></span>\n<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-dark:#7F848E;--shiki-light-font-style:italic;--shiki-dark-font-style:italic;">        // -Xms -XmX 10m</span></span>\n<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-dark:#7F848E;--shiki-light-font-style:italic;--shiki-dark-font-style:italic;">        //byte[] bytes = new byte[40*1024*1024];</span></span>\n<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">    }</span></span>\n<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">}</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><figure><img src="'+V+'" alt="在这里插入图片描述" tabindex="0" loading="lazy"><figcaption>在这里插入图片描述</figcaption></figure><blockquote><p>如果出现<code>java.lang.OutOfMemoryError: Java heap space</code>异常，说明 Java 虚拟机的堆内存不够，造成堆内存溢出。原因有两点：<br> ①Java 虚拟机的堆内存设置太小，可以通过参数<code>-Xms</code>和<code>-Xmx</code>来调整。<br> ② 代码中创建了大量对象，并且长时间不能被 GC 回收（存在被引用）。</p></blockquote><h2 id="_9-gc-java-garbage-collection" tabindex="-1"><a class="header-anchor" href="#_9-gc-java-garbage-collection"><span>9. GC（Java Garbage Collection）</span></a></h2><h3 id="_9-1-gc-垃圾收集机制" tabindex="-1"><a class="header-anchor" href="#_9-1-gc-垃圾收集机制"><span>9.1 GC 垃圾收集机制</span></a></h3><p>对于 GC 垃圾收集机制，我们需要记住以下几点：</p><ol><li>次数上频繁收集 Young 区。</li><li>次数上较少收集 Old 区。</li><li>基本不动元空间。</li></ol><p><img src="'+x+'" alt="在这里插入图片描述" loading="lazy"><br><img src="'+E+'" alt="在这里插入图片描述" loading="lazy"><br> JVM 在进行 GC 时，并非每次都对上面三个内存区域一起回收的，大部分时候回收的都是指新生代。<br> 因此 GC 按照回收的区域又分了两种类型，一种是普通 GC（minor GC），一种是全局 GC（major GC or Full GC）</p><p><strong>Minor GC 和 Full GC 的区别：</strong><br><strong>（1）普通 GC（minor GC）</strong>：只针对新生代区域的 GC，指发生在新生代的垃圾收集动作，因为大多数 Java 对象存活率都不高，所以 Minor GC 非常频繁，一般回收速度也比较快。<br><strong>（2）全局 GC（major GC or Full GC）</strong>：指发生在老年代的垃圾收集动作，出现了 Major GC，经常会伴随至少一次的 Minor GC（但并不是绝对的）。Major GC 的速度一般要比 Minor GC 慢上 10 倍以上</p><h3 id="_9-2-gc-日志信息详解" tabindex="-1"><a class="header-anchor" href="#_9-2-gc-日志信息详解"><span>9.2 GC 日志信息详解</span></a></h3><p>通过上面<code>OOM</code>案例，是不是觉得那一大片的日志信息看不懂？懵逼？没事，通过下图你就知道如何阅读 GC 日志信息。</p><p><strong>（1）YGC 相关参数：</strong><br><img src="'+L+'" alt="在这里插入图片描述" loading="lazy"><br><strong>（2）FGC 相关参数：</strong><br><img src="'+j+'" alt="在这里插入图片描述" loading="lazy"></p><h3 id="_9-3-gc-四大算法" tabindex="-1"><a class="header-anchor" href="#_9-3-gc-四大算法"><span>9.3 GC 四大算法</span></a></h3><ol><li>引用计数法</li><li>复制算法（Copying）</li><li>标记清除（Mark-Sweep）</li><li>标记压缩（Mark-Compact）</li></ol><h2 id="_0-如何判断java中对象是否存活" tabindex="-1"><a class="header-anchor" href="#_0-如何判断java中对象是否存活"><span>0. 如何判断Java中对象是否存活？</span></a></h2><hr><h3 id="_0-1-引用计数算法" tabindex="-1"><a class="header-anchor" href="#_0-1-引用计数算法"><span>0.1 引用计数算法</span></a></h3><p><strong>引用计数算法</strong>是给每个对象设置一个计数器，当有地方引用这个对象的时候，计数器+1，当引用失效的时候，计数器-1，当计数器为0的时候，JVM就认为该对象不再被使用，是“垃圾”了。</p><p>引用计数实现简单，效率高；但是不能解决循环引用问问题（A对象引用B对象，B对象又引用A对象，但是A，B对象已不被任何其他对象引用），同时每次计数器的增加和减少都带来了很多额外的开销，所以在JDK1.1之后，这个算法已经不再使用了。<br><img src="'+w+'" alt="在这里插入图片描述" loading="lazy"></p><h3 id="_0-2-根搜索方法" tabindex="-1"><a class="header-anchor" href="#_0-2-根搜索方法"><span>0.2 根搜索方法</span></a></h3><p><strong>根搜索方法</strong>是通过一些<code>GCRoots</code>对象作为起点，从这些节点开始往下搜索，搜索通过的路径成为引用链（ReferenceChain），当一个对象没有被<code>GCRoots</code>的引用链连接的时候，说明这个对象是不可用的。</p><p><strong>GCRoots对象包括：</strong></p><ol><li>虚拟机栈（栈帧中的本地变量表）中的引用的对象。</li><li>方法区域中的类静态属性引用的对象。</li><li>方法区域中常量引用的对象。</li><li>方法栈中JNI（<code>Native</code>方法）的引用的对象。<br><img src="'+O+'" alt="在这里插入图片描述" loading="lazy"></li></ol><h2 id="_1-复制算法-copying-适用于新生代" tabindex="-1"><a class="header-anchor" href="#_1-复制算法-copying-适用于新生代"><span>1. 复制算法（Copying）：适用于新生代</span></a></h2><h3 id="_1-1-原理分析" tabindex="-1"><a class="header-anchor" href="#_1-1-原理分析"><span>1.1 原理分析</span></a></h3><p>虚拟机把新生代分为了三部分：1个<code>Eden</code>区和2个<code>Survivor</code>区（分别叫<code>from</code>和<code>to</code>），默认比例为8:1:1。</p><p>一般情况下，新创建的对象都会被分配到<code>Eden</code>区（一些大对象特殊处理），这些对象经过第一次<code>Minor GC</code>后，如果仍然存活，将会被移到<code>Survivor</code>区。对象在<code>Survivor</code>区中每熬过一次<code>Minor GC</code>，年龄 +1，当它的年龄增加到一定程度时（默认是 15 ，通过<code>-XX:MaxTenuringThreshold</code>来设定参数），就会被移动到年老代中。</p><p>因为新生代中的对象基本都是<strong>朝生夕死</strong>（被GC回收率90%以上），<strong>所以在新生代的垃圾回收算法使用的是复制算法</strong>。</p><p>复制算法的基本思想就是将内存分为两块，每次只用其中一块，当这一块内存用完，就将还活着的对象复制到另外一块上面。<code>复制算法不会产生内存碎片</code>。</p><p>我们在GC开始的时候，对象只会存在于<code>Eden</code>区和名为<code>from</code>的<code>Survivor</code>区，<code>Survivor</code>区<code>to</code>是空的。紧接着进行GC，<code>Eden</code>区中所有存活的对象都会被复制到<code>to</code>，而在<code>from</code>区中，仍存活的对象会根据他们的年龄值来决定去向。年龄达到一定值（默认15）的对象会被移动到老年代中，没有达到阈值的对象会被复制到<code>to</code>区域。 <code>经过这次GC后，Eden区和from区已经被清空。这个时候，from和to会交换他们的角色，也就是新的to就是上次GC前的from，新的from就是上次GC前的to。</code>不管怎样，都会保证名为<code>to</code>的<code>Survivor</code>区域是空的。<code>Minor GC</code>会一直重复这样的过程，直到<code>to</code>区被填满，<code>to</code>区被填满之后，会将所有对象移动到老年代中。<br><img src="'+T+'" alt="在这里插入图片描述" loading="lazy"></p><blockquote><p><code>-XX:MaxTenuringThreshold</code>，设置对象在新生代中存活的次数。</p></blockquote><p>因为<code>Eden</code>区对象一般存活率较低，一般的，使用两块10%的内存作为空闲和活动区间，而另外80%的内存，则是用来给新建对象分配内存的。一旦发生GC，将10%的<code>from</code>活动区间与另外80%中存活的<code>Eden</code>区对象转移到10%的<code>to</code>空闲区间，接下来，将之前90%的内存全部释放，以此类推。<br><img src="'+q+'" alt="在这里插入图片描述" loading="lazy"><br> 上面动画中，Area空闲代表to，Area激活代表from，绿色代表不被回收的，红色代表被回收的。</p><h3 id="_1-2-优缺点" tabindex="-1"><a class="header-anchor" href="#_1-2-优缺点"><span>1.2 优缺点</span></a></h3><p><strong>优点</strong> ：不会产生内存碎片，效率高。<br><strong>缺点</strong> ：耗费内存空间。</p><p>如果对象的存活率很高，我们可以极端一点，假设是100%存活，那么我们需要将所有对象都复制一遍，并将所有引用地址重置一遍。复制这一工作所花费的时间，在对象存活率达到一定程度时，将会变的不可忽视。</p><p>所以从以上描述不难看出，复制算法要想使用，最起码对象的存活率要非常低才行，而且最重要的是，我们必须要克服50%内存的浪费。</p><h2 id="_2-标记清除-mark-sweep-适用于老年代" tabindex="-1"><a class="header-anchor" href="#_2-标记清除-mark-sweep-适用于老年代"><span>2. 标记清除（Mark-Sweep）：适用于老年代</span></a></h2><h3 id="_2-1-原理分析" tabindex="-1"><a class="header-anchor" href="#_2-1-原理分析"><span>2.1 原理分析</span></a></h3><p>标记清除算法，主要分成标记和清除两个阶段，先标记出要回收的对象，然后统一回收这些对象，如下图：<br><img src="'+D+'" alt="在这里插入图片描述" loading="lazy"><br> 简单来说，标记清除算法就是当程序运行期间，若可以使用的内存被耗尽的时候，GC线程就会被触发并将程序暂停，随后将要回收的对象标记一遍，最终统一回收这些对象，完成标记清理工作接下来便让应用程序恢复运行。</p><p>主要进行两项工作，第一项则是标记，第二项则是清除。</p><ul><li>标记：从引用根节点开始标记遍历所有的<code>GC Roots</code>， 先标记出要回收的对象。</li><li>清除：遍历整个堆，把标记的对象清除。<br><img src="'+z+'" alt="在这里插入图片描述" loading="lazy"></li></ul><h3 id="_2-2-优缺点" tabindex="-1"><a class="header-anchor" href="#_2-2-优缺点"><span>2.2 优缺点</span></a></h3><p><strong>优点</strong> ：不需要额外的内存空间。<br><strong>缺点</strong> ：需要暂停整个应用，会产生内存碎片；两次扫描，耗时严重。</p><p>简单来说，它的缺点就是<strong>效率比较低</strong>（递归与全堆对象遍历），而且在进行GC的时候，需要停止应用程序，这会导致用户体验非常差劲。</p><p>而且这种方式<strong>清理出来的空闲内存是不连续</strong>的，这点不难理解，我们的死亡对象都是随机分布在内存当中，现在把它们清除之后，内存的布局自然会零碎不连续。而为了应付这一点，JVM就不得不维持一个内存的空闲列表，这又是一种开销。并且在分配数组对象的时候，需要去内存寻找连续的内存空间，但此时的内存空间太过零碎分散，因此资源耗费加大。</p><h2 id="_3-标记压缩-mark-compact-适用于老年代" tabindex="-1"><a class="header-anchor" href="#_3-标记压缩-mark-compact-适用于老年代"><span>3. 标记压缩（Mark-Compact）：适用于老年代</span></a></h2><h3 id="_3-1-原理分析" tabindex="-1"><a class="header-anchor" href="#_3-1-原理分析"><span>3.1 原理分析</span></a></h3><p>简单来说，就是<strong>先标记，后整理</strong>，如下图所示：<br><img src="'+P+'" alt="在这里插入图片描述" loading="lazy"><br><img src="'+R+'" alt="在这里插入图片描述" loading="lazy"></p><h3 id="_3-2-优缺点" tabindex="-1"><a class="header-anchor" href="#_3-2-优缺点"><span>3.2 优缺点</span></a></h3><p><strong>优点</strong> ：没有内存碎片。<br><strong>缺点</strong> ：需要移动对象的成本，效率也不高（不仅要标记所有存活对象，还要整理所有存活对象的引用地址）。</p><h3 id="_3-3-标记清除压缩-mark-sweep-compact" tabindex="-1"><a class="header-anchor" href="#_3-3-标记清除压缩-mark-sweep-compact"><span>3.3 标记清除压缩（Mark-Sweep-Compact）</span></a></h3><figure><img src="'+W+'" alt="在这里插入图片描述" tabindex="0" loading="lazy"><figcaption>在这里插入图片描述</figcaption></figure><h2 id="_4-分代收集算法" tabindex="-1"><a class="header-anchor" href="#_4-分代收集算法"><span>4. 分代收集算法</span></a></h2><p>当前商业虚拟机都是采用分代收集算法，它根据对象存活周期的不同将内存划分为几块，一般是把Java堆分为新生代和老年代，然后根据各个年代的特点采用最适当的垃圾收集算法。<br> 在新生代中，每次垃圾收集都发现有大批对象死去，只有少量存活，就选用<strong>复制算法</strong>，而老年代因为对象存活率高，没有额外空间对它进行分配担保，就必须使用<strong>标记清除</strong>或者<strong>标记压缩</strong>算法来进行回收。<br><img src="'+N+'" alt="在这里插入图片描述" loading="lazy"></p><h2 id="_5-总结" tabindex="-1"><a class="header-anchor" href="#_5-总结"><span>5. 总结</span></a></h2><h3 id="_5-1-年轻代-young-gen" tabindex="-1"><a class="header-anchor" href="#_5-1-年轻代-young-gen"><span>5.1 年轻代（Young Gen）</span></a></h3><p><strong>年轻代特点是内存空间相对老年代较小，对象存活率低。</strong></p><p>复制算法的效率只和当前存活对象大小有关，因而很适用于年轻代的回收。而复制算法的内存利用率不高的问题，可以通过虚拟机中的两个<code>Survivor</code>区设计得到缓解。</p><h3 id="_5-2-老年代-tenure-gen" tabindex="-1"><a class="header-anchor" href="#_5-2-老年代-tenure-gen"><span>5.2 老年代（Tenure Gen）</span></a></h3><p><strong>老年代的特点是内存空间较大，对象存活率高。</strong></p><p>这种情况，存在大量存活率高的对象，复制算法明显变得不合适。一般是由标记清除或者是标记清除与标记整理的混合实现。</p><p>（1）<strong>标记阶段（Mark）</strong> 的开销与存活对象的数量成正比。这点上说来，对于老年代，标记清除或者标记整理有一些不符，但可以通过多核/线程利用，对并发、并行的形式提标记效率。<br> （2）<strong>清除阶段（Sweep）</strong> 的开销与所管理内存空间大小形正相关。但Sweep“就地处决”的特点，回收的过程没有对象的移动。使其相对其他有对象移动步骤的回收算法，仍然是效率最好的。但是需要解决内存碎片问题。<br> （3）<strong>整理阶段（Compact）</strong> 的开销与存活对象的数据成开比。如上一条所描述，对于大量对象的移动是很大开销的，做为老年代的第一选择并不合适。</p><p>基于上面的考虑，老年代一般是由标记清除或者是标记清除与标记整理的混合实现。以虚拟机中的CMS回收器为例，CMS是基于<code>Mark-Sweep</code>实现的，对于对象的回收效率很高。而对于碎片问题，CMS采用基于<code>Mark-Compact</code>算法的Serial Old回收器做为补偿措施：当内存回收不佳（碎片导致的<code>Concurrent Mode Failure</code>时），将采用Serial Old执行Full GC以达到对老年代内存的整理。</p><blockquote><p>参考文章：<a href="https://www.jianshu.com/p/ba415aa2330b" target="_blank" rel="noopener noreferrer">OMM Error和七大垃圾回收器详解</a></p></blockquote><h2 id="_6-附录-常见面试问题" tabindex="-1"><a class="header-anchor" href="#_6-附录-常见面试问题"><span>6. 附录.常见面试问题</span></a></h2><h3 id="_6-1-gc四种算法哪个好" tabindex="-1"><a class="header-anchor" href="#_6-1-gc四种算法哪个好"><span>6.1 GC四种算法哪个好？</span></a></h3><p>没有哪个算法是能一次性解决所有问题的，因为JVM垃圾回收使用的是分代收集算法，没有最好的算法，只有根据每一代他的垃圾回收的特性用对应的算法。例如新生代使用复制算法，老年代使用标记清除和标记整理算法。<br> 所以说，没有最好的垃圾回收机制，只有最合适的。</p><h3 id="_6-2-请说出各个垃圾回收算法的优缺点" tabindex="-1"><a class="header-anchor" href="#_6-2-请说出各个垃圾回收算法的优缺点"><span>6.2 请说出各个垃圾回收算法的优缺点</span></a></h3><p><strong>（1）内存效率：</strong> 复制算法 &gt; 标记清除算法 &gt; 标记整理算法（此处的效率只是简单的对比时间复杂度，实际情况不一定如此）。<br><strong>（2）内存整齐度：</strong> 复制算法 = 标记整理算法 &gt; 标记清除算法。<br><strong>（3）内存利用率：</strong> 标记整理算法 = 标记清除算法 &gt; 复制算法。</p><p>可以看出，效率上来说，复制算法是当之无愧的老大，但是却浪费了太多内存，而为了尽量兼顾上面所提到的三个指标，标记整理算法相对来说更平滑一些，但效率上依然不尽如人意，它比复制算法多了一个标记的阶段，又比标记清除多了一个整理内存的过程。</p>',172),Y={},Z=(0,s(66262).A)(Y,[["render",function(e,a){const s=(0,i.g2)("RouteLink");return(0,i.uX)(),(0,i.CE)("div",null,[X,(0,i.Lk)("ul",null,[(0,i.Lk)("li",null,[(0,i.bF)(s,{to:"/study-notes/JVM/Memory-GC/Java-Architecture/"},{default:(0,i.k6)((()=>[(0,i.eW)("JVM与Java体系结构")])),_:1})]),(0,i.Lk)("li",null,[(0,i.bF)(s,{to:"/study-notes/JVM/Memory-GC/Clas-Loading-Subsystem/"},{default:(0,i.k6)((()=>[(0,i.eW)("类加载子系统")])),_:1})]),(0,i.Lk)("li",null,[(0,i.bF)(s,{to:"/study-notes/JVM/Memory-GC/JVM-RuntimeDataAreas/"},{default:(0,i.k6)((()=>[(0,i.eW)("运行时数据区概述及线程")])),_:1})]),(0,i.Lk)("li",null,[(0,i.bF)(s,{to:"/study-notes/JVM/Memory-GC/PCounter-Register/"},{default:(0,i.k6)((()=>[(0,i.eW)("程序计数器")])),_:1})]),(0,i.Lk)("li",null,[(0,i.bF)(s,{to:"/study-notes/JVM/Memory-GC/JVM-Stack/"},{default:(0,i.k6)((()=>[(0,i.eW)("虚拟机栈")])),_:1})]),(0,i.Lk)("li",null,[(0,i.bF)(s,{to:"/study-notes/JVM/Memory-GC/Native-Stack/"},{default:(0,i.k6)((()=>[(0,i.eW)("本地方法接口和本地方法栈")])),_:1})]),(0,i.Lk)("li",null,[(0,i.bF)(s,{to:"/study-notes/JVM/Memory-GC/Heap/"},{default:(0,i.k6)((()=>[(0,i.eW)("堆")])),_:1})]),(0,i.Lk)("li",null,[(0,i.bF)(s,{to:"/study-notes/JVM/Memory-GC/Method-Area/"},{default:(0,i.k6)((()=>[(0,i.eW)("方法区")])),_:1})]),(0,i.Lk)("li",null,[(0,i.bF)(s,{to:"/study-notes/JVM/Memory-GC/Object-Instantiation/"},{default:(0,i.k6)((()=>[(0,i.eW)("对象实例化内存布局与访问定位")])),_:1})]),(0,i.Lk)("li",null,[(0,i.bF)(s,{to:"/study-notes/JVM/Memory-GC/Direct-Memory/"},{default:(0,i.k6)((()=>[(0,i.eW)("直接内存")])),_:1})]),(0,i.Lk)("li",null,[(0,i.bF)(s,{to:"/study-notes/JVM/Memory-GC/Execution-Engine/"},{default:(0,i.k6)((()=>[(0,i.eW)("执行引擎")])),_:1})]),(0,i.Lk)("li",null,[(0,i.bF)(s,{to:"/study-notes/JVM/Memory-GC/StringTable/"},{default:(0,i.k6)((()=>[(0,i.eW)("StringTable")])),_:1})]),(0,i.Lk)("li",null,[(0,i.bF)(s,{to:"/study-notes/JVM/Memory-GC/GC-Overview/"},{default:(0,i.k6)((()=>[(0,i.eW)("垃圾回收概述")])),_:1})]),(0,i.Lk)("li",null,[(0,i.bF)(s,{to:"/study-notes/JVM/Memory-GC/GC-Relevant-Algorithms/"},{default:(0,i.k6)((()=>[(0,i.eW)("垃圾回收相关算法")])),_:1})]),(0,i.Lk)("li",null,[(0,i.bF)(s,{to:"/study-notes/JVM/Memory-GC/GC-Relevant-Overview/"},{default:(0,i.k6)((()=>[(0,i.eW)("垃圾回收相关概念")])),_:1})]),(0,i.Lk)("li",null,[(0,i.bF)(s,{to:"/study-notes/JVM/Memory-GC/GC-Period/"},{default:(0,i.k6)((()=>[(0,i.eW)("垃圾回收器")])),_:1})])]),H,(0,i.Lk)("ul",null,[(0,i.Lk)("li",null,[(0,i.bF)(s,{to:"/study-notes/JVM/Bytecode-ClassLoading/Class-File-Structure/"},{default:(0,i.k6)((()=>[(0,i.eW)("class文件结构")])),_:1})]),(0,i.Lk)("li",null,[(0,i.bF)(s,{to:"/study-notes/JVM/Bytecode-ClassLoading/Bytecode-Instruction-Set/"},{default:(0,i.k6)((()=>[(0,i.eW)("字节码指令集")])),_:1})]),(0,i.Lk)("li",null,[(0,i.bF)(s,{to:"/study-notes/JVM/Bytecode-ClassLoading/Class-Lifecycle/"},{default:(0,i.k6)((()=>[(0,i.eW)("类的加载过程（类的生命周期）详解")])),_:1})]),(0,i.Lk)("li",null,[(0,i.bF)(s,{to:"/study-notes/JVM/Bytecode-ClassLoading/Class-Lifecycle2/"},{default:(0,i.k6)((()=>[(0,i.eW)("再谈类的加载器")])),_:1})])]),K,(0,i.Lk)("ul",null,[(0,i.Lk)("li",null,[(0,i.bF)(s,{to:"/study-notes/JVM/Performance-Monitoring-Tuning/JVM-Overview/"},{default:(0,i.k6)((()=>[(0,i.eW)("概述")])),_:1})]),(0,i.Lk)("li",null,[(0,i.bF)(s,{to:"/study-notes/JVM/Performance-Monitoring-Tuning/JVM-Monitoring-Diagnostic-Tools/"},{default:(0,i.k6)((()=>[(0,i.eW)("JVM监控及诊断工具-命令行篇")])),_:1})]),(0,i.Lk)("li",null,[(0,i.bF)(s,{to:"/study-notes/JVM/Performance-Monitoring-Tuning/JVM-Monitoring-Diagnostic-Tools-GUI/"},{default:(0,i.k6)((()=>[(0,i.eW)("JVM监控及诊断工具-GUI篇")])),_:1})]),(0,i.Lk)("li",null,[(0,i.bF)(s,{to:"/study-notes/JVM/Performance-Monitoring-Tuning/JVM-Runtime-Parameters/"},{default:(0,i.k6)((()=>[(0,i.eW)("JVM运行时参数")])),_:1})]),(0,i.Lk)("li",null,[(0,i.bF)(s,{to:"/study-notes/JVM/Performance-Monitoring-Tuning/GC-Log/"},{default:(0,i.k6)((()=>[(0,i.eW)("分析GC日志")])),_:1})]),(0,i.Lk)("li",null,[(0,i.bF)(s,{to:"/study-notes/JVM/Performance-Monitoring-Tuning/OQL/"},{default:(0,i.k6)((()=>[(0,i.eW)("使用OQL语言查询对象信息")])),_:1})]),(0,i.Lk)("li",null,[(0,i.bF)(s,{to:"/study-notes/JVM/Performance-Monitoring-Tuning/Heap-Memory-Leak/"},{default:(0,i.k6)((()=>[(0,i.eW)("浅堆深堆与内存泄露")])),_:1})])]),I])}]]),U=JSON.parse('{"path":"/study-notes/JVM/","title":"JVM","lang":"zh-CN","frontmatter":{"title":"JVM","date":"2023-03-18T00:00:00.000Z","description":"介绍 提示 该文章包含JVM基础入门篇全部内容以及宋红康老师JVM教程全套笔记。 来源Bilibili尚硅谷宋红康老师JVM教程：硅谷2020最新版宋红康JVM教程 笔记补充：https://gitee.com/vectorx/NOTE_JVM/tree/main , https://www.yuque.com/u21195183/jvm 最细致的JV...","head":[["meta",{"property":"og:url","content":"https://mister-hope.github.io/blog/study-notes/JVM/"}],["meta",{"property":"og:site_name","content":"撄宁的博客"}],["meta",{"property":"og:title","content":"JVM"}],["meta",{"property":"og:description","content":"介绍 提示 该文章包含JVM基础入门篇全部内容以及宋红康老师JVM教程全套笔记。 来源Bilibili尚硅谷宋红康老师JVM教程：硅谷2020最新版宋红康JVM教程 笔记补充：https://gitee.com/vectorx/NOTE_JVM/tree/main , https://www.yuque.com/u21195183/jvm 最细致的JV..."}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:locale","content":"zh-CN"}],["meta",{"property":"og:updated_time","content":"2024-08-11T14:20:56.000Z"}],["meta",{"property":"article:author","content":"樱宁"}],["meta",{"property":"article:published_time","content":"2023-03-18T00:00:00.000Z"}],["meta",{"property":"article:modified_time","content":"2024-08-11T14:20:56.000Z"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"JVM\\",\\"image\\":[\\"\\"],\\"datePublished\\":\\"2023-03-18T00:00:00.000Z\\",\\"dateModified\\":\\"2024-08-11T14:20:56.000Z\\",\\"author\\":[{\\"@type\\":\\"Person\\",\\"name\\":\\"樱宁\\",\\"url\\":\\"https://mister-hope.com\\"}]}"]]},"headers":[{"level":2,"title":"介绍","slug":"介绍","link":"#介绍","children":[]},{"level":2,"title":"目录","slug":"目录","link":"#目录","children":[{"level":3,"title":"内存与垃圾回收篇","slug":"内存与垃圾回收篇","link":"#内存与垃圾回收篇","children":[]}]},{"level":2,"title":"字节码与类的加载篇","slug":"字节码与类的加载篇","link":"#字节码与类的加载篇","children":[]},{"level":2,"title":"性能监控与调优篇","slug":"性能监控与调优篇","link":"#性能监控与调优篇","children":[]},{"level":2,"title":"1. JVM体系结构","slug":"_1-jvm体系结构","link":"#_1-jvm体系结构","children":[]},{"level":2,"title":"2. 类装载器 ClassLoader","slug":"_2-类装载器-classloader","link":"#_2-类装载器-classloader","children":[{"level":3,"title":"2.1 有哪些类装载器？","slug":"_2-1-有哪些类装载器","link":"#_2-1-有哪些类装载器","children":[]},{"level":3,"title":"2.2 双亲委派和沙箱安全","slug":"_2-2-双亲委派和沙箱安全","link":"#_2-2-双亲委派和沙箱安全","children":[]}]},{"level":2,"title":"3. 本地方法栈 Native Method Stack","slug":"_3-本地方法栈-native-method-stack","link":"#_3-本地方法栈-native-method-stack","children":[{"level":3,"title":"为什么是native？了解","slug":"为什么是native-了解","link":"#为什么是native-了解","children":[]}]},{"level":2,"title":"4. 程序计数器 Program Counter Register","slug":"_4-程序计数器-program-counter-register","link":"#_4-程序计数器-program-counter-register","children":[]},{"level":2,"title":"5. 方法区 Method Area","slug":"_5-方法区-method-area","link":"#_5-方法区-method-area","children":[]},{"level":2,"title":"6. 栈 Stack","slug":"_6-栈-stack","link":"#_6-栈-stack","children":[{"level":3,"title":"6.1 栈存储什么数据？","slug":"_6-1-栈存储什么数据","link":"#_6-1-栈存储什么数据","children":[]},{"level":3,"title":"6.2 栈的运行原理","slug":"_6-2-栈的运行原理","link":"#_6-2-栈的运行原理","children":[]},{"level":3,"title":"6.3 栈溢出 StackOverflowError","slug":"_6-3-栈溢出-stackoverflowerror","link":"#_6-3-栈溢出-stackoverflowerror","children":[]}]},{"level":2,"title":"7. 栈、堆、方法区的交互关系","slug":"_7-栈、堆、方法区的交互关系","link":"#_7-栈、堆、方法区的交互关系","children":[]},{"level":2,"title":"8. 堆 Heap","slug":"_8-堆-heap","link":"#_8-堆-heap","children":[{"level":3,"title":"8.1 堆体系结构","slug":"_8-1-堆体系结构","link":"#_8-1-堆体系结构","children":[]},{"level":3,"title":"8.2 对象在堆中的生命周期","slug":"_8-2-对象在堆中的生命周期","link":"#_8-2-对象在堆中的生命周期","children":[]},{"level":3,"title":"8.3 Minor GC 的过程","slug":"_8-3-minor-gc-的过程","link":"#_8-3-minor-gc-的过程","children":[]},{"level":3,"title":"8.4 HotSpot 虚拟机的内存管理","slug":"_8-4-hotspot-虚拟机的内存管理","link":"#_8-4-hotspot-虚拟机的内存管理","children":[]},{"level":3,"title":"8.5 永久区","slug":"_8-5-永久区","link":"#_8-5-永久区","children":[]},{"level":3,"title":"8.6 堆参数调优","slug":"_8-6-堆参数调优","link":"#_8-6-堆参数调优","children":[]},{"level":3,"title":"8.7 堆溢出 OutOfMemoryError","slug":"_8-7-堆溢出-outofmemoryerror","link":"#_8-7-堆溢出-outofmemoryerror","children":[]}]},{"level":2,"title":"9. GC（Java Garbage Collection）","slug":"_9-gc-java-garbage-collection","link":"#_9-gc-java-garbage-collection","children":[{"level":3,"title":"9.1 GC 垃圾收集机制","slug":"_9-1-gc-垃圾收集机制","link":"#_9-1-gc-垃圾收集机制","children":[]},{"level":3,"title":"9.2 GC 日志信息详解","slug":"_9-2-gc-日志信息详解","link":"#_9-2-gc-日志信息详解","children":[]},{"level":3,"title":"9.3 GC 四大算法","slug":"_9-3-gc-四大算法","link":"#_9-3-gc-四大算法","children":[]}]},{"level":2,"title":"0. 如何判断Java中对象是否存活？","slug":"_0-如何判断java中对象是否存活","link":"#_0-如何判断java中对象是否存活","children":[{"level":3,"title":"0.1 引用计数算法","slug":"_0-1-引用计数算法","link":"#_0-1-引用计数算法","children":[]},{"level":3,"title":"0.2 根搜索方法","slug":"_0-2-根搜索方法","link":"#_0-2-根搜索方法","children":[]}]},{"level":2,"title":"1. 复制算法（Copying）：适用于新生代","slug":"_1-复制算法-copying-适用于新生代","link":"#_1-复制算法-copying-适用于新生代","children":[{"level":3,"title":"1.1 原理分析","slug":"_1-1-原理分析","link":"#_1-1-原理分析","children":[]},{"level":3,"title":"1.2 优缺点","slug":"_1-2-优缺点","link":"#_1-2-优缺点","children":[]}]},{"level":2,"title":"2. 标记清除（Mark-Sweep）：适用于老年代","slug":"_2-标记清除-mark-sweep-适用于老年代","link":"#_2-标记清除-mark-sweep-适用于老年代","children":[{"level":3,"title":"2.1 原理分析","slug":"_2-1-原理分析","link":"#_2-1-原理分析","children":[]},{"level":3,"title":"2.2 优缺点","slug":"_2-2-优缺点","link":"#_2-2-优缺点","children":[]}]},{"level":2,"title":"3. 标记压缩（Mark-Compact）：适用于老年代","slug":"_3-标记压缩-mark-compact-适用于老年代","link":"#_3-标记压缩-mark-compact-适用于老年代","children":[{"level":3,"title":"3.1 原理分析","slug":"_3-1-原理分析","link":"#_3-1-原理分析","children":[]},{"level":3,"title":"3.2 优缺点","slug":"_3-2-优缺点","link":"#_3-2-优缺点","children":[]},{"level":3,"title":"3.3 标记清除压缩（Mark-Sweep-Compact）","slug":"_3-3-标记清除压缩-mark-sweep-compact","link":"#_3-3-标记清除压缩-mark-sweep-compact","children":[]}]},{"level":2,"title":"4. 分代收集算法","slug":"_4-分代收集算法","link":"#_4-分代收集算法","children":[]},{"level":2,"title":"5. 总结","slug":"_5-总结","link":"#_5-总结","children":[{"level":3,"title":"5.1 年轻代（Young Gen）","slug":"_5-1-年轻代-young-gen","link":"#_5-1-年轻代-young-gen","children":[]},{"level":3,"title":"5.2 老年代（Tenure Gen）","slug":"_5-2-老年代-tenure-gen","link":"#_5-2-老年代-tenure-gen","children":[]}]},{"level":2,"title":"6. 附录.常见面试问题","slug":"_6-附录-常见面试问题","link":"#_6-附录-常见面试问题","children":[{"level":3,"title":"6.1 GC四种算法哪个好？","slug":"_6-1-gc四种算法哪个好","link":"#_6-1-gc四种算法哪个好","children":[]},{"level":3,"title":"6.2 请说出各个垃圾回收算法的优缺点","slug":"_6-2-请说出各个垃圾回收算法的优缺点","link":"#_6-2-请说出各个垃圾回收算法的优缺点","children":[]}]}],"git":{"createdTime":1722093117000,"updatedTime":1723386056000,"contributors":[{"name":"jiang","email":"948742327@qq.com","commits":4}]},"readingTime":{"minutes":31.7,"words":9511},"filePathRelative":"study-notes/JVM/README.md","localizedDate":"2023年3月18日","excerpt":"<h2>介绍</h2>\\n<div class=\\"hint-container tip\\">\\n<p class=\\"hint-container-title\\">提示</p>\\n<p>该文章包含JVM基础入门篇全部内容以及宋红康老师JVM教程全套笔记。\\n来源Bilibili尚硅谷宋红康老师JVM教程：<a href=\\"https://www.bilibili.com/video/BV1PJ411n7xZ\\" target=\\"_blank\\" rel=\\"noopener noreferrer\\">硅谷2020最新版宋红康JVM教程</a><br>\\n笔记补充：https://gitee.com/vectorx/NOTE_JVM/tree/main , https://www.yuque.com/u21195183/jvm</p>\\n<p>最细致的JVM讲解（更多可参考书籍）</p>\\n<p>基础入门视频：https://www.bilibili.com/video/BV1jJ411t71s?p=1&amp;vd_source=7138dfc78c49f602f8d3ed8cfbf0513d</p>\\n</div>","autoDesc":true}')}}]);